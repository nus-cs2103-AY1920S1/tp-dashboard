[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003d CS2103/T Revision Tool"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103-F10-3/main[image:https://travis-ci.org/AY1920S1-CS2103-F10-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "https://ci.appveyor.com/project/khiangleon/main[image:https://ci.appveyor.com/api/projects/status/495w820p1xr6owq2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103-F10-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103-F10-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "https://app.netlify.com/sites/revisiontoolpreview/deploys[image:https://api.netlify.com/api/v1/badges/7af7f86f-2c47-49e2-ac61-ca1f2b2c794c/deploy-status[Netlify Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/damith/addressbook-level3?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level3\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "CS2103/T Revision Tool (RT) is a desktop application for storing test banks and acting as your one stop customisable revision tool before the exams! The features will be optimised for usage by CS2103/T students who happens to like using the CLI (Command Line Interface) for typing down their solutions. In addition, it also comes with the benefits of having a beautiful Graphical User Interface (GUI)!"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "* the original source of the code is from AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 10,
      "-": 23
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "mainClassName \u003d \u0027seedu.revision.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    jcenter()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    compile group: \u0027edu.stanford.nlp\u0027, name: \u0027stanford-corenlp\u0027, version: \u00273.9.2\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    compile group: \u0027edu.stanford.nlp\u0027, name: \u0027stanford-corenlp\u0027, version: \u00273.9.2\u0027, classifier: \u0027models\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    implementation \u0027me.xdrop:fuzzywuzzy:1.2.0\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    testCompile \u0027org.junit.jupiter:junit-jupiter-api:5.5.1\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    testCompile \"org.testfx:testfx-core:4.0.16-alpha\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    testCompile \"org.testfx:testfx-junit5:4.0.16-alpha\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    testCompile \"org.testfx:openjfx-monocle:jdk-11+26\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    archiveName \u003d \u0027revisionTool.jar\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        \u0027site-name\u0027: \u0027CS2103/T Revision Tool\u0027,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103-F10-3/main\u0027,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 7,
      "neoshh": 6,
      "khiangleon": 2,
      "-": 151
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "CS2103/T Revision Tool was developed by the https://AY1920S1-CS2103-F10-3.github.io/docs/Team.html[AY1920S1-CS2103-F10-3] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d  Damith C. Rajapakse"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::damithc.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://www.comp.nus.edu.sg/~damithch[homepage]] [https://github.com/damithc[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Role: Project Advisor / Lecturer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d Wilfred Bradley Tan"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "image::wilfredbtan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "{empty}[http://github.com/wilfredbtan[github]] [\u003c\u003cwilfredbtan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Responsibilities: Develop main driver for quiz, integration of features, UI / UX"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d Neo Si Hao"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "image::neoshh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "{empty}[http://github.com/neoshh[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Role: Scheduling and Tracking +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d Ng Tze Xuan, Shuan"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "image::ShaunNgTX.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "{empty}[http://github.com/ShaunNgTX[github]] [\u003c\u003cshaunngtx#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Role: Code Quality +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Responsibilities: In charge of Documentation"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d Sim Khiang Leon"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "image::khiangleon.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "{empty}[http://github.com/khiangleon[github]] [\u003c\u003ckhiangleon#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Role: Integration +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d Keng Jun Xian"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "image::jxofficial.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "{empty}[http://github.com/jxofficial[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Role: InCharge of Model Component +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "Responsibilities: Model"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "jxofficial": 22,
      "khiangleon": 3,
      "-": 33,
      "ShaunNgTX": 2
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103-F10-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* *Email us* : You can also reach us at `wilfred @ u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d CS2103/T Revision Tool - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T13-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Update the version number in link:{repoURL}/src/main/java/seedu/revision/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "A project often depends on third-party libraries."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "For example, Revision Tool depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Managing these _dependencies_ can be automated using Gradle."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 16,
      "-": 38
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d CS2103/T Revision Tool - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-F10-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "By: `Team F10-3`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/revision/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/revision/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "image::ArchitectureSequenceDiagram2.png[]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//tag::junxian-ui[]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/revision/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "The abstract class `ParentWindow` consists of individual Ui parts e.g.`CommandBox`, `ResultDisplay`, `AnswerableListPanel`, `StatusBarFooter` etc. All Ui classes inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "The `MainWindow` inherits from the `ParentWindow` class and handles the display of information in the configuration mode. Key responsibilities of the `MainWindow` include"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* Execute user commands through the `CommandBox` using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* Listen for changes to `Model` data so that the UI can be updated to reflect the modified data. This occurs for two types of situations"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Direct modification to the information inside the Answerables List, such as `AddCommand` or `EditCommand`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Filtering of the currently shown list, for commands such as `FindCommand` and `ListCommand`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "The `StartQuizWindow` inherits from the `ParentWindow` class and handles the display of information during quiz mode. It has an additional `ScoreProgressAndTimerGridPane` Ui component, which"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "is used to contain score progress and timer related Ui. Key responsibilities of the `StartQuizWindow` include"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* Execute user answer input, e.g. \"A\", \"B\", \"C\", \"D\" for `Mcq`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* Adapt to changes in the current `Answerable` and update the Ui accordingly based on a few typical situations"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** from the four options of `Mcq` to the two options for `TrueFalse`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** update the progress bar for every `Answerable`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** update the timer every second and switch to the next `Answerable` when countdown reaches 0."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of the Ui for both windows"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* **Alternative 1 (current choice):** Have a parent class `ParentWindow` which is extended by `MainWindow` and `StartQuizWindow`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Pro1: Adheres to the Single Responsibility Principle, where the `MainWindow` only has one reason to change, and changes in quiz mode should not affect the `MainWindow`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Pro2: The abstract `ParentWindow` class follows the Open/Closed Principle, where the `StartQuizWindow` extends upon the Ui components and adds it\u0027s own Timer and ProgressBar Ui component."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Each class is also able to have their own implementation of the `executeCommand(String commandText)` method."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Con: Dependency between `MainWindow` and `StartQuizWindow` classes in the methods `MainWindow#handleStart` and `StartQuizWindow#handleEnd` respectively"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* **Alternative 2 (initial choice):** Handle all user commands and changes in Ui within the MainWindow."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Pro: Less overall code, quiz mode only needs to edit the content in the `AnswerableListPanel`."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Con: As the CommandBox is a functional interface, it can only take in one abstract method as a parameter. This would mean that `MainWindow#executeCommand` would need to handle all cases of"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "user inputs, for both answerable input commands and configuration mode commands. The `MainWindow#executeCommand` would be very long with complicated logic, thus violating SLAP."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//end::junxian-ui[]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//tag::shaun-logic[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d\u003d Overview of Logic Component"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "image::LogicClassDiagram2.png[]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "link:{repoURL}/src/main/java/seedu/revision/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".  `Logic` uses the `ParserManager` class to parse the user command."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding an `Answerable`)."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".  In quiz mode, the `CommandResult` object is also used to determine whether the user\u0027s answer is correct."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//end::shaun-logic[]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//tag::wilfred-overview[]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d\u003d Managing parsing in Configuration and Quiz Mode (Overview)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The Revision Tool uses two Parser interfaces (`Parser` and `QuizParser`) to parse different sets of commands (i.e. in Configuration Mode and in Quiz Mode)."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".Class Diagram of ParserManager to display how parsers are created in both modes."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image::ParserClassDiagram.png[width\u003d500]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "As shown in the figure above, the `ParserManager` class is responsible for creating the respective parsers for Configuration and Quiz Mode."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "This was designed while taking into consideration that the Quiz Mode Parsers (i.e. XYZParsers) will require"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "an extra `Answerable` argument on top of the user input String in order to carry out commands such as determining whether the user\u0027s input is the correct answer."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "(E.g. to call methods such as Answerable#isCorrect(Answer))"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "As different commands are accepted in Configuration and Quiz Mode, the `ParserManager` class uses overloaded methods"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "(`parseCommand(String)` and `parseCommand(String, Answerable)` to determine the valid commands in each mode. If a Configuration Mode"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "command such as `add` were to be used in Quiz Mode, the ParserManager would deem the the command as invalid. +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "With reference to Figure 6, The following are the parsers used in each mode:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* ABCParser (Configuration Mode):"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** AddCommandParser"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** DeleteCommandParser"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** EditCommandParser"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** FindCommandParser"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** ListCommandParser"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** StartCommandParser"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* XYZParser (Quiz Mode):"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** McqInputCommandParser"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** TfInputCommandParser"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** SaqInputCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "A more detailed description of the implementation of parsing in Configuration and Quiz Mode and its design considerations"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "can be found in \u003c\u003cImplementation-ConfigQuiz\u003e\u003e."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//end::wilfred-overview[]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//tag::shaun-designmodel[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "image::ModelClassDiagram2.png[]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/revision/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* stores a `QuestionBank` object that represents the `QuestionBank`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* stores the `Question Bank` data."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cAnswerable\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//end::shaun-designmodel[]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//tag::wilfred-answerable[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d\u003d The `Answerable` Class"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".Class Diagram of the Answerable Class"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image::AnswerableClassDiagram.png[]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The main class that the Revision Tool operates on is the `Answerable` class."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Each `Answerable` class must have 1 `Answerable`, 1 `Difficulty` and can have any amount of categories associated with it."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The amount of answers that an `Answerable` can have depends on its type."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "There are 3 subclasses of the `Answerable` Class which are: `Mcq`, `TrueFalse` and `Saq`. Each class defines it\u0027s"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "own rules on the validity of `Answer` s (highlighted in red in the class diagram) provided to it."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The following are the rules of validity for each subclass:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Mcq: 4 answers in total. 1 correct answer, 3 wrong answers."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* TrueFalse: Either \u0027true\u0027 or \u0027false\u0027 as its answer."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Saq: Any amount of answers."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "For all subclasses, there cannot be any duplicates of answers. For example, if an Mcq class has \"option1\" as one of its"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "wrong answers, it cannot have \"option1\" as its correct answer or another wrong answer."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//end::wilfred-answerable[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//tag::shaun-storage[]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "image::StorageDiagram.png[]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/revision/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "* can save `Answerable` objects in json format and read it back."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "* can save the `Statistics` data in json format and read it back."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//end::shaun-storage[]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Classes used by multiple components are in the `seedu.revision.commons` package."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//tag::shaun-add[]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d Add `Answerable` feature"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "The add `Answerable`s mechanism is facilitated by `AddCommand`."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "neoshh"
        },
        "content": "It extends `Command` that will read a user command and execute the command result."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* `AddCommand#addMcq()` -- Adds a mcq question to the question bank."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* `AddCommand#addShortAns()` -- Adds a short answer question to the question bank."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* `AddCommand#addTf()` -- Adds a True False answer question to the question bank."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#addMcqCommand()`, `Model#addTfCommand()` and `Model#addShortAnsCommand()` respectively."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Given below is an example usage scenario and how the add `Answerable`s mechanism behaves at each step."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Step 1. The user types `add type/mcq q/\"string of `Answerable`\" x/option1 x/option2 y/option3 x/option4 cat/[UML] diff/[easy]`, this command adds a easy difficulty mcq `Answerable` about UML with 4 options and option3 being the correct answer."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "image::InitialState.png[]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "neoshh"
        },
        "content": "Step 2. The command is being parse into the parser and the AddCommand object of type Command will be created."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "image::FirstState.png[]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Step 3. The AddCommand object will call its `addMcq()` method, this method will read the command and store the `Answerable` with the answers into the `test bank` accordingly."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "image::SecondState.png[]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "If a command fails its execution, it will not save the `Answerable` into the `revision tool`. It will however throw an invalid command exception."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//end::shaun-add[]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How add executes"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** User enters the command \"add ...\"."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Command is taken in and parsed to validate if it is a valid command."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Add command is executed."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** New question is saved in the question bank."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Format of the add command"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Use a single line containing all the information of the question."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "neoshh"
        },
        "content": "** Pros: Faster for user to add a question."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "neoshh"
        },
        "content": "** Cons: Hard for user to memorize the long sequence which may cause invalid command input."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* **Other alternative we considered:** Use multiple steps to guide user on adding the question."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "neoshh"
        },
        "content": "** Pros: User do not have to memorize the correct format and less chance for an invalid command input."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Cons: Slow to add `Answerable`s, requiring multiple steps to fully complete an `Answerable`."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//tag::wilfred-implementation[]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[[Implementation-ConfigQuiz]]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Configuration and Quiz Mode"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "As different commands are available for Configuration and Quiz Mode, we have to determine which commands are valid based on"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "the state of the application. To implement this, we had to examine two main design considerations: The *structure of the parser component* and *how to"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "determine which parser to use*. We will discuss these considerations in the following segment."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|*Aspect* | *Alternative 1* | *Alternative 2* | *Conclusion and Explanation*"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|Structure of the Parser Component"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|Command parsers for both modes implement the same interface (i.e. implement both `parse(String)` and `parse(String, Answerable)` methods)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "but for the method which is not used, throw an error if a client calls it."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|Command parsers belonging to each mode implement different interfaces (i.e. a `Parser` or `QuizParser` interface)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "which dictates the parameters of their parse() methods. (i.e. `parse(String)` for Configuration Mode vs `parse(String, Answerable)` for Quiz Mode)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|*Alternative 2 was implemented.* The main reason for this choice was to adhere to the interface-segregation principle."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "If alternative 1 were to be implemented, a Configuration Mode command may have to implement a parse(String, Answerable)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "dummy method which it will not use. This is bad design as a client might be able to call the dummy method and receive"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "unexpected results. Thus, by separating the interfaces, clients will only need to know about the methods that they need."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|Determining which parser to use| Create two parser manager classes (i.e. `QuizParserManager` and `ParserManager`)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "with accompanying `QuizLogicManager` and `LogicManager` classes whose methods will be called in `MainWindow` for Configuration Mode and"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`StartQuizWindow` for Quiz Mode respectively."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|Use a single `ParserManager` class which has overloaded methods of parse(String) and parse(String, Answerable). A"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "single `LogicManager` will also implement `execute(String)` and `execute(String, Answerable)`. In Configuration Mode, the"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`LogicManager` will call `execute(String)` as there is no need to take in an Answerable and in Quiz Mode, the `LogicManager`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "will call `execute(String, Answerable)` to initiate quiz-related commands."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|*Alternative 2 was implemented.* By doing so, we were able to adopt a facade design pattern. The main benefit would be that"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "the client doesn\u0027t need to know the logic involved in selecting which type of parser and logic to use. This hides the internal"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "complexity of the `ParserManager` class which will be responsible for determining which type of parser to use."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d\u003d Commands in Configuration Mode"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "In Configuration Mode, a single string is passed as an argument to the Logic#execute method (i.e. `execute(String)`)."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d\u003d Commands in Quiz Mode"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "In Quiz Mode, a string and the current `Answerable` object are passed as arguments to the Logic#execute method. (i.e. `execute(String, Answerable)`)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"c\", answerable)` API call."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".Interactions Inside the Logic Component for the `c` input command."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image::QuizSequenceDiagram.png[width\u003d790]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d\u003d Key differences between Configuration Mode and Quiz Mode:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|*Configuration Mode* | *Quiz Mode*"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|Logic#execute takes in a single string. | Logic#execute takes in a String and an Answerable."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|No methods of `Answerable` are called. | `Answerable#isCorrect(Answer)` is called from `AnswerableInputCommand`s such as `McqInputCommand` to check whether the user\u0027s answer is correct."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|`CommandResult` is used to display feedback to the user| `CommandResult` is used to display feedback to the user and inform `LogicManager` whether the selected answer is correct."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|`Model` is used to save actions such as the addition/deletion of answerables. | `Model` is used to update the score history statistics."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation of `CommandResult` (Builder Design Pattern)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The `CommandResult` class is designed using a builder pattern to allow flexibility of values returned to the `LogicManager`."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "To guard against null values, default values are provided to every field in the `CommandResult` class upon construction."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Objects that call `CommandResult` can choose to customise `CommandResult` according to their needs."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Below is a code snippet of the `CommandResultBuilder` and `CommandResult` class:"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image::wilfred-commandwithfeedback.png[width\u003d790]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image::wilfred-commandbuild.png[width\u003d790]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image::wilfred-commandresult.png[width\u003d790]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Examples of how to build a CommandResult:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "...."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "CommandResult c \u003d new CommandResultBuilder().withFeedback(message).withExit(true).build();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "CommandResult c \u003d new CommandResultBuilder().isCorrect(true).build();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "...."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d\u003d How the quiz works"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "After the user has `start` ed the quiz, the application enters Quiz Mode. The following is the flow of events after a quiz"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "session has started."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".Activity Diagram of a Quiz Session in `NormalMode`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image::QuizSessionActivityDiagram.png[width\u003d790]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*Elaboration of Steps:*"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". After the user has started a normal mode quiz. He/she will be prompted to key in their answer."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". If the input is valid, the revision tool will display the subsequent question until the level / entire quiz has ended."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". If the input is invalid, the revision tool will prompt the user to key in their input again with guidance provided on"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "the commands accepted."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ". If the time limit is exceeded (e.g. 30 seconds in Normal Mode), the revision tool will mark the `Answerable` as wrong and"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "move on to the next `Answerable`."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Once a level has ended, the user will be given the choice to move on to the next level or exit the quiz."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Once the entire quiz has ended, the user will be given the choice to restart or exit the quiz."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "For Custom Mode, the game play is the same except that user can choose the category, difficulty and timer for the questions. +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "For Arcade Mode, when a users enters a wrong answer, the quiz will end."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//end::wilfred-implementation[]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "//tag::khiangleon-stats[]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "[[Implementation-DataAnalytics]]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003d\u003d\u003d Data Analytics"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003d\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "There are many ways to present additional data to the user. While looking at user stories and deciding what our"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "target audience will need, we realised that one important information needs to be present - the type of questions"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "that user performs the weakest in. In order to present this information to the user, we needed a way to record"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "results of quizzes, store these results, break down these results according to question types and report the type"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "of questions that the user has performed badly in. These will be showcased in the `stats` command feature."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d updateStatistics feature"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "Quiz results are first recorded by successful completion of quizzes in Normal mode. At each quiz attempt,"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "a `Statistics` object is first initiated. Every correct answer parsed by the user will trigger the code snippet below"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "to `updateStatistics`."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "image::updateStatistics.png[width\u003d790]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "The sequence diagram for interactions between the `Logic` component and the `Model` component, from"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "parsing of a correct answer in the `Logic` component to updating the `Statistics` class in the `Model` component is"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "already shown above in `Figure 11`."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d updateHistory feature"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "After the user successfully completes a quiz in Normal mode, `History` will be updated with this \u0027Statistics\u0027 object."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "`History` serves as a storage component for quiz results. This is done using the code snippet shown below."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "image::updateHistory.png[width\u003d790]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "Given below is the sequence diagram for interactions between the`Ui`component, `Logic` component and the"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "`Model` component, from handling the end of a quiz in the `Ui` component to updating the `History` class"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "with the `Statistics` object in the `Model` component."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "image::updateHistorySequenceDiagram.png[width\u003d790]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Stats Command Feature"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "Given below is the sequence diagram for interactions within the `Logic` component for the `execute(\"stats\")` API call."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "image::StatsSequenceDiagram.png[]"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "The stats command will first activated the parser in `Logic` before executing the `StatsCommand`."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "This will then get the list of past statistics of quiz results from the model before sending a feedback"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "to the user through the `CommandResultBuilder`. The `CommandResultBuilder` will trigger the"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "`handleStats` method to finally show the list of statistics in the MainWindow through the `Ui`."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "//end::khiangleon-stats[]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "neoshh"
        },
        "content": "//tag::sihao-saq[]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d Saq feature"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d\u003d How Saq works"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "neoshh"
        },
        "content": "The Saq input mechanism is facilitated by `SaqInputCommand`. It extends `Command` and execute the `CommandResult`. The input"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "neoshh"
        },
        "content": "will be  parse into `SaqInputCommandParser` to check for input validity. If the input String is not valid (i.e the String"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "neoshh"
        },
        "content": "does not start with a letter of number), an invalid command parse exception will be thrown, indicating to user that the"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "neoshh"
        },
        "content": "input String requires a letter or a number at the start of the String."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "neoshh"
        },
        "content": "If the input is valid, `SaqInputCommand` object of type `Command` will be created. The execute command of the"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "neoshh"
        },
        "content": "`SaqInputCommand` object will be executed. The execute command will call the `isCorrect` method of Saq to check if the"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "neoshh"
        },
        "content": "user input is correct or not."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "neoshh"
        },
        "content": "The activity diagram below shows the steps the user takes to answer an SAQ."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "neoshh"
        },
        "content": ".Activity Diagram of checking answer for SAQ"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "neoshh"
        },
        "content": "image::SaqAnswerCheckerActivityDiagram.png[width\u003d700]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d\u003d NLP Libraries"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "neoshh"
        },
        "content": "External libraries were used to determine if the user input is correct or not. `StanfordCoreNLP` library was used to"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "neoshh"
        },
        "content": "check for sentimental value of user input and the list of correct answers. This helps to check for negative sentence"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "neoshh"
        },
        "content": "against a neutral or positive sentence (eg. \"not a uml diagram\" and \"it\u0027s a uml diagram\"). The `FuzzyWuzzy` library was"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "neoshh"
        },
        "content": "also used to determine the similarity percentage of the user input to the correct answer using fuzzy string matching"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "neoshh"
        },
        "content": "technique."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "neoshh"
        },
        "content": "The class diagram below shows the relationship between the classes that are used to validate the correctness of the"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "neoshh"
        },
        "content": "user input."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "neoshh"
        },
        "content": ".Class Diagram of SAQ Answer Checker"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "neoshh"
        },
        "content": "image::SaqAnswerCheckerClassDiagram.png[width\u003d790]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d\u003d Validating the answer"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "neoshh"
        },
        "content": "The `execute` method will return the `CommandResult`, correct or wrong. The currentAnswerable of type `Saq` will call its"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "neoshh"
        },
        "content": "`isCorrect` method and return a boolean value, true for correct answer and false for wrong answer. The sequence diagram"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "neoshh"
        },
        "content": "below shows the steps taken by the `isCorrect` method to determine if the user input is correct or wrong."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "neoshh"
        },
        "content": ".Sequence Diagram of SAQ isCorrect Method"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "neoshh"
        },
        "content": "image::SaqIsCorrectSequenceDiagram.png[width\u003d790]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "neoshh"
        },
        "content": "//end::sihao-saq[]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//tag::shaun-restore[]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d Restore feature"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "The restore mechanism is facilitated by `RestoreCommand`."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "It extends `Command` that will read a user command and execute the command result."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* `#handleRestore()` -- Prompts the user with an alert box if he really wishes to execute the restore function."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* `#setRevisionTool()` -- Clears the current question bank and reset it with our own default questions."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#setRevisionTool()` and from `MainWindow` as `#handleRestore()` respectively."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* When implementing the restore feature, we didn\u0027t want users to face a problem if they entered the command accidentally hence the alert popup was implemented, to prompt users if they really want to carry out the command before executing it."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* With this popup, users will now be more cautious when trying to restore and only do so when they really want to reset their revision tool."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* Furthermore, the questions that we included in the default revision tool question bank are questions taken from the lecture quiz and weekly quiz which are most probably deemed important by the professor himself."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Restore executes"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** User enters the command \"restore\"."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Command is taken in and a popup is shown to reconfirm if the user would like to carry out the restore command."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Upon clicking yes, restore command will be handled."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Current questions will be deleted and default questions will reset to the revision tool."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//end::shaun-restore[]"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//tag::shaun-autocomplete[]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d AutoComplete feature"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* A set of commands and auto completed text are saved in a set."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* When users type a command on the text box, method `#populatePopup` will be called where the user\u0027s command will be matched against our SortedSet."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* If there is a match, a contextMenu showing all possible auto complete text will show up."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* This method is implemented such that the results in the contextMenu will change and show as the user is typing and this would make it more intuitive for users."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* The main design consideration here would be to have value added auto complete list to pop up."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* How we managed that is to show:"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** The basic command"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Basic command + possible parse commands where they can easily fill in."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "image::AutoComplete2.png[]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How AutoComplete works"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Users wishes to enter an \"Add\" command `add type/mcq q/What is 1 + 1 y/2 x/1 x/3 x/4 cat/easy diff/1`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Upon typing either \"a\", \"ad\" or even \"add\", the auto complete context menu will pop up showing possible auto complete list, mainly:"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "*** add"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "*** add type/ q/ y/ x/ cat/ diff/"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Upon seeing that, users will be able to select those options or use those as a guideline to complete his commands more intuitively."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//end::shaun-autocomplete[]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//tag::junxian-list[]"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d List feature"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "ListCommand` extends `Command` that will read in user command and execute the command result. User can filter by `Catergory` and/or `Difficulty`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Showing the filtered list"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* **Current Implementation** `ListCommand#excute` combines the `CategoryPredicate` and `DifficultyPredicate` to update the answerable list through `Model#updateFilteredAnswerableList`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Pro: Uses Java 8 streams which supports immutability. This is in line with the immutability clause enforced by the `ObservableList` returned by `Model#updateFilteredAnswerableList`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//end::junxian-list[]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//tag:: junxian-proposed-features[]"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d Proposed Features"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d\u003d Star Answerable Command"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Overview of feature"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "User will be able to star an `Answerable` during the test, which marks the `Answerable`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "to remind them to revisit it after the test. The `Answerable` will have an additional `boolean` field `star`."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "The code flow follows the sequence diagram in section 3.2.3, but without the call to `Answerable#isCorrect`."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "The `LogicManager` then calls `execute(String)` in the reference frame \"edit question as starred\". This will involve the `EditCommand`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "which is typically used in the configuration mode. It is now being called internally inside the quiz mode to update the `Answerable` as starred."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ".Sequence Diagram of the StartAnswerableCommand during quiz mode"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "image::StarQuestionInputSequenceDiagram.png[]"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ".Sequence Diagram of editing the `Answerable` as starred."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "image::EditQuestionAsStarredSequenceDiagram.png[]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Updating the `Answerable` to be marked as starred while inside quiz mode."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* **Alternative 1 (current choice):** Update the `Answerable` through a call to `LogicManager#execute`. This is primarily used during the configuration mode and not the quiz mode."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Pro: Uses existing commands to implement a new feature for the user, appropriate code reuse"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Con: No clear separation of logic as quiz mode should not know about configuration mode commands."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* **Alternative 2:** Directly edit the `Answerable` as it is accessible in the `execute(String, Answerable)` for quiz mode commands."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Pro: Less code needed."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Con: It breaks the implicit immutability of the `Answerable`, which should only be edited through the `EditCommand` (which creates a new `Answerable`)"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d\u003d Input short code for quiz questions"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Overview of feature"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "User will be able to input code, during the quiz session, and the `RevisionTool` will check the syntax as the user types in the code."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "The activity diagram is outlined below."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ".Sequence Diagram of the StartAnswerableCommand during quiz mode"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "image::CodingQuestionSessionActivityDiagram.png[]"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ".Activity diagram showing the user flow for code input during quiz mode."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//end:: junxian-proposed-features[]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "neoshh"
        },
        "content": "* is a CS2103/T student"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "neoshh"
        },
        "content": "* prefer to use an app to help them to revise"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*Value proposition*: helps student to ace CS2103/T"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "neoshh"
        },
        "content": "//tag::sihao-userstories[]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |lazy CS2103 student |refer to the revision tool solely for my consolidated module revision |do not have to refer to Luminus"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |CS2103 student |have a personalised application to store all my questions and answers in one place |refer to it conveniently for revision."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |CS2103 student |have a revision tool to test my coding skills and concepts through writing short codes |test myself on coding proficiency too."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |CS2103 student |keep track and see how much progress I have made in completing the questions |gauge my level of progress in completing the syllabus."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |vim-using CS2103/T student |use the keyboard-based commands |further increase my efficiency"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |busy CS2103/T |use quick revision tools |learn using spaced-retrieval"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |busy CS2103 student |mark certain concepts as easy |will not have to spend as much time studying the easy concepts."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |CS2103 student with a lot of things on my mind |mark certain questions that I am unsure of |refer back to the question when I am free."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |CS2103 student |import questions from my peers |study on my own."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |conscientious CS2103 student |export the questions I am unsure of |raise them up during tutorials."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |indecisive student |be recommended questions instead of me having to plan my own study plan |go directly to studying"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |competitive CS2103 student |at least know where I stand among my cohort |look at who is the next person I can beat."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |gamer CS2103/T student |accomplish tasks that give me a sense of achievement, preferably through in application rewards |I feel good."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |A+ CS2103 student |review and give suggestions to improve the application |benefit more CS2103 students."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |CS2103 student |port this application over to my other modules |revise for my other modules using this application as well."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |unorganized CS2103 student |get reminders about my quiz deadlines |complete my quizzes on time"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |organized CS2103 student |schedule reminders to remind me when I should use the application to do revision |will not forget to do revision."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |user of the application |get an estimate of my final grade for CS2103 |know what to expect on result release day."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |CS2103 peer tutor |use this as a form of teaching tool |teach better"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |CAP 5.0 CS2103 student |show off my IQ by perfecting my test scores |motivate other students."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |CS2103 student |view the questions/topics that most students answered wrongly |revise for those topics."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |visual oriented student |the app to have different colours as compared to the regular black and white |learn better"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |non-motivated CS2103 student |use the application to remind me to study |I will study"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |student that wants shortcuts |type a partial command and have it be auto-completed |I can save time."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |CS2103 student new to Git |have a help function which lists all the commonly used Git commands |become more proficient with Git."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |master software engineer taking CS2103 |be able to access the source code |to make the application better and customise it for myself."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |CS2103 student |get recommended a list of questions that I frequently get wrong |learn from my mistakes"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`*` |lonely CS2103 student |have someone to talk to, even if it’s a computer |I won\u0027t feel lonely"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`*` |CS2103 student who keeps having stomach ache |the application to tell me where the nearest toilet is |go and shit"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "neoshh"
        },
        "content": "//end::sihao-userstories[]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//tag::wilfred-use-case[]"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "(For all use cases below, the *System* is the `RevisionTool` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Use case (UC01): Add answerable"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "1.  User requests to add an answerable"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "2.  RevisionTool adds the answerable"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* 2a. The answerable already exists in the list."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 2a1. RevisionTool shows an error message."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* 2a. Any of the parameters provided are invalid."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 2a1. RevisionTool shows an error message."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Use case (UC02): Delete answerable"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "1.  User requests to list answerables"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "2.  RevisionTool shows a list of answerables"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "3.  User requests to delete a specific answerable in the list"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "4.  RevisionTool deletes the answerable"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 3a1. RevisionTool shows an error message."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Use case (UC03): Start Quiz in `Normal Mode`"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "1.  User requests to start quiz in Normal Mode"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "2.  RevisionTool shows the Quiz Mode window with the first question displayed."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "3.  User enters his input into the command box."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "4.  RevisionTool checks the input and records the result of the answer (i.e. whether correct or not)."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "5.  RevisionTool displays the next question. Use case resumes at step 3."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* 1a. The list of questions for the quiz is empty."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* 3a. The given input is invalid."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 3a1. RevisionTool shows an error message."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* 3c. User inputs an exit command."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* 5a. The current level of the quiz has ended."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 5a1. RevisionTool prompts the user to continue or end the quiz."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 5a2. User chooses to proceed to the next level."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case resumes at step 5."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* 5b. The current level of the quiz has ended."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 5b1. RevisionTool prompts the user to continue or end the quiz."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 5b2. User chooses to end the quiz."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* 5c. The entire quiz has ended."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 5c1. RevisionTool prompts the user to restart or end the quiz."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 5c2. User chooses to restart the quiz."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case ends resumes at step 2."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* 5d. The entire quiz has ended."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 5d1. RevisionTool prompts the user to restart or end the quiz."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 5d2. User chooses to end the quiz."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *a. Time available to answer each question of the quiz runs out (30 seconds for Normal Mode)."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** *a1. RevisionTool marks the question as wrong."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case resumes at step 5."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "For Custom Mode, the use case is the same except timer can be customised. +"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "For Arcade Mode, an extension 4a will be added. If the user gets the question wrong, the quiz will end and the User will"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "be prompted to restart or end the quiz."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//end::wilfred-use-case[]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//tag::shaun-appendix[]"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".  RevisionTool should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".  RevisionTool be able to hold up to 1000 questions without any significant reduction in performance for typical usage."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".  A user with above slow typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".  RevisionTool should be able to run without any internet connectivity."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".  RevisionTool does not require any further installation upon downloading the jar file."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "[[Answerables]] Answerables::"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "A set of question answers, which includes :"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* Type: MCQ, True False, Short Answered Question"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* Question"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* Correct Answers (Can contain multiple answers)"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* Wrong Answers (Can contain multiple answers)"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* Category"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* Difficulty"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "   Expected: Shows the GUI with a set of sample answerables. The window size may not be optimum."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window by using the `x` button at the top right hand corner or by using the command `exit`."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".. Re-launch the app by double clicking the jar file. +"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d Adding an answerable"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Adding an MCQ to the current list."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".. Test case: `add type/mcq q/What is 1 + 1 y/2 x/1 x/3 x/4 cat/easy diff/1` +"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Expected: new MCQ answerable will be created and appended at the bottom of the list. Details of the the added answerable will be shown at the bottom of the list, and the correct answer will be highlighted in green."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ". Adding a True False to the current list"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".. Test case: `add type/tf q/What is 1 + 1 \u003d 2 y/true cat/easy diff/1` +"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Expected: new True False answerable will be created and appended at the bottom of the list. Details of the added answerable will be shown at the bottom of the list, and only the correct answer will be shown and highlighted in green."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ". Adding a Short Answer Question (SAQ) to the current list"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".. Test case: `add type/saq q/What is smaller than 10 but bigger than 7? y/8 y/9 cat/easy diff/1` +"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Expected: new SAQ answerable will be created and appended at the bottom of the list. Details of the added answerable will be shown at the bottom of the list and all the correct answers state will be highlighted in green."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ". Adding an Answerable that already exist in the Revision Tool"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".. Test case: `add type/mcq q/What is 1 + 1 y/2 x/1 x/3 x/4 cat/easy diff/1` +"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Expected: No new answerable will be added as the question already exist in the Revision Tool. An error message will be thrown, informing users that the answerable already exist in the Revision Tool."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Deleting an answerable"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Deleting an answerable while all answerables are listed."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".. Prerequisites: List all answerables using the `list` command. Multiple answerables in the list."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "   Expected: First answerable is deleted from the list. Details of the deleted answerable shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "   Expected: No answerable is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d Starting quiz"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Starting a quiz in various modes."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".. Test case: `start mode/normal` +"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Expected: Start quiz window will pop up with a question showing under the command box and the answers in the result box further below. Answer the questions using the CLI accordingly to see the progress bar move till quiz completion. Users will be prompted if he wishes to proceed to level 2."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".. Test case: `start mode/arcade` +"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Expected: Start quiz window will pop up similar to previous test case. The only difference would be that once the quiz proceeds and an incorrect answer is input, the quiz ends and the score will be shown. This is the \"hard mode\" of our quiz mode."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".. Test case `start mode/custom timer/3` +"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Expected: Start quiz window will pop up similar to previous test case. The difference here will be the timer. Instead of the 30 seconds timer per question, the new timer (seen at the bottom right beside the status progress bar) will be at 3 seconds as set by the user."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Answering questions during Normal Mode"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Answering an MCQ."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".. Test case: `a` +"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Expected: Revision Tool will progress to the next question if there are still questions available."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Answering a True \u0026 False Question."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".. Test case: `t` +"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Expected: Revision Tool will progress to the next question if there are still questions available."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Answering an SAQ."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".. Test case: `Short answer` +"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Expected: Revision Tool will progress to the next question if there are still questions available."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Ending the quiz."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".. Test case: `exit` +"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Expected: Revision Tool will end the quiz and go back to configuration mode."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "For the scenarios 1-3. If the level has ended, the user will be prompted to continue to the next level"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "or end the quiz. If the entire quiz has ended, the user will be prompted to restart or end the quiz."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Testing for Custom Mode is similar to Normal Mode except that the category, difficulty and timer are customisable."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "For Arcade Mode, whenever the user answers a questions wrongly, the quiz will end and the user will be prompted to restart"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "or end the quiz."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".. If there is a missing answerables data file, the RevisionTool will automatically create a default data file with all the default answerables inside."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".. If there is a corrupted answerable data file, the RevisionTool will automatically start with a list of empty file. Users will then be able to use the `#restoreCommand` here to get a list of default answerables or alternatively, create a new set of answerables manually."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ". To identify missing/corrupted data files:"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".. `.\\data\\revisiontool.json`"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".. `.\\data\\history.json`"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//end::shaun-appendix[]"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 282,
      "neoshh": 100,
      "jxofficial": 82,
      "khiangleon": 58,
      "-": 310,
      "ShaunNgTX": 117
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d CS2103/T Revision Tool - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T13-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[cols\u003d\"1,2a,1\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[cols\u003d\"1,2a,1\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5. These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 10,
      "-": 113
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize User Stories `[LO-UserStories]`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/userStories/[se-edu/se-book: Requirements: Specifying Requirements: User Stories]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more user stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Assume you are planing to expand the functionality of the AddressBook (but keep it as a CLI application)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "What other user stories do you think AddressBook should support?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Add those user stories to the `DeveloperGuide.adoc`."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize use cases `[LO-UseCases]`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/useCases/[se-edu/se-book: Requirements: Specifying Requirements: Use Cases]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a \u0027Rename tag\u0027 use case"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a use case to the `DeveloperGuide.adoc` to cover the case of _renaming of an existing tag_."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "e.g. rename the tag `friends` to `buddies` (i.e. all persons who had the `friends` tag will now have a `buddies` tag instead) Assume that AddressBook confirms the change with the user before carrying out the operation."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Non Functional Requirements `[LO-NFR]`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/requirements/nonFunctionalRequirements/[se-edu/se-book: Requirements: Non-Functional Requirements]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more NFRs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Add some more NFRs to the `DeveloperGuide.adoc`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Polymorphism `[LO-Polymorphism]`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Command::execute()` method shows polymorphic behavior."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/polymorphism/[se-edu/se-book: Paradigms: OOP: Polymorphism]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/polymorphism/[se-edu/se-book: C++ to Java: OOP: Polymorphism]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a polymorphic `isMutating` method"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Add a method `boolean isMutating()` to the `Command` class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "This method will return `true` for command types that mutate the data. e.g. `AddCommand`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently, AddressBook data are saved to the file after every command."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Take advantage of the the new method you added to limit file saving to only for command types that mutate data."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `add` command should always save the data while `list` command should never save data to the file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "There may be better ways to limit file saving to commands that mutate data."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The above approach, while not optimal, will give you chance to implement a polymorphic behavior."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use abstract classes/methods `[LO-Abstract]`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/abstractClasses/[se-edu/se-book: Paradigms: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/abstractClassesAndMethods/[se-edu/se-book: C++ to Java: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Make `Command#execute()` method abstract"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* Make the `Command#execute()` method abstract (hint: refer to the comment given below the method)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use interfaces `[LO-Interfaces]`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `AddressBook` class implements the `ReadOnlyAddressBook` interface so that clients who don\u0027t need write access to the `AddressBook` can access the `AddressBook` through the `ReadOnlyAddressBook` interface instead."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "image::ReadOnlyAddressBookUsage.png[width\u003d500]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/interfaces/[se-edu/se-book: Paradigms: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/interfaces/[se-edu/se-book: C++ to Java: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a `Printable` interface"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `Printable` interface as follows."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "image::PrintableInterface.png[width\u003d400]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* `Override` the `getPrintableString` in classes `Name`, `Phone`, `Email`, and `Address` so that each produces a printable string representation of the object. e.g. `Name: John Smith`, `Phone: 12349862`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Add the following method in a suitable place of some other class."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Note how the method depends on the Interface."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "String getPrintableString(Printable... printables) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "The above method can be used to get a printable string representing a bunch of person details."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you should be able to call that method like this:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "// p is a Person object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "return getPrintableString(p.getPhone(), p.getEmail(), p.getAddress());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow Liskov Substitution Principle `[LO-LSP]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/liskovSubstitutionPrinciple/[se-edu/se-book: Principles: Liskov Substitution Principle]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add an exception to an overridden method"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Add a `throws Exception` clause to the `AddCommand::execute` method."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Notice how Java compiler will not allow it, unless you add the same `throws` clause to the parent class method."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "This is because if a child class throws an exception that is not specified by the Parent\u0027s contract, the child class is no longer substitutable in place of the parent class."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Also note that while in the above example the compiler enforces LSP, there are other situations where it is up to the programmer to enforce it."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "For example, if the method in the parent class works for `null` input, the overridden method in the child class should not reject `null` inputs."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "This will not be enforced by the compiler."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Java-FX for GUI programming `[LO-JavaFx]`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/javaTools/javaFXBasic/[se-edu/se-book: Tools: Java: JavaFX: Basic]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance GUI"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* Do some enhancements to the AddressBook GUI. e.g. add an application icon, change font size/style"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Analyze Coupling and Cohesion of designs `[LO-CouplingCohesion]`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how having a separate `ParserUtil` class to handle user input validation, space trimming etc. of model data (an application of the Single Responsibility Principle) improves the _cohesion_ of the model component (since it does not need to be concerned with handling user input) as well as the `ParserUtil` class."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/coupling/[se-edu/se-book: Design: Design Principles: Coupling]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/cohesion/[se-edu/se-book: Design: Design Principles: Cohesion]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Identify places to reduce coupling and increase cohesion"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the design coupling can be reduced further, or cohesion can be increased further?"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "[[apply-dependency-inversion-principle-lo-dip]]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Dependency Inversion Principle `[LO-DIP]`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the `LogicManager` class doesn\u0027t depend on `StorageManager` directly, but rather the interface `Storage`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "This is an application of the Dependency Inversion Principle."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicStorageDIP.png[width\u003d300]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the code do you notice the application of DIP?"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/dependencyInversionPrinciple/[se-edu/se-book: Principles: Dependency Inversion Principle]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Dependency Injection `[LO-DI]`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how the `LogicManager` class does not depend on the `StorageManager` class, but depends on the `Storage` interface."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to use _Dependency Injection_ to test the `LogicManager` class without getting the `StorageManager` class involved."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/dependencyInjection/[se-edu/se-book: Quality Assurance: Testing: Dependency Injection]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Facilitate injecting a StorageStub"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how `LogicManagerTest` tests `LogicManager` by constructing a `StorageManager` object."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Implement `StorageStub` such that calls to its `save*` methods do nothing (i.e. empty method body)."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Update `LogicManagerTest` to work with the `StorageStub` instead of the actual `StorageManager` object."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `LogicManagerTest` injects a `StorageStub` object when constructing a `LogicManager` before testing it."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjection.png[width\u003d600]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* The example above uses \u003c\u003capply-dependency-inversion-principle-lo-dip, DIP\u003e\u003e as a means to achieve DI."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there is another way to inject a `StorageStub` object, as shown below."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "In this case we do not apply the DIP but we still achieve DI."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjectionWithoutDIP.png[width\u003d250]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Open-Closed Principle `[LO-OCP]`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/openClosedPrinciple/[se-edu/se-book: Principles: Open-Closed Principle]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Analyze OCP-compliance of the `LogicManager` class"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Consider adding a new command to the Address Book. e.g. an `edit` command."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Notice how little you need to change in the `LogicManager` class to extend its behavior so that it can execute the new command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "That is because `LogicManager` follows the OCP i.e. `LogicManager` is _open to be extended_ with more commands but _closed for modifications_."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Is it possible to make the `AddressBookParser` class more OCP-compliant in terms of extending it to handle more command types?"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* In terms of how it saves data, is `LogicManager` more OCP-compliant due to the application of DIP as given in \u003c\u003capply-dependency-inversion-principle-lo-dip, `LO-DIP`\u003e\u003e?"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "How can you improve ``LogicManager``\u0027s OCP-compliance further so that it can not only work with different types of storages, but different number of storages (e.g. save to both a text file and a database)."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Work in a 3KLoC code base `[LO-3KLoC]`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance AddressBook"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* Enhance AddressBook in some way. e.g. add a new command"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 20,
      "-": 193
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d CS2103/T Revision Tool - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-F10-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Run the `seedu.revision.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, CS2103/T Revision Tool\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4,
      "-": 70
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d CS2103/T Revision Tool - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T13-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "e.g. `seedu.revision.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "e.g. `seedu.revision.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Hybrids of unit and integration tests."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "e.g. `seedu.revision.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 10,
      "-": 43
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d CS2103/T Revision Tool - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-F10-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":javaFxBugURL: https://github.com/javafxports/openjdk-jfx/pull/271"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "By: `Team F10-3`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "This CS2103/T Revision Tool (RT) is for those who *prefer to use a desktop app for storing their personally"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "customised question banks*. More importantly, RT is *optimized for those who prefer to work with a Command Line"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "If you can type fast, RT can get your revision done faster than traditional quiz"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "RT is initially designed with the intention to help CS2103/T students who do not like to use Luminus quizzes"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "for their revision. However, it can also be used for other modules or other revision purposes, for students who"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "generally prefer a CLI and GUI that is different from what Luminus or other existing quiz apps have to offer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".  Ensure that you have the latest version of JavaFX installed in your Computer. (Previous versions of JavaFX may cause"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "bugs related to displaying pop ups. more info about this bug can be found at this link:{javaFxBugURL}/link[link])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".  Download the latest RT link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your `*question bank*`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds. The image below shows the app in configuration mode."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".  Some example commands you can try in configuration mode:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* *`list`* : lists questions of all categories and difficulties for the user to view."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* **`add `**`type/mcq q/According to the textbook, which kind of project is more difficult? x/Greenfield x/Brownfield y/None"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "of the above x/Padifield diff/1 cat/Introduction` : adds an mcq question with x/ (as in a cross for \"wrong\") marking the wrong answers and"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "y/ (as in \"yes\") marking the correct answers. Difficulty: 1, Category: Introduction."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* **`delete`**`3` : deletes the 3rd question shown in the current list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *`exit`* : exits the app."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".  Refer to \u003c\u003cConfigurationMode\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ". To enter Quiz Mode, type `start mode/normal` other modes such as arcade and custom are also available and are elaborated on"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "in \u003c\u003cQuiz Mode\u003e\u003e ."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image::Ui2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[[ConfigurationMode]]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d Configuration Mode"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add type/TYPE q/QUESTION`, \u0027TYPE\u0027 and `QUESTION` are parameters"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "which can be used as `add type/mcq q/What the recommended user story format?`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[x/WRONG_ANSWER]...` can be used as `{nbsp}` (i.e. 0 times), `x/Greenfield`, `x/Brownfield` etc."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `q/QUESTION cat/CATEGORY`, `cat/CATEGORY q/QUESTION` is also acceptable."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//tag::wilfred[]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//tag::wilfred-start[]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Starting the quiz: `start`."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "User can start by choosing the mode of the quiz. (normal / arcade / custom). See \u003c\u003cQuiz Mode\u003e\u003e for in-quiz commands."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Format: `start mode/MODE`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "To start all questions in the question bank, use command +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "start mode/normal"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `start mode/normal`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* `start mode/custom cat/uml diff/1 timer/20`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//end::wilfred-start[]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "//tag::khiangleon[]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "//tag::khiangleon-stats[]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003d\u003d\u003d Check your progress: `stats`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "image::stats.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "Displays the percentage of questions answered correctly by difficulty, for all"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "quiz attempts. Indicates to user which difficulty level he or she is weakest in."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "This feature only records results for the normal mode of quizzes."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "Format: `stats`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "*Total*: 68.42%"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "* Difficulty 1: 100.00%"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "* Difficulty 2: 100.00%"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "* Difficulty 3: 14.29%"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "* Please prioritise this type of questions: Difficulty 3"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "//end::khiangleon-stats[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//tag::shaun[]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//tag::shaun-autocomplete[]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d AutoComplete Function"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Helps you complete your command when you type."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Users will be able to see a list of auto complete options while they are typing. Once the auto complete context menu is"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "shown, users can use the arrow keys to choose the options they want and upon pressing the \"ENTER\" button, they would be able to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "select the option."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* `User wants to type the \"start\" command in the command box`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* `He will be able to see a list of dropdown options as shown:`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* `First \"ENTER\" button will select the option`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* `Second \"ENTER\" button will execute the option`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "+"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "image::Autocomplete2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//end::shaun-autocomplete[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//tag::wilfred-add[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d Adding MCQ/TrueFalse question: `add`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "neoshh"
        },
        "content": "Adds a MCQ or TrueFalse question to the question bank"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Format: `add type/TYPE q/QUESTION cat/CATEGORY diff/DIFFICULTY y/CORRECT_ANSWER x/WRONG_ANSWER... `"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[%hardbreaks]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The following are the valid answer formats for each question type:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*MCQ*: 1 Correct answer and 3 Wrong answers."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*True \u0026 False*: 1 Correct answer (i.e. True / False) wrong answers omitted."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `add type/mcq q/According to the textbook, which kind of project is more difficult? cat/Week 2 diff/1"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "x/Greenfield x/Brownfield y/None of the others x/Padifield`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `add type/tf q/OODMs are Class Diagrams cat/uml diff/2 y/true`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//end::wilfred-add[]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "neoshh"
        },
        "content": "//tag::sihao-add[]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d Adding SAQ: `add`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "neoshh"
        },
        "content": "Adds a SAQ to the question bank"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "neoshh"
        },
        "content": "Format: `add type/saq q/QUESTION cat/CATEGORY diff/DIFFICULTY y/CORRECT_ANSWER ... `"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "neoshh"
        },
        "content": "[%hardbreaks]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "neoshh"
        },
        "content": "The following are the valid answer formats for SAQ:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*SAQ*: Multiple correct answers, no wrong answers."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `add type/saq q/What does UML stands for? cat/cs2103 diff/1 y/unified modeling language`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "neoshh"
        },
        "content": "****"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "neoshh"
        },
        "content": "[%hardbreaks]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*NOTE*:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "neoshh"
        },
        "content": "Answer to the SAQ cannot be \"exit\"."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "neoshh"
        },
        "content": "Answer cannot appear in the question"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "neoshh"
        },
        "content": "(eg. q/What is UML diagram? y/UML Diagram)."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "neoshh"
        },
        "content": "****"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "neoshh"
        },
        "content": "//end::sihao-add[]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//end::wilfred-add[]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//tag::wilfred-edit[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Editing a question : `edit`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Edits an existing question in the question bank."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Format: `edit INDEX [q/QUESTION] [cat/CATEGORY] [diff/DIFFICULTY] [x/WRONG_ANSWER]... [y/CORRECT_ANSWER]...`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Edits the question at the specified `INDEX`. The index refers to the index number shown in the displayed question list."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* When editing category and/or difficulty, the existing category and/or difficulty of the question will be removed"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "i.e adding of category and/or difficulty is not cumulative."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* Question type cannot be edited."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `edit 1 q/According the the textbook, is greenfield or brownfield tougher?` +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Edits the the first question to \"According the the textbook, is greenfield or brownfield tougher?\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//end::wilfred-edit[]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Deleting a question : `delete`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Deletes the specified questions from the question bank. +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Format: `delete INDEX [MORE_INDICES]`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Delete the question(s) at the specified `INDEX`s."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* The index refers to the index number shown in the displayed question list."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Deletes the 2nd question in the question bank list."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `find Greenfield` +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`delete 1 3 5` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Deletes the 1st, 3rd and 5th question in the question bank list."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//tag::junxian-list[]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Listing all questions : `list`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Shows a list of all questions in the test back. If appended with a category and/or difficulty, `list` will show all questions"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "matching the chosen category and/or difficulty."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Format: `list [cat/CATEGORY] [diff/DIFFICULTY]`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "If no category or difficulty is stated (i.e. `list`), program will list the entire question bank."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `list cat/requirements`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* `list cat/requirements diff/2`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//end::junxian-list[]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//tag::junxian-find[]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Locating questions: `find`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Finds questions whose descriptions contain any of the given keywords. +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "****"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* The search is case insensitive. e.g `brownfield` will match `Brownfield`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* The order of the keywords does not matter. e.g. `green field` will match `field green`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* Only the question name is searched."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Only full words will be matched e.g. `Requirement` will not match `Requirements`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Descriptions matching at least one keyword will be returned (i.e. `OR` search). e.g. `User story` will return `User Survery`, `User Input`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "****"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `find User` +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Returns `How do you gather user requirements?` and `What is the recommended user story format?`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `find User, Brownfield, Greenfield` +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Returns any question containing descriptions `User`, `Brownfield`, or `Greenfield`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//end::junxian-find[]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Clears all questions from the question bank. +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//tag::shaun-restore[]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Restoring all entries : `restore`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Clears all current questions from the question bank and restores the default questions that were in the original app. +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Users will be prompted if they really want to restore their current question bank as the command is non-reversible."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Format: `restore`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//end::shaun-restore[]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Question bank data are saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d Exiting the application: `exit`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "neoshh"
        },
        "content": "Exits the application. +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "neoshh"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "//tag::khiangleon[]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "//tag::khiangleon-history[]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003d\u003d\u003d More data analytics `[coming in v2.0]`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003d\u003d\u003d\u003d More statistics `stats`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "Users will be able to view average scores across all attempts of quizzes."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "They will also be able to view statistics not just for difficulty levels, but also for individual categories."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "This will help them to prioritise and know exactly which type of questions they are weaker at."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "This feature will also indicate to users further that overall across all quiz attempts which type of questions"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "needs to be prioritised. In addition, with all these in mind, users can then make use of the custom quiz mode in"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "`section 4.3` to get more practise on specific types of questions."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003d\u003d\u003d\u003d Graphs `history`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "Currently, as of `v1.4`, this command only shows a raw full history of scores and their breakdown"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "by difficulty levels for all past quiz attempts. The number of quizzes attempted by the user in total is also shown"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "in the results display. By `v2.0`, users will be able to view line graphs of their history of quiz attempts\u0027 results"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "by categories and difficulty levels. This will show them how much they are progressing in their quiz results for"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "each different type of questions."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "//end::khiangleon-history[]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "// tag::import/export[]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d Importing / Exporting question banks `[coming in v2.0]`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "User can export can import json files containing the question bank into the application."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "// end::import/export[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//tag::wilfred-quiz[]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d Quiz Mode"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//tag::junxian-timer[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "For all quiz modes, the current question will be skipped when the timer reaches zero. The question will be marked as wrong,"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "and the next question will be shown with the updated timer."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//end::junxian-timer[]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Normal Mode"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Levels are separated by difficulty. At the end of each level, user has the choice to move on to the next level or exit the quiz."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The user is given 30 seconds to answer each question."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image::normal-mode.png[]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Arcade Mode"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Levels are separated by difficulty. If the user enters a wrong answer before finishing the quiz. The quiz will end and display the results."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The user is given 30 seconds to answer each question in level 1. Subsequent level timers are 5 seconds faster than the previous level with"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "level 3 giving the user 20 seconds to answer each question."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image::arcade-mode.png[]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//tag::junxian-custom-mode[]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Custom Mode"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Category, Difficulty and Timer (must be above 1 second) can be customised by the user. Decimal values will be truncated, i.e."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "`start mode/custom timer/5.34` will start the quiz with a time limit of 5 seconds for each question."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Levels are also sorted according to"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "difficulty. The prefixes are optional, and if no prefixes are provided, custom mode will begin a quiz with normal mode settings."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//end::junxian-custom-mode[]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Answering Questions"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|MCQ |TrueFalse |SAQ"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|Answers can only be A, B, C, or D (Case insensitive) |Answers can only be True (T) / False (F) (Case insensitive)|Answers are open ended. Revision tool uses NLP to parse answers and determine whether they are correct."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//end::wilfred-quiz[]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Exiting the quiz"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "User can end the quiz and go back into Configuration Mode (see \u003c\u003cConfigurationMode\u003e\u003e) to perform commands such as `add`, `list`, and `stats`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//tag::junxian-proposed-features[]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d Mark question as starred during quiz `[coming in v2.0]`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "User will be able to star questions during the quiz by entering `star` for the current question they are on. The question will be updated as \"starred\", so that the user will remember that they"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "had problems with that particular question during the quiz."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d Enter short code during quiz sessions`[coming in v2.0]`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "User will be able to type in code during the quiz, and the app will provide a syntax checker which will not allow the user to submit his code if there are syntax errors."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//end::junxian-proposed-features[]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d Pictures/Diagrams `[coming in v2.0]`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "neoshh"
        },
        "content": "User will be able to upload pictures and diagrams as part of the questions when adding questions to the test bank."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "data of your previous question bank folder."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*Q*: Why am I not able to click on the options to select the answers for MCQs and T/F questions? +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*A*: The options are there as a way to show the users the options available. As this is a CLI application, the main"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "neoshh"
        },
        "content": "input will be through keyboard inputs."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*Q*: Can I use this application for another module? +"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*A*: Yes you can. This application is designed to store any types of MCQs, T/F and SAQs."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*Q*: I want to challenge my friends using this application, how can I do it? +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*A*: There is no online support for the application right now. One way you can chanllenge your friend is to prepare the"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "neoshh"
        },
        "content": "same json files and load it up to your individual computers and do the quiz together."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//tag::wilfred-summary[]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Start* `start mode/MODE` +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "e.g. `start mode/normal`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Exit* `exit`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "* *Stats* : `stats`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Add* `add type/TYPE q/QUESTION cat/CATEGORY diff/DIFFICULTY y/CORRECT_ANSWER x/WRONG_ANSWER...` +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "e.g. `add type/mcq q/According to the textbook, which kind of project is more difficult? cat/Week 2 diff/1"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "x/Greenfield x/Brownfield y/None of the others of the above x/Padifield`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Edit* : `edit INDEX [q/QUESTION] [cat/CATEGORY] [diff/DIFFICULTY] [x/WRONG_ANSWER]... [y/CORRECT_ANSWER]...` +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "e.g. `edit 1 q/According the the textbook, is greenfield or brownfield tougher?`"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Delete* : `delete INDEX [MORE_INDICES]` +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "e.g. `delete 1 3 5`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *List* : `list [cat/CATEGORY] [diff/DIFFICULTY]`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "e.g. `list cat/requiments diff/2`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "e.g. `find user story`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Restore* : `restore`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//end::wilfred-summary[]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "//end::wilfred[]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//tag::shaun-AcTip[]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*AutoComplete*: Suggested commands will be shown as you type. Navigate through the dropdown list using the up and down"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "arrow keys and hit kbd:[Enter] to complete the command."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//end::shaun-AcTip[]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//end::shaun[]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "//tag::khiangleon-StatsTip[]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "*Stats/History*: Hitting kbd:[Enter] again after executing a `stats` or `history` command will return you"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "back to configuration mode displaying the question bank."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "//end::khiangleon-StatsTip[]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "//end::khiangleon[]"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 165,
      "neoshh": 41,
      "jxofficial": 32,
      "khiangleon": 56,
      "-": 110,
      "ShaunNgTX": 43
    }
  },
  {
    "path": "docs/UsingAppVeyor.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AppVeyor"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "https://www.appveyor.com/[AppVeyor] is a _Continuous Integration_ platform for GitHub projects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "It runs its builds on Windows virtual machines."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "AppVeyor can run the project\u0027s tests automatically whenever new code is pushed to the repo."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "This ensures that existing functionality and features have not been broken on Windows by the changes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "The current AppVeyor setup runs `gradlew.bat test` whenever someone pushes code to the repo."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to customize your AppVeyor build further, you can learn more about AppVeyor from the https://www.appveyor.com/docs/[AppVeyor Documentation]."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up AppVeyor"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Fork the repo to your own organization."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Go to https://ci.appveyor.com/, and under `Login`, click on `GitHub` to login with your GitHub account."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Enter your GitHub account details if needed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/login.png[Click on GitHub in the login page]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". After logging in, you will be brought to your projects dashboard."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Click on `NEW PROJECT`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/add-project-1.png[Click on \"NEW PROJECT\" in the projects dashboard]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". You will be brought to the `Select repository` page."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Select `GitHub`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* On your first usage of AppVeyor, you will need to give AppVeyor authorization to your GitHub account."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Click on `Authorize GitHub`."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/add-project-2.png[Click on Authorize GitHub]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* This will bring you to a GitHub page that manages the access of third-party applications to your repositories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Depending on whether you are the owner of the repository, you can either grant access:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Or request access:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". AppVeyor will then list the repositories you have access to in your GitHub account."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Find the repository you want to set AppVeyor up on, and then click `ADD`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/add-project-3.png[Click \"Add\" on the repository you want to set AppVeyor up on]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". AppVeyor will then be activated on that repository."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "To see the CI in action, push a commit to any branch!"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Go to the repository and see the pushed commit."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "There should be an icon which will link you to the AppVeyor build:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/ci-pending.png[Commit build]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* As the build is run on a remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/ci-log.png[AppVeyor build]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Update the link to the \"build status\" badge at the top of `README.adoc` to point to the AppVeyor build status of your own repo."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* To find your build status badge URL, first go to your project settings by clicking on the \"Settings\" icon:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/project-settings-1.png[Click on project settings]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "* Then go to the `Badges` section of your project settings by clicking on it:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/project-settings-2.png[Click on \"Badges\"]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* As AppVeyor does not provide asciidoc code for the badge, we will have to create our own."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Start by copying the markdown code provided:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/project-settings-3.png[Copy the markdown code]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "The markdown code should be in this format:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[![Build status](\u003clink to image\u003e)](\u003clink to project\u003e)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Convert it to the asciidoc format as follows:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003clink to project\u003e[image:\u003clink to image\u003e[Build status]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "The asciidoc code should look similar to:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level3[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Copy and paste the asciidoc code to your `README.adoc` file."
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 23,
      "-": 80
    }
  },
  {
    "path": "docs/UsingCheckstyle.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Ensure that the `Checkstyle version` is set to `8.1`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-scan-scope.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Click the plus sign under `Configuration File`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter an arbitrary description e.g. addressbook"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Use a local Checkstyle file`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Next` \u003e `Finish`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Mark `Active` for the newly imported check configuration"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-configuration.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 46
    }
  },
  {
    "path": "docs/UsingCoveralls.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Coveralls"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/[Coveralls] is a web service that tracks code coverage over time for GitHub projects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Coveralls requires Travis CI to be set up beforehand as Travis sends the coverage report from the latest build to Coveralls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "If you have not set up Travis CI, see \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Currently, Coveralls supports Travis CI but not AppVeyor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Coveralls"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Go to https://coveralls.io/ and click `SIGN IN`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Then click `GITHUB SIGN IN` and enter your GitHub account details if needed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". After logging in, you will be brought to the `Your Repositories` page."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "On the site\u0027s navigation bar, click https://coveralls.io/repos/new[ADD REPOS]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Find the switch for the forked repository."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* If the organization is not shown, click `GITHUB SETTINGS` as shown below:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/github_settings.png[GitHub settings]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "to Coveralls so that it can access your repository."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* If your repository cannot be found, click `SYNC REPOS`."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/sync_repos.png[Sync repos]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Activate the switch."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Update the link of the `Coverage Status` badge at the top of your \u003c\u003cREADME#, README.adoc\u003e\u003e to point to that of your own repo by replacing the outlined areas with `your-org-name/your-repo-name`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/coverage_asciidoc_code.png[Coverage Status Badge]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". You can now see the coverage report for your project after each Travis build by clicking on the `Coverage Status` badge."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/coverage_report.png[Coverage Report Summary]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Disabling Coveralls Automatic Comments on Pull Requests"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Coveralls automatically comments on the coverage status of the pull requests in GitHub."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "If it\u0027s a hindrance, you can disable it in the settings of your project in Coveralls:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Click `Settings`."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Uncheck the `LEAVE COMMENTS?` checkbox."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Then click `SAVE CHANGES`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image:coveralls/disable_comments.png[Disable comments,width \u003d 942]"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 18,
      "-": 51
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "It can automate build-related tasks such as"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Gradle commands look like this:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean test`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean test`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `test` `coverage`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "If Gradle determines that the output of the task will be same as the previous time, it will not run the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "If we want to force Gradle to run a task, we can combine that task with `clean`."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Creates the `addressbook.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`** +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew test` -- Runs all tests"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean test` -- Cleans the project and runs tests"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 18,
      "-": 92
    }
  },
  {
    "path": "docs/UsingNetlify.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Netlify"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "https://www.netlify.com/[Netlify] is an automated hosting platform for deploying static websites."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "With the aid of build tools such as Gradle, Netlify provides a smoother experience for previewing documentation."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "This can be done by using Netlify\u0027s https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/[Deploy Previews] feature, which shows a preview of the updated documentation whenever a pull request is made."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Netlify"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork the repository to your own organization."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Go to https://www.netlify.com/ and click `Sign Up`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Next, click `GITHUB SIGN IN`, enter your GitHub account details and authorize netlify."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ". After logging in, click `New site from Git`."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". You will then be brought to the setup page."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Click `GitHub` to link your repository to Netlify."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Depending on whether you are the owner of the repository, you can either grant or request access to Netlify so that it can access your repository and build your documentation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image:netlify/grant_or_request_access.png[Grant or request access,width \u003d 630]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* After granting or requesting access to your repository, click `Authorize netlify`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Pick your repository from the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ". Fill out the details as follows and then click `Deploy site`."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Branch to deploy: select `master` branch"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Build command: `./gradlew asciidoctor`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "The build command is the command that builds the documentation into HTML format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* Publish directory: `build/docs/html5`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "The publish directory is the directory in which the built HTML documentation resides."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Once Netlify has completed building your project, you can now:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* View your main branch\u0027s deployed documentation on the site name given by Netlify (customizable as shown \u003c\u003cChanging the site name of your project, below\u003e\u003e)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image:netlify/temp_site_name.png[Temporary site name,width \u003d 630]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Preview the updated documentation whenever a pull request is made by clicking the `Details` hyperlink next to the Netlify test status."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image:netlify/netlify_details.png[Netlify details link,width \u003d 630]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Changing the site name of your project"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "If you don\u0027t like the site name given by Netlify, you can change it as follows:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on `Settings`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Then click `Change site name` and fill in your desired site name."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image:netlify/change_site_name.png[Change site name,width \u003d 630]"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 13,
      "-": 52
    }
  },
  {
    "path": "docs/UsingPlantUml.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using PlantUML"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images/plantuml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction to PlantUML"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "PlantUML is a tool used in this project to create UML diagrams."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "For more information about the basics of PlantUML, head over to http://plantuml.com/[its official website]."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Set up PlantUML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Installing Graphviz"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Graphviz is a dependency that PlantUML requires to generate more advanced diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Head over to the https://www.graphviz.org/download/[downloads page] on the official Graphviz website and follow instructions to install Graphviz."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Installing the `PlantUML integration` plugin for IntelliJ IDEA"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Go to `Settings` \u003e `Plugins` \u003e `Marketplace` and install the plugin `PlantUML integration`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Then go to `Settings` \u003e `Other Settings` \u003e `PlantUML` or search for PlantUML."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Configure the path to the `dot` executable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This executable can be found in the `/bin` directory where you installed GraphViz."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".Settings - Other Settings - PlantUML: input the path to your dot executable"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image::ConfiguringGraphviz.png[]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create/Edit PlantUML diagrams"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "After installing the `PlantUML integration` plugin, simply create or open any `.puml` file to start editing it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".Editing `DeleteSequenceDiagram.puml`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::EditingDeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Any changes you make in editor pane on the left will be reflected in the preview pane on the right."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "However, do take note that these changes _will not_ be reflected in the developers guide until you export the diagram."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "//TODO: Discussion about why we\u0027re not using asciidoctor-diagram"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Export PlantUML diagrams"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "The `PlantUML integration` plugin allows you to export individual diagrams to a location of your choosing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Click the `Save Current Diagram Only` button and choose the location to export the image file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: You will have to `git add` any new diagrams generated!"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Common tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Applying consistent formatting to PlantUML diagrams"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "It is highly recommended to consistently color your UML diagrams as an visual aid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "You can achieve this by creating a dictionary of colors and import it like CSS."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you can create a `Style.puml` with the contents:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".Style.puml"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "[source]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #7777DB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #5252CE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Then you can use it in another PlantUML file like this:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".UndoSequenceDiagram.puml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "!include Style.puml"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "You can fine-tune the formatting of PlantUML diagrams with the `skinparam` command."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "For example, `skinparam backgroundColor transparent` turns the background of the diagram transparent."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "For a comprehensive list of ``skinparam``s head over to the https://plantuml-documentation.readthedocs.io/en/latest/[unofficial PlantUML skinparam documentation]."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "***"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Repositioning elements in PlantUML diagrams"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "While PlantUML\u0027s automatic layout engine usually produces satisfactory results, at times the result can be less than ideal, especially on larger diagrams."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Here is an example where the default layout generated by PlantUML has a lot of overlapping lines that are hard to decipher:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".The UI class diagram without additional formatting"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::RawUiDiagram.png[]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: In most cases, you should consider decomposing the diagram into smaller ones or focusing on a more specific portion of the diagram."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some of the techniques we used in this project to obtain a more palatable diagram."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Link lengths"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "By default, a short link (`\\-\u003e`) points to right and a long link (`-\\-\u003e`) points downwards. you can extend any link to make it longer (```--\\-\u003e```)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Length of arrows and its effects"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArrowLength.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Link directions"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Clever usage of arrow directions will resolve most layout issues."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the table below shows how the way in which you specify arrows can results in drastically different layouts for the same diagram."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Link directions"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"40a,60a\"]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "|Source |Result"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e Z"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e Z"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e Z"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e Z"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e 1"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e 2"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e 3"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e 4"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "|image::AllDown.png[]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027default is down"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e Z"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027specify down"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "B -down-\u003e Z"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027shorthand for down"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "C -d-\u003e Z"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027arrow lengths take priority"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "D -down\u003e Z"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "A -up-\u003e 1"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "B -up-\u003e 2"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "C -up-\u003e 3"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "D -up-\u003e 4"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "|image::UpAndDown.png[]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "A -up-\u003e Z"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "B -up-\u003e Z"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "C -up-\u003e Z"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "D -up-\u003e Z"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e 1"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e 2"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e 3"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e 4"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Force A B C D"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "A -right[hidden]- B"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "B -right[hidden]- C"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "C -right[hidden]- D"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "|image::HiddenArrows.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Reordering definitions"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "As a general rule of thumb, the layout engine will attempt to order objects in the order in which they are defined."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "If there is no formal definition, the objects is taken to be declared upon its first usage."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".Definition ordering and outcomes"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"70a,30a\"]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "|Source |Result"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e B"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e D"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "|image::ABeforeC.png[]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Class C is defined before A"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Class C"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e B"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e D"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "|image::CBeforeA.png[]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "package \"Rule Of Thumb\"{"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    Class C"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    A --\u003e B"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    C --\u003e D"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "|image::PackagesAndConsistency.png[]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Explicitly define all symbols to avoid any potential layout mishaps."
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4,
      "-": 209
    }
  },
  {
    "path": "docs/UsingTravis.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Travis CI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/[Travis CI] is a _Continuous Integration_ platform for GitHub projects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Travis CI can run the projects\u0027 tests automatically whenever new code is pushed to the repo."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "This ensures that existing functionality and features have not been broken by the changes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The current Travis CI set up performs the following things whenever someone push code to the repo:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs the `./gradlew clean test coverage coveralls -i` command (see \u003c\u003cUsingGradle#, UsingGradle\u003e\u003e for more details on what this command means)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* Renders documentation from asciidoc to html and automatically publishes them using GitHub Pages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs additional link:#repository-wide-checks[repository-wide checks]."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to customise your travis build further, you can learn more about Travis from https://docs.travis-ci.com/[Travis CI Documentation]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Travis CI"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Fork the repo to your own organization."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Go to https://travis-ci.org/ and click `Sign in with GitHub`, then enter your GitHub account details if needed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image:signing_in.png[Signing into Travis CI]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* If the organization is not shown, click `Review and add` as shown below:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "image:review_and_add.png[Review and add]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "to Travis CI so that it can access your commits and build your code."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* If repository cannot be found, click `Sync account`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Activate the switch."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". This repo comes with a link:../.travis.yml[`.travis.yml`] that tells Travis what to do."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "So there is no need for you to create one yourself."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". To see the CI in action, push a commit to the master branch!"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Go to the repository and see the pushed commit."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "There should be an icon which will link you to the Travis build."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "image:build_pending.png[Commit build]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* As the build is run on a provided remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_build.png[Travis build]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". If the build is successful, you should be able to check the coverage details of the tests at http://coveralls.io/[Coveralls]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Update the link to the \u0027build status\u0027 badge at the top of the `README.adoc` to point to the build status of your own repo."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enabling auto-publishing of documentation"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Ensure that you have followed the steps above to set up Travis CI."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". On GitHub, create a new user account and give this account collaborator and admin access to the repo. +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   Using this account, generate a personal access token https://github.com/settings/tokens/new[here]."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Personal access tokens are like passwords so make sure you keep them secret!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "If the personal access token is leaked, please delete it and generate a new one."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "We use a new user account to generate the token for team projects to prevent team members from gaining access to other team members\u0027 repos. +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "If you are the only one with write access to the repo, you can use your own account to generate the token."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a description for the token. (e.g. `Travis CI - deploy docs to gh-pages`)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* Check the `public_repo` checkbox."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* Click `Generate Token` and copy your new personal access token."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "We will use this token to grant Travis access to the repo."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "image:generate_token.png[Generate token]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Click on the settings button next to the switch."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "In the Environment Variables section, add a new environment variable with"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* name: `GITHUB_TOKEN`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* value: personal access token copied in step 1"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* Display value in build log: `OFF`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_add_token.png[Travis add token]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "*Make sure you set `Display value in build log` to `OFF`.* +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Otherwise, other people will be able to see the personal access token and thus have access this repo. +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, make sure you *do not print `$GITHUB_TOKEN` to the logs* in Travis scripts as the logs are viewable by the public."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Now, whenever there\u0027s a new commit to master branch, Travis will push the latest documentation to gh-pages branch."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "**To verify that it works,**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Trigger Travis to regenerate documentation."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "To do so, you need to push a new commit to the master branch of the fork. +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "   Suggested change: Remove the codacy badge from `README`."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Wait for Travis CI to finish running the build on your new commit."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Go to the URL `\\https://\u003cyour-username-or-organization-name\u003e.github.io/addressbook-level3/`."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "You should see your `README` file displayed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Repository-wide checks"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "In addition to running Gradle checks, we also configure Travis CI to run some repository-wide checks."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover _all_ files in the repository."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[source,shell]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "./config/travis/run-checks.sh"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Implementing new checks"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Checks are implemented as executable `check-*` scripts within the `config/travis/` directory."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The `run-checks.sh` script will automatically pick up and run files named as such."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts should print out errors in the following format:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "SEVERITY:FILENAME:LINE: MESSAGE"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "where `SEVERITY` is either `ERROR` or `WARN`, `FILENAME` is the path to the file relative to the current directory, `LINE` is the line of the file where the error occurred and `MESSAGE` is the message explaining the error."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts must exit with a non-zero exit code if any errors occur."
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 37,
      "-": 117
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "box Logic LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "participant \":RevisionToolParser\" as RevisionToolParser LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "participant \"builder:CommandResultBuilder\" as CommandResultBuilder LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "participant \"commandResult:CommandResult\" as CommandResult LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "LogicManager -\u003e RevisionToolParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "activate RevisionToolParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "RevisionToolParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "DeleteCommandParser --\u003e RevisionToolParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "RevisionToolParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "DeleteCommandParser --\u003e RevisionToolParser : d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e RevisionToolParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "RevisionToolParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "deactivate RevisionToolParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute(model)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e Model : deletePerson(1)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "create CommandResultBuilder"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "DeleteCommand -\u003e CommandResultBuilder : CommandResultBuilder()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "activate CommandResultBuilder"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "deactivate CommandResultBuilder"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "CommandResultBuilder -\u003e CommandResultBuilder : withFeedback(deleteMessage)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "CommandResultBuilder -\u003e CommandResultBuilder : build()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "activate CommandResultBuilder"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "CommandResultBuilder -\u003e CommandResult : CommandResult(builder)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "CommandResult--\u003e CommandResultBuilder : commandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "deactivate CommandResultBuilder"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "CommandResultBuilder --\u003e DeleteCommand : commandResult"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "deactivate CommandResultBuilder"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "DeleteCommand --\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[\u003c--LogicManager : commandResult"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 35,
      "-": 50
    }
  },
  {
    "path": "docs/diagrams/EditQuestionAsStarredSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "box Edit Question as Starred LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "participant \":StartQuizWindow\" as StartQuizWindow LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "participant \":ParserManager\" as ParserManager LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "participant \":EditCommand\" as EditCommand LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "[-\u003e StartQuizWindow: updateStarredAnswerable(currentAnswerable)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "activate StartQuizWindow"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "StartQuizWindow -\u003e StartQuizWindow : produceCommandSyntax(currentAnswerable)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "activate StartQuizWindow"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "StartQuizWindow --\u003e StartQuizWindow : editStarredQuestionSyntax"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "deactivate StartQuizWindow"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "StartQuizWindow -\u003e LogicManager : execute(editStarredQuestionSyntax)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "activate ParserManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "LogicManager -\u003e ParserManager : parseCommand(editStarredQuestionSyntax)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "ref over LogicManager, ParserManager : parseCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "ParserManager --\u003e LogicManager : editCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "LogicManager -\u003e EditCommand : execute(model)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "activate EditCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "ref over EditCommand, CommandResult : CommandBuilder builds CommandResult"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "CommandResult --\u003e EditCommand : commandResult"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "EditCommand --\u003e ParserManager : commandResult"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "deactivate EditCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "ParserManager --\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "deactivate ParserManager"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "LogicManager --\u003e StartQuizWindow : commandResult"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "[\u003c--StartQuizWindow: commandResult"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "deactivate StartQuizWindow"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 52
    }
  },
  {
    "path": "docs/diagrams/ParserClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T3"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR_T3"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Interface QuizParser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Class ParserManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Class ABCParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Class XYZParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "note bottom of ABCParser : parses commands\\nwhich are used\\nin Configuration\\nMode."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "note bottom of XYZParser : parses commands\\nwhich are used\\nin Quiz Mode."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "ABCParser .up.|\u003e Parser"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "XYZParser .up.|\u003e QuizParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "ParserManager -left-\u003e ABCParser : creates \u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "ParserManager -right-\u003e XYZParser : creates \u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 22
    }
  },
  {
    "path": "docs/diagrams/QuizSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "box Logic LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "participant \":QuizCommandParser\" as QuizCommandParser LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "participant \":McqInputCommandParser\" as McqInputCommandParser LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "participant \"m:McqInputCommand\" as McqInputCommand LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "participant \":Answerable\" as Answerable LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "participant \"builder:CommandResultBuilder\" as CommandResultBuilder LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "participant \"commandResult:CommandResult\" as CommandResult LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[-\u003e LogicManager : execute(\"c\", answerable)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "LogicManager -\u003e QuizCommandParser : parseCommand(\"c\", answerable)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "activate QuizCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "create McqInputCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "QuizCommandParser -\u003e McqInputCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "activate McqInputCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "McqInputCommandParser --\u003e QuizCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "deactivate McqInputCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "QuizCommandParser -\u003e McqInputCommandParser : parse(\"c\", answerable)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "activate McqInputCommandParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "create McqInputCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "McqInputCommandParser -\u003e McqInputCommand : McqInputCommand(\"c\", answerable)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "activate McqInputCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "McqInputCommand --\u003e McqInputCommandParser : m"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "deactivate McqInputCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "McqInputCommandParser --\u003e QuizCommandParser : m"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "deactivate McqInputCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "McqInputCommandParser -[hidden]-\u003e QuizCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "destroy McqInputCommandParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "QuizCommandParser --\u003e LogicManager : m"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "deactivate QuizCommandParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "LogicManager -\u003e McqInputCommand : execute(model)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "activate McqInputCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "McqInputCommand -\u003e Answerable : isCorrect(answer)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "activate Answerable"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Answerable --\u003e McqInputCommand : result"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "deactivate Answerable"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "create CommandResultBuilder"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "McqInputCommand -\u003e CommandResultBuilder : CommandResultBuilder()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "activate CommandResultBuilder"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "deactivate CommandResultBuilder"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "CommandResultBuilder -\u003e CommandResultBuilder : withCorrect(result)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "CommandResultBuilder -\u003e CommandResultBuilder : build()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "activate CommandResultBuilder"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "CommandResultBuilder -\u003e CommandResult : CommandResult(builder)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "CommandResult --\u003e CommandResultBuilder : commandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "deactivate CommandResultBuilder"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "CommandResultBuilder --\u003e McqInputCommand : commandResult"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "deactivate CommandResultBuilder"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "McqInputCommand --\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "deactivate McqInputCommand"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "ref over LogicManager, Model : updateStatistics(answerable)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[\u003c--LogicManager: commandResult"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 87,
      "khiangleon": 1
    }
  },
  {
    "path": "docs/diagrams/SaqIsCorrectSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neoshh"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neoshh"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neoshh"
        },
        "content": "box SaqAnswerCheckerSequenceDiagram LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neoshh"
        },
        "content": "participant \":Saq\" as Saq LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neoshh"
        },
        "content": "participant \":AnswerChecker\" as AnswerChecker LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neoshh"
        },
        "content": "participant \":Pipeline\" as Pipeline LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neoshh"
        },
        "content": "participant \":StanfordCoreNLP\" as StanfordCoreNLP LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neoshh"
        },
        "content": "participant \":FuzzyWuzzy\" as FuzzyWuzzy LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neoshh"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neoshh"
        },
        "content": "[-\u003e Saq : isCorrect(userInput)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neoshh"
        },
        "content": "activate Saq"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neoshh"
        },
        "content": "Saq -\u003e AnswerChecker : check(userInput, answerable)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neoshh"
        },
        "content": "activate AnswerChecker"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neoshh"
        },
        "content": "AnswerChecker -\u003e AnswerChecker : processQuestion(answerable.question.question)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neoshh"
        },
        "content": "AnswerChecker -\u003e AnswerChecker : processString(userInput)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neoshh"
        },
        "content": "opt userInput.isBlank()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    AnswerChecker --\u003e Saq : false"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    end"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neoshh"
        },
        "content": "loop Answer answer : CorrectAnswerList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    AnswerChecker -\u003e AnswerChecker : processString(answer.getAnswer())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    AnswerChecker -\u003e AnswerChecker : hasSameSentiment(userInput, correctAnswer)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    activate AnswerChecker"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    AnswerChecker -\u003e Pipeline : getPipeline()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    activate Pipeline"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    Pipeline --\u003e AnswerChecker"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    deactivate Pipeline"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    AnswerChecker -\u003e StanfordCoreNLP : annotate(userInput)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    AnswerChecker -\u003e StanfordCoreNLP : annotate(CorrectAnswer)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    AnswerChecker -\u003e StanfordCoreNLP : userInput.sentiment()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    activate StanfordCoreNLP"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    StanfordCoreNLP --\u003e AnswerChecker : sentimentValueOfUserInput"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    deactivate StanfordCoreNLP"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    AnswerChecker -\u003e StanfordCoreNLP : correctAnswer.sentiment()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    activate StanfordCoreNLP"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    StanfordCoreNLP --\u003e AnswerChecker : sentimentValueOfCorrectAnswer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    deactivate StanfordCoreNLP"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    AnswerChecker --\u003e AnswerChecker : sentimentValueOfUserInput.equals(sentimentValueOfCorrectAnswer)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    deactivate AnswerChecker"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    AnswerChecker -\u003e AnswerChecker : isMatched(userInput, correctAnswer)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    activate AnswerChecker"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    AnswerChecker -\u003e FuzzyWuzzy : FuzzySearch.weightedRatio(userInput, correctAnswer)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    activate FuzzyWuzzy"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    FuzzyWuzzy --\u003e AnswerChecker : matchedPercentage"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    deactivate FuzzyWuzzy"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    AnswerChecker --\u003e AnswerChecker : matchedPercentage \u003e matchedPercentageThreshold"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    deactivate AnswerChecker"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    opt hasSameSentiment \u003d\u003d true \u0026\u0026 isMatched \u003d\u003d true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        AnswerChecker --\u003e Saq : true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        end"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    AnswerChecker --\u003e Saq : false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    end"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neoshh"
        },
        "content": "[\u003c-- Saq : result : boolean"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neoshh"
        },
        "content": "deactivate Saq"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neoshh"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "neoshh": 59
    }
  },
  {
    "path": "docs/diagrams/StarQuestionInputSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "box Mark Question In Quiz LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "participant \":QuizCommandParser\" as QuizCommandParser LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "participant \":StarQuestionCommandParser\" as StarQuestionCommandParser LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "participant \"starredQuestion:StarQuestionCommand\" as StarQuestionCommand LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "participant \":CommandResultBuilder\" as CommandResultBuilder LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "[-\u003e LogicManager : execute(\"star\", answerable)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "LogicManager -\u003e QuizCommandParser : parseCommand(\"star\", answerable)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "activate QuizCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "create StarQuestionCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "QuizCommandParser -\u003e StarQuestionCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "activate StarQuestionCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "StarQuestionCommandParser --\u003e QuizCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "deactivate StarQuestionCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "QuizCommandParser -\u003e StarQuestionCommandParser : parse(\"star\", answerable)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "activate StarQuestionCommandParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "create StarQuestionCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "StarQuestionCommandParser -\u003e StarQuestionCommand : StarQuestionCommand(\"star\", answerable)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "activate StarQuestionCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "StarQuestionCommand --\u003e StarQuestionCommandParser : starredQuestion"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "deactivate StarQuestionCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "StarQuestionCommandParser --\u003e QuizCommandParser : starredQuestion"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "deactivate StarQuestionCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "StarQuestionInputCommandParser -[hidden]-\u003e QuizCommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "destroy McqInputCommandParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "QuizCommandParser --\u003e LogicManager : starredQuestion"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "deactivate QuizCommandParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "LogicManager -\u003e StarQuestionCommand : execute(model)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "activate StarQuestionCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "create CommandResultBuilder"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "StarQuestionCommand -\u003e CommandResultBuilder : CommandResultBuilder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "activate CommandResultBuilder"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "deactivate CommandResultBuilder"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "CommandResultBuilder -\u003e CommandResultBuilder : withFeedback(result)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "CommandResultBuilder -\u003e CommandResultBuilder : build()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "activate CommandResultBuilder"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "CommandResultBuilder -\u003e CommandResult : CommandResult(builder)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "CommandResult --\u003e CommandResultBuilder : commandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "deactivate CommandResultBuilder"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "CommandResultBuilder --\u003e StarQuestionCommand : commandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "deactivate CommandResultBuilder"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "StarQuestionCommand --\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "deactivate StarQuestionCommand"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "ref over LogicManager, Model : edit question as starred"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "[\u003c--LogicManager: commandResult"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 84
    }
  },
  {
    "path": "docs/diagrams/StatsSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "box Logic LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "participant \":RevisionToolParser\" as RevisionToolParser LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "participant \":StatsCommand\" as StatsCommand LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "participant \"builder:CommandResultBuilder\" as CommandResultBuilder LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "participant \"commandResult:CommandResult\" as CommandResult LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "box Ui MODEL_COLOR_T3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "participant \":MainWindow\" as Ui MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "end box"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "[-\u003e LogicManager : execute(\"stats\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "LogicManager -\u003e RevisionToolParser : parseCommand(\"stats\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "activate RevisionToolParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "create StatsCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "RevisionToolParser -\u003e StatsCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "activate StatsCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "StatsCommand --\u003e RevisionToolParser : d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "deactivate StatsCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "RevisionToolParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "deactivate RevisionToolParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "LogicManager -\u003e StatsCommand : execute(model)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "activate StatsCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "StatsCommand -\u003e Model : getStatisticsList()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "Model --\u003e StatsCommand : statisticsList"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "create CommandResultBuilder"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "StatsCommand -\u003e CommandResultBuilder : CommandResultBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "activate CommandResultBuilder"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "deactivate CommandResultBuilder"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "CommandResultBuilder -\u003e CommandResultBuilder : withFeedback(statsMessage)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "CommandResultBuilder -\u003e CommandResultBuilder : withStats(true)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "CommandResultBuilder -\u003e Ui : handleStats()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "activate Ui"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "Ui --\u003e CommandResultBuilder"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "deactivate Ui"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "CommandResultBuilder -\u003e CommandResultBuilder : build()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "activate CommandResultBuilder"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "CommandResultBuilder -\u003e CommandResult : CommandResult(builder)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "CommandResult-\u003e CommandResultBuilder : commandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "deactivate CommandResultBuilder"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "CommandResultBuilder --\u003e StatsCommand : commandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "deactivate CommandResultBuilder"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "StatsCommand --\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "deactivate StatsCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "[\u003c--LogicManager : commandResult"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 80
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "Interface HistoryStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "Interface RevisionToolStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "Class JsonHistoryStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "Class JsonRevisionToolStorage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "StorageManager .up.|\u003e Storage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "StorageManager o-left-\u003e HistoryStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "StorageManager o-down-\u003e RevisionToolStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "JsonHistoryStorage .right.|\u003e HistoryStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "JsonRevisionToolStorage .up.|\u003e RevisionToolStorage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "JsonRevisionToolStorage .down.\u003e JsonSerializableRevisionTool"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "JsonSerializableRevisionTool .right.\u003e JsonAdaptedAnswerable"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "JsonHistoryStorage .down.\u003e JsonSerializableHistory"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "JsonSerializableHistory .down.\u003e JsonAdaptedStatistics"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 13,
      "-": 16
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T3"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR_T3"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Class \"{abstract}\\nParentWindow\" as ParentWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonListPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonCard"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "ParentWindow --\u003e MainWindow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e PersonListPanel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -down-\u003e PersonCard"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "PersonCard --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "PersonCard ..\u003e Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "UiManager --\u003e Logic"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "ParentWindow -right-\u003e Logic"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "MainWindow -right-\u003e Logic"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 8,
      "-": 56
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "!define LOGIC_COLOR #FF6464"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "!define LOGIC_COLOR_T1 #FF8264"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "!define LOGIC_COLOR_T2 #FFCDAB"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "!define LOGIC_COLOR_T3 #f16821"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "!define LOGIC_COLOR_T4 #cd4545"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "skinparam BoxPadding 0"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 6,
      "-": 68
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "ecp -\u003e ec ++: index, editAnswerableDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 20
    }
  },
  {
    "path": "docs/diagrams/updateHistorySequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "box Ui UI_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "participant \":StartQuizWindow\" as StartQuizWindow UI_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "end box"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "box Logic LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "participant \":ModelManager\" as ModelManager MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "participant \":History\" as History MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "[-\u003e StartQuizWindow : execute(commandText)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "activate StartQuizWindow"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "StartQuizWindow -\u003e StartQuizWindow : handleEnd(answerable)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "StartQuizWindow -\u003e LogicManager : updateHistory(statistics)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "LogicManager -\u003e ModelManager : addStatistics(statistics)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "activate ModelManager"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "ModelManager -\u003e History : addStatistics(statistics)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "activate History"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "History --\u003e ModelManager"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "deactivate History"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "ModelManager --\u003e LogicManager"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "deactivate ModelManager"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "LogicManager --\u003e StartQuizWindow"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "StartQuizWindow --\u003e["
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "deactivate StartQuizWindow"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 42
    }
  },
  {
    "path": "docs/team/johndoe.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d Neo Si Hao - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d PROJECT: Revision Tool"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neoshh"
        },
        "content": "Revision Tool (RT) is for those who *prefer to use a desktop app for storing test banks*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neoshh"
        },
        "content": "More importantly, RT is *optimized for those who prefer to work with a Command Line"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neoshh"
        },
        "content": "Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neoshh"
        },
        "content": "If you can type fast, RT can get your contact management tasks done faster than traditional"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neoshh"
        },
        "content": "GUI apps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neoshh"
        },
        "content": "* *Major enhancement*: added *short answer questions functionality to the application*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "neoshh": 8,
      "-": 68
    }
  },
  {
    "path": "docs/team/jxofficial.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d Keng Jun Xin - Project Portfolio for CS2103/T Revision Tool (RT)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ":contributedCodeUrl: https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003djxofficial"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ":ab3Url: https://github.com/nus-cs2103-AY1920S1/addressbook-level3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ":pullUrl: https://github.com/AY1920S1-CS2103-F10-3/main/pull"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "By: `Team F10-3`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "This portfolio contains a summary of the key contributions I made to the CS2103/T Revision Tool."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d The Team"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "The team members are:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* Sim Khiang Leon, a Year 4 Industrial \u0026 Systems Engineering student"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* Wilfred Bradley Tan, a Year 2 Computer Science / Business Student"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* Shaun Ng, a Year 4 Engineering Science Student"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* Neo Si Hao, a Year 4 Engineering Science Student"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* and myself, Keng Jun Xian, a Year 3 Communications and New Media student."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d About the Project"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "The CS2103/T Revision Tool (RT) was conceptualized as a desktop quiz application for CS2103/T students."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "It is a brownfield project that stemmed from the existing Address Book 3 (AB3) application, which can be found at:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "link:{ab3Url}/[Address Book - Level 3]. Some key features of the app include: Adding questions to the test bank,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "being able to start quizzes based on the questions, and being able to set a timer for quizzes."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ".UI of the Configuration Mode"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "image:Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ".UI of the Quiz Mode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "image:Ui2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "As the person in charge of the Model component, I worked closely with team lead Wilfred to handle the end to end implementation of"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "True/False and Multiple Choice questions based off Wilfred\u0027s proposed application structure. I also developed a Timer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "feature which is used throughout all quiz sessions. Building upon the timer, I further contributed to the different quiz modes, namely the Custom Mode Command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* *Major enhancement*: added *Custom Mode Command*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** *What it does*:  The user is able to filter quiz questions by category and/or difficulty. The user is also able to set a custom timer."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** *Justification*: Without this feature, the user would only be able to start quizzes based on all questions in the test bank, with a fixed time limit. The ability to customize the quiz settings is highly important and covers many use cases for the target user. For example, the student who wishes to practice under test conditions can set the appropriate time per question, and the advanced student who has mastered all the level 1 and level 2 questions can choose to attempt only level 3 questions."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** *Highlights*: This feature was built upon two other system-wide features, Timer and List Command. This required a deep understanding of the Model, in particular, how to access the Model through various predicates built upon the fields of the Answerable class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* *Minor enhancements*:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Implemented the List command that is used internally (in Custom Mode) and on the client-side to filter the list of test questions by category and/or difficulty."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Created the foundation Mcq, TrueFalse and Saq classes."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Implemented a timer that is used across all quiz modes. The timer is also able to skip to the next question when the countdown reaches zero."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Implemented the UI code for displaying MCQ options in the quiz window."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* *Code contributed*: You can view the code I contributed to this project link:{contributedCodeUtl}/[here, window\u003dblank]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "*** Managed release for v1.3 on GitHub."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "*** Wrote Model and QuizWindowParser related tests such as TrueFalseTest and McqInputCommandTest."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "*** Refactored EditCommand class to handle editing of different question types."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "*** Set up About Us page."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d Listing all questions : `list`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Shows a list of all questions in the test back. If appended with a category and/or difficulty, `list` will show all questions"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "matching the chosen category and/or difficulty."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Format: `list [cat/CATEGORY] [diff/DIFFICULTY]`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "If no category or difficulty is stated (i.e. `list`), program will list the entire question bank."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* `list cat/requirements`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* `list cat/requirements diff/2`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//end::junxian-list[]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//tag::junxian-find[]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d Locating questions: `find`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Finds questions whose descriptions contain any of the given keywords. +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "****"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* The search is case insensitive. e.g `brownfield` will match `Brownfield`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* The order of the keywords does not matter. e.g. `green field` will match `field green`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* Only the question name is searched."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* Only full words will be matched e.g. `Requirement` will not match `Requirements`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* Descriptions matching at least one keyword will be returned (i.e. `OR` search). e.g. `User story` will return `User Survery`, `User Input`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "****"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* `find User` +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Returns `How do you gather user requirements?` and `What is the recommended user story format?`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* `find User, Brownfield, Greenfield` +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Returns any question containing descriptions `User`, `Brownfield`, or `Greenfield`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//end::junxian-find[]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//tag::junxian-proposed-features[]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d Mark question as starred during quiz `[coming in v2.0]`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "User will be able to star questions during the quiz by entering `star` for the current question they are on. The question will be updated as \"starred\", so that the user will remember that they"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "had problems with that particular question during the quiz."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d Enter short code during quiz sessions`[coming in v2.0]`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "User will be able to type in code during the quiz, and the app will provide a syntax checker which will not allow the user to submit his code if there are syntax errors."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//end::junxian-proposed-features[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//tag::junxian-timer[]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "For all quiz modes, the current question will be skipped when the timer reaches zero. The question will be marked as wrong,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "and the next question will be shown with the updated timer."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//end::junxian-timer[]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//tag::junxian-custom-mode[]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d Custom Mode"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Category, Difficulty and Timer (must be above 1 second) can be customised by the user. Decimal values will be truncated, i.e."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "`start mode/custom timer/5.34` will start the quiz with a time limit of 5 seconds for each question."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Levels are also sorted according to"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "difficulty. The prefixes are optional, and if no prefixes are provided, custom mode will begin a quiz with normal mode settings."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//end::junxian-custom-mode[]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//tag::junxian-ui[]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "The abstract class `ParentWindow` consists of individual Ui parts e.g.`CommandBox`, `ResultDisplay`, `AnswerableListPanel`, `StatusBarFooter` etc. All Ui classes inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "The `MainWindow` inherits from the `ParentWindow` class and handles the display of information in the configuration mode. Key responsibilities of the `MainWindow` include"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* Execute user commands through the `CommandBox` using the `Logic` component."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* Listen for changes to `Model` data so that the UI can be updated to reflect the modified data. This occurs for two types of situations"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Direct modification to the information inside the Answerables List, such as `AddCommand` or `EditCommand`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Filtering of the currently shown list, for commands such as `FindCommand` and `ListCommand`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "The `StartQuizWindow` inherits from the `ParentWindow` class and handles the display of information during quiz mode. It has an additional `ScoreProgressAndTimerGridPane` Ui component, which"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "is used to contain score progress and timer related Ui. Key responsibilities of the `StartQuizWindow` include"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* Execute user answer input, e.g. \"A\", \"B\", \"C\", \"D\" for `Mcq`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* Adapt to changes in the current `Answerable` and update the Ui accordingly based on a few typical situations"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** from the four options of `Mcq` to the two options for `TrueFalse`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** update the progress bar for every `Answerable`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** update the timer every second and switch to the next `Answerable` when countdown reaches 0."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of the Ui for both windows"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* **Alternative 1 (current choice):** Have a parent class `ParentWindow` which is extended by `MainWindow` and `StartQuizWindow`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Pro1: Adheres to the Single Responsibility Principle, where the `MainWindow` only has one reason to change, and changes in quiz mode should not affect the `MainWindow`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Pro2: The abstract `ParentWindow` class follows the Open/Closed Principle, where the `StartQuizWindow` extends upon the Ui components and adds it\u0027s own Timer and ProgressBar Ui component."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "Each class is also able to have their own implementation of the `executeCommand(String commandText)` method."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Con: Dependency between `MainWindow` and `StartQuizWindow` classes in the methods `MainWindow#handleStart` and `StartQuizWindow#handleEnd` respectively"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* **Alternative 2 (initial choice):** Handle all user commands and changes in Ui within the MainWindow."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Pro: Less overall code, quiz mode only needs to edit the content in the `AnswerableListPanel`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Con: As the CommandBox is a functional interface, it can only take in one abstract method as a parameter. This would mean that `MainWindow#executeCommand` would need to handle all cases of"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "user inputs, for both answerable input commands and configuration mode commands. The `MainWindow#executeCommand` would be very long with complicated logic, thus violating SLAP."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//end::junxian-ui[]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//tag::junxian-list[]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d List feature"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "ListCommand` extends `Command` that will read in user command and execute the command result. User can filter by `Catergory` and/or `Difficulty`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Showing the filtered list"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* **Current Implementation** `ListCommand#excute` combines the `CategoryPredicate` and `DifficultyPredicate` to update the answerable list through `Model#updateFilteredAnswerableList`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Pro: Uses Java 8 streams which supports immutability. This is in line with the immutability clause enforced by the `ObservableList` returned by `Model#updateFilteredAnswerableList`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//end::junxian-list[]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//tag:: junxian-proposed-features[]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d Proposed Features"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d\u003d Star Answerable Command"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Overview of feature"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "User will be able to star an `Answerable` during the test, which marks the `Answerable`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "to remind them to revisit it after the test. The `Answerable` will have an additional `boolean` field `star`."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "The code flow follows the sequence diagram in section 3.2.3, but without the call to `Answerable#isCorrect`."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "The `LogicManager` then calls `execute(String)` in the reference frame \"edit question as starred\". This will involve the `EditCommand`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "which is typically used in the configuration mode. It is now being called internally inside the quiz mode to update the `Answerable` as starred."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ".Sequence Diagram of the StartAnswerableCommand during quiz mode"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "image::StarQuestionInputSequenceDiagram.png[]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ".Sequence Diagram of editing the `Answerable` as starred."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "image::EditQuestionAsStarredSequenceDiagram.png[]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Updating the `Answerable` to be marked as starred while inside quiz mode."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* **Alternative 1 (current choice):** Update the `Answerable` through a call to `LogicManager#execute`. This is primarily used during the configuration mode and not the quiz mode."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Pro: Uses existing commands to implement a new feature for the user, appropriate code reuse"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Con: No clear separation of logic as quiz mode should not know about configuration mode commands."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "* **Alternative 2:** Directly edit the `Answerable` as it is accessible in the `execute(String, Answerable)` for quiz mode commands."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Pro: Less code needed."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "** Con: It breaks the implicit immutability of the `Answerable`, which should only be edited through the `EditCommand` (which creates a new `Answerable`)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d\u003d Input short code for quiz questions"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Overview of feature"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "User will be able to input code, during the quiz session, and the `RevisionTool` will check the syntax as the user types in the code."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "The activity diagram is outlined below."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ".Sequence Diagram of the StartAnswerableCommand during quiz mode"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "image::CodingQuestionSessionActivityDiagram.png[]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ".Activity diagram showing the user flow for code input during quiz mode."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "//end:: junxian-proposed-features[]"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 235,
      "ShaunNgTX": 1
    }
  },
  {
    "path": "docs/team/khiangleon.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003d Sim Khiang Leon - Project Portfolio for CS2103/T Revision Tool (RT)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ":contributedCodeUrl: https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dkhiangleon"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ":ab3Url: https://github.com/nus-cs2103-AY1920S1/addressbook-level3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ":pullUrl: https://github.com/AY1920S1-CS2103-F10-3/main/pull"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ":mainPullUrl: https://github.com/nus-cs2103-AY1920S1/addressbook-level3/pull"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ":issuesUrl: https://github.com/nus-cs2103-AY1920S1/forum/issues"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "By: `Team F10-3`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "This portfolio provides an overview of the CS2103/T Revision Tool and highlights my contribution"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "in the project including a brief description of the key features that I implemented."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003d\u003d\u003d The Team"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "Our team of 5 consists of 2 Year 4 Engineering Science students, a Year 2 Computer Science / Business student, a Year"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "3 Communications and New Media student and myself, a Year 4 Industrial \u0026 Systems Engineering student."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003d\u003d\u003d About the Project"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "This 7-week project was started as part of NUS\u0027 Software Engineering (CS2103/T) module. The team was required to"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "to either morph or enhance an existing application (link:{ab3Url}/[Address Book - Level 3]). Our team decided to morph the project"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "into the CS2103/T Revision Tool (RT), a desktop quiz application which allows users to create their very own"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "personally customised question banks and attempt these questions in the format of timed quizzes"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "in an interactive manner later on. The user interacts with it using a Command Line Interface (CLI), and it has"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "a Graphical User Interface (GUI) created using JavaFX."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "It is written in Java, and has about 14 kLoC."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ".UI of the Configuration Mode"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "image:Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ".UI of the Quiz Mode"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "image:Ui2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "As a member of the project, I have volunteered to set up the project on GitHub and invited all of the group members"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "into our team Repo. I have helped out in milestones and project management. I have been actively monitoring the build"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "status of our project on GitHub. Furthermore, I developed the data analytics part of the application."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "* *Major enhancement*: added *data analytics for the quiz*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "** *What it does*: `stats` command generates and displays a list of past results of quiz attempts and their"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "respective breakdown into scores for each difficulty levels. For each quiz attempt, the application also indicates to"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "the user which type of questions the user did the worst in."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "`history` command shows the raw history of all quiz results and its breakdowns by difficulty levels to the user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "This feature also indicates the number of quizzes attempted by the user so far."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "** *Justification*: This essential feature aids in keeping a record of all quiz results. The feature carries out"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "some data processing and analytics before reporting these extra information back to the user in a proper format."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "This feature significantly improves the product by providing additional helpful information to the user"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "so as to aid in improving his or her quiz scores and ultimately her revision outcome."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "** *Highlights*: This enhancement required the deep understanding of the entire project structure including the"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "new quiz driver feature that forms the backbone of the project. It involves passing and retrieving of information from"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "UI to Storage. Some tests were written for this feature. The `History` Class is created for subsequent storage"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "of any statistical information of past quizzes."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "** Credits: Code for the GUI display and storage of information of this feature was adapted from Address Book – Level 3."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "* *Minor enhancements*: added *the delete multiple questions feature for the app*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "** Enabled `delete` to remove multiple questions at once based on listed index in configuration mode."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "* *Code contributed*: You can view the code I contributed to this project link:{contributedCodeUrl}/[here, window\u003dblank]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "*** Managed releases v1.1 - v1.2 (2 releases) on GitHub"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "*** Managed and resolved issues actively throughout project duration."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "*** Wrote tests for Statistics and History related features created by me."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "*** Created sequence diagrams for `StatsCommand` feature and class diagram for storage component of the app"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "*** Created sequence diagram to better explain how history of quiz results is updated after every successful"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "completion of quiz."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "include::../UserGuide.adoc[tag\u003dkhiangleon-stats]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "include::../UserGuide.adoc[tag\u003dkhiangleon-history]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "include::../UserGuide.adoc[tag\u003dkhiangleon-StatsTip]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dkhiangleon-stats]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khiangleon": 111
    }
  },
  {
    "path": "docs/team/neoshh.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d Neo Si Hao - Project Portfolio for CS2103/T Revision Tool (RT)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neoshh"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neoshh"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neoshh"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neoshh"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neoshh"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neoshh"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neoshh"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neoshh"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neoshh"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neoshh"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neoshh"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neoshh"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neoshh"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neoshh"
        },
        "content": ":contributedCodeUrl: https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dneoshh"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neoshh"
        },
        "content": ":ab3Url: https://github.com/nus-cs2103-AY1920S1/addressbook-level3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neoshh"
        },
        "content": ":pullUrl: https://github.com/AY1920S1-CS2103-F10-3/main/pull"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neoshh"
        },
        "content": ":mainPullUrl: https://github.com/nus-cs2103-AY1920S1/addressbook-level3/pull"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neoshh"
        },
        "content": ":issuesUrl: https://github.com/nus-cs2103-AY1920S1/forum/issues"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neoshh"
        },
        "content": "By: `Team F10-3`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neoshh"
        },
        "content": "This portfolio provides an overview of the CS2103/T Revision Tool and highlights my contribution in the project"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neoshh"
        },
        "content": "including a brief description of the key features that I implemented."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d The Team"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neoshh"
        },
        "content": "Our team of 5 consists of 2 Year 4 Engineering Science students, a Year 4 Industrial \u0026 Systems Engineering student,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neoshh"
        },
        "content": "a Year 3 Communications \u0026 New Media student and a Year 2 Computer Science / Business student."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d About the Project"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neoshh"
        },
        "content": "This 7-week project was started as part of NUS\u0027 Software Engineering (CS2103/T) module. The team was required to"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neoshh"
        },
        "content": "to either morph or enhance an existing application (link:{ab3Url}/[Address Book - Level 3]). Our team decided to morph the project"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neoshh"
        },
        "content": "into the CS2103/T Revision Tool (RT) a desktop quiz application which allows users to create customised question banks"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neoshh"
        },
        "content": "and attempt the quizzes in an interactive manner. The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neoshh"
        },
        "content": "It is written in Java, and has about 14 kLoC."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neoshh"
        },
        "content": ".UI of the Configuration Mode"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neoshh"
        },
        "content": "image:Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neoshh"
        },
        "content": ".UI of the Quiz Mode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neoshh"
        },
        "content": "image:Ui2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neoshh"
        },
        "content": "* *Major enhancement*: added *short answer questions functionality to the application*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neoshh"
        },
        "content": "** What it does: allows the user to answer questions that are open ended in nature."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neoshh"
        },
        "content": "** Justification: This feature improves the product significantly because a user can add and answer questions that cannot be formatted in MCQs or TrueFalse questions style."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neoshh"
        },
        "content": "** Highlights: This enhancement required an in-depth analysis of external Natural Language Processing (NLP) libraries to analyse the user input to determine whether the user answered the SAQs correctly. The implementation was challenging"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neoshh"
        },
        "content": "as String processing is required and many edge cases had to be taken into account as user could input anything as the answer."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neoshh"
        },
        "content": "** Credits: StanfordCoreNLP Library and FuzzyWuzzy Library"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neoshh"
        },
        "content": "* *Minor enhancement*: helped with minor UI enhancements to display different types of questions correctly."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neoshh"
        },
        "content": "* *Code contributed*: view my code contributions https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003dneoshh\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[here]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neoshh"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neoshh"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*** Added FAQs to user guide"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*** Added all the user stories for the project to the developer guide."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neoshh"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*** Reviewed and merged PRs"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neoshh"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*** Integrated a third party library, StanfordCoreNLP and FuzzyWuzzy, to the project"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d Adding SAQ: `add`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neoshh"
        },
        "content": "Adds a SAQ to the question bank"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neoshh"
        },
        "content": "Format: `add type/saq q/QUESTION cat/CATEGORY diff/DIFFICULTY y/CORRECT_ANSWER ... `"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neoshh"
        },
        "content": "****"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neoshh"
        },
        "content": "[%hardbreaks]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neoshh"
        },
        "content": "The following are the valid answer formats for SAQ:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*SAQ*: Multiple correct answers, no wrong answers."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neoshh"
        },
        "content": "****"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neoshh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neoshh"
        },
        "content": "* `add type/saq q/What does UML stands for? cat/cs2103 diff/1 y/unified modeling language`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neoshh"
        },
        "content": "****"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neoshh"
        },
        "content": "[%hardbreaks]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*NOTE*:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neoshh"
        },
        "content": "Answer to the SAQ cannot be \"exit\"."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neoshh"
        },
        "content": "Answer cannot appear in the question"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "neoshh"
        },
        "content": "(eg. q/What is UML diagram? y/UML Diagram)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "neoshh"
        },
        "content": "****"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d Hints `[coming in v2.0]`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "neoshh"
        },
        "content": "User will be able to get hints for MCQs and SAQs. Typing \u0027/hint\u0027 for MCQs will eliminate two wrong answers from the"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neoshh"
        },
        "content": "options, leaving user with two options, one of which is correct. Typing \u0027/hint\u0027 for SAQs will show the user random"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neoshh"
        },
        "content": "keywords from the correct answer list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d Pictures/Diagrams `[coming in v2.0]`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "neoshh"
        },
        "content": "User will be able to upload pictures and diagrams as part of the questions when adding questions to the test bank."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d FAQ"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "neoshh"
        },
        "content": "data of your previous question bank folder."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*Q*: Why am I not able to click on the options to select the answers for MCQs and T/F questions? +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*A*: The options are there as a way to show the users the options available. As this is a CLI application, the main"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "neoshh"
        },
        "content": "input will be through keyboard inputs."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*Q*: Can I use this application for another module? +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*A*: Yes you can. This application is designed to store any types of MCQs, T/F and SAQs."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*Q*: I want to challenge my friends using this application, how can I do it? +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "neoshh"
        },
        "content": "*A*: There is no online support for the application right now. One way you can chanllenge your friend is to prepare the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "neoshh"
        },
        "content": "same json files and load it up to your individual computers and do the quiz together."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "neoshh"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d Saq feature"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d\u003d How Saq works"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "neoshh"
        },
        "content": "The Saq input mechanism is facilitated by `SaqInputCommand`. It extends `Command` and execute the `CommandResult`. The input"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "neoshh"
        },
        "content": "will be  parse into `SaqInputCommandParser` to check for input validity. If the input String is not valid (i.e the String"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "neoshh"
        },
        "content": "does not start with a letter of number), an invalid command parse exception will be thrown, indicating to user that the"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "neoshh"
        },
        "content": "input String requires a letter or a number at the start of the String."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "neoshh"
        },
        "content": "If the input is valid, `SaqInputCommand` object of type `Command` will be created. The execute command of the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "neoshh"
        },
        "content": "`SaqInputCommand` object will be executed. The execute command will call the `isCorrect` method of Saq to check if the"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "neoshh"
        },
        "content": "user input is correct or not."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "neoshh"
        },
        "content": "The activity diagram below shows the steps the user takes to answer an SAQ."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "neoshh"
        },
        "content": ".Activity Diagram of checking answer for SAQ"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "neoshh"
        },
        "content": "image::SaqAnswerCheckerActivityDiagram.png[width\u003d700]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d\u003d NLP Libraries"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "neoshh"
        },
        "content": "External libraries were used to determine if the user input is correct or not. `StanfordCoreNLP` library was used to"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "neoshh"
        },
        "content": "check for sentimental value of user input and the list of correct answers. This helps to check for negative sentence"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "neoshh"
        },
        "content": "against a neutral or positive sentence (eg. \"not a uml diagram\" and \"it\u0027s a uml diagram\"). The `FuzzyWuzzy` library was"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "neoshh"
        },
        "content": "also used to determine the similarity percentage of the user input to the correct answer using fuzzy string matching"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "neoshh"
        },
        "content": "technique."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "neoshh"
        },
        "content": "The class diagram below shows the relationship between the classes that are used to validate the correctness of the"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "neoshh"
        },
        "content": "user input."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "neoshh"
        },
        "content": ".Class Diagram of SAQ Answer Checker"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "neoshh"
        },
        "content": "image::SaqAnswerCheckerClassDiagram.png[width\u003d790]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d\u003d Validating the answer"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "neoshh"
        },
        "content": "The `execute` method will return the `CommandResult`, correct or wrong. The currentAnswerable of type `Saq` will call its"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "neoshh"
        },
        "content": "`isCorrect` method and return a boolean value, true for correct answer and false for wrong answer. The sequence diagram"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "neoshh"
        },
        "content": "below shows the steps taken by the `isCorrect` method to determine if the user input is correct or wrong."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "neoshh"
        },
        "content": ".Sequence Diagram of SAQ isCorrect Method"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "neoshh"
        },
        "content": "image::SaqIsCorrectSequenceDiagram.png[width\u003d790]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d User Stories"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "neoshh"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "neoshh"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |lazy CS2103 student |refer to the revision tool solely for my consolidated module revision |do not have to refer to Luminus"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |CS2103 student |have a personalised application to store all my questions and answers in one place |refer to it conveniently for revision."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |CS2103 student |have a revision tool to test my coding skills and concepts through writing short codes |test myself on coding proficiency too."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |CS2103 student |keep track and see how much progress I have made in completing the questions |gauge my level of progress in completing the syllabus."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |vim-using CS2103/T student |use the keyboard-based commands |further increase my efficiency"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |busy CS2103/T |use quick revision tools |learn using spaced-retrieval"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |busy CS2103 student |mark certain concepts as easy |will not have to spend as much time studying the easy concepts."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |CS2103 student with a lot of things on my mind |mark certain questions that I am unsure of |refer back to the question when I am free."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |CS2103 student |import questions from my peers |study on my own."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |conscientious CS2103 student |export the questions I am unsure of |raise them up during tutorials."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* * *` |indecisive student |be recommended questions instead of me having to plan my own study plan |go directly to studying"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|`* *` |competitive CS2103 student |at least know where I stand among my cohort |look at who is the next person I can beat."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "neoshh"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "neoshh"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "neoshh": 207
    }
  },
  {
    "path": "docs/team/shaunngtx.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d Shaun Ng - Project Portfolio for CS2103 - Revision Tool"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ":contributedCodeUrl: https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dshaunngtx"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ":ab3Url: https://github.com/nus-cs2103-AY1920S1/addressbook-level3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ":pullUrl: https://github.com/AY1920S1-CS2103-F10-3/main/pull"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ":restoreCommand: https://github.com/AY1920S1-CS2103-F10-3/main/blob/master/src/main/java/seedu/revision/logic/commands/main/RestoreCommand.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ":AutoComplete: https://github.com/AY1920S1-CS2103-F10-3/main/blob/master/src/main/java/seedu/revision/ui/AutoComplete.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ":ab3ForumUrl: https://github.com/nus-cs2103-AY1920S1/forum/issues"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "By: `Team F10-3`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "---"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "RevisionTool is a Desktop application used as a personal tool for revisions and self-quizzes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java and"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "has about 14 kLoC."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* *Major enhancement*: added *the Restore Command function*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** What it does: allows the user to restore their current Question Bank to the default question bank."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Justification: This feature improves the product rather significantly as users tend to over-add questions and this would allow them to revert their Question Bank to the default bank"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "as a form of \"Restart\", as most of our default questions are taken from the weekly lecture quiz questions, and hence deemed as important by the professor."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Highlights: This enhancement required changes to the existing models and command classes as a warning alert would pop up to seek confirmation from the users before performing the restore command. Hence the implementation was challenging as it required UI, and model changes."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* *Major enhancement*: added *the Auto Complete function*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** What it does: shows the user a list of possible AutoComplete commands while they are typing, in which they can select, in order to simplify the user\u0027s journey."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Justification: This feature improves the product significantly because for a CLI, users have to do a lot of typing and this greatly eases the amount of work they have to do, and hence allow them to reap the maximum benefits from the application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Highlights: This enhancement required in-depth analysis of design alternatives as the implementation required changes to the commandBox which was used in almost every file which had a textBox in it. A significant amount of thought was placed into the implementation as well as I had to formulate what sort of AutoComplete would be most intuitive and value-add to users."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Credits: _Took references and suggestions from 2 different sources:_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " [https://github.com/AY1920S1-CS2103-F10-3/main/blob/master/src/main/java/seedu/revision/logic/commands/main/RestoreCommand.java[JavaFX AutoComplete]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " [https://stackoverflow.com/questions/36861056/javafx-textfield-auto-suggestions[Stackoverflow JavaFX Auto-Suggestions]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Created the initial UI interface for the startCommand that users use to start the quiz. The different modes such as \"start mode/normal\", \"start mode/arcade\", \"start mode/custom\" were built upon this."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** link:{restoreCommand}/[Restore Command]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** link:{AutoComplete}/[Auto Complete]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** link:{contributedCodeUtl}/[Tp Dashboard]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "*** Name refactoring from AB3 to Revision Tool (Pull requests link:{pullUrl}/154[#154])"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "*** Wrote additional tests for existing features. (Pull requests link:{pullUrl}/154[#154])"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "*** Did minor changes in diagrams and content for User Guide: link:{pullUrl}/4[#4], link:{pullUrl}/165[#165]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): link:{pullUrl}/99[#99], link:{pullUrl}/101[#101],link:{pullUrl}/149[#149], link:{pullUrl}/153[#153],link:{pullUrl}/155[#155],link:{pullUrl}/158[#158], link:{pullUrl}/163[#163]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "*** Provided suggestions and comments for other teams in the class as seen from this link:{ab3ForumUrl}/52[feedback]."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d AutoComplete Function"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Helps you complete your command when you type."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Users will be able to see a list of auto complete options while they are typing. Once the auto complete context menu is"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "shown, users can use the arrow keys to choose the options they want and upon pressing the \"ENTER\" button, they would be able to"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "select the option."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* `User wants to type the \"start\" command in the command box`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* `He will be able to see a list of dropdown options as shown:`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* `First \"ENTER\" button will select the option`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* `Second \"ENTER\" button will execute the option`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "+"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "image::Autocomplete2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d Restoring all entries : `restore`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Clears all current questions from the question bank and restores the default questions that were in the original app. +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Users will be prompted if they really want to restore their current question bank as the command is non-reversible."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Format: `restore`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "*AutoComplete*: Suggested commands will be shown as you type. Navigate through the dropdown list using the up and down"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "arrow keys and hit kbd:[Enter] to complete the command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "image::ModelClassDiagram2.png[]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* stores a `QuestionBank` object that represents the Question Bank."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* stores the Question Bank data."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cAnswerable\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "image::StorageClassDiagram2.png[]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* can save `Question Bank` objects in json format and read it back."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* can save the Test Bank data in json format and read it back."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d Restore feature"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "The restore mechanism is facilitated by `RestoreCommand`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "It extends `Command` that will read a user command and execute the command result."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* `#handleRestore()` -- Prompts the user with an alert box if he really wishes to execute the restore function."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* `#setRevisionTool()` -- Clears the current question bank and reset it with our own default questions."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#setRevisionTool()` and from `MainWindow` as `#handleRestore()` respectively."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* When implementing the restore feature, we didn\u0027t want users to face a problem if they entered the command accidentally hence the alert popup was implemented, to prompt users if they really want to carry out the command before executing it."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* With this popup, users will now be more cautious when trying to restore and only do so when they really want to reset their revision tool."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* Furthermore, the questions that we included in the default revision tool question bank are questions taken from the lecture quiz and weekly quiz which are most probably deemed important by the professor himself."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Restore executes"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** User enters the command \"restore\"."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Command is taken in and a popup is shown to reconfirm if the user would like to carry out the restore command."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Upon clicking yes, restore command will be handled."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Current questions will be deleted and default questions will reset to the revision tool."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d AutoComplete feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* A set of commands and auto completed text are saved in a set."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* When users type a command on the text box, method `#populatePopup` will be called where the user\u0027s command will be matched against our SortedSet."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* If there is a match, a contextMenu showing all possible auto complete text will show up."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* This method is implemented such that the results in the contextMenu will change and show as the user is typing and this would make it more intuitive for users."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* The main design consideration here would be to have value added auto complete list to pop up."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* How we managed that is to show:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** The basic command"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Basic command + possible parse commands where they can easily fill in."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "image::AutoComplete2.png[]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How AutoComplete works"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Users wishes to enter an \"Add\" command `add type/mcq q/What is 1 + 1 y/2 x/1 x/3 x/4 cat/easy diff/1`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Upon typing either \"a\", \"ad\" or even \"add\", the auto complete context menu will pop up showing possible auto complete list, mainly:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "*** add"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "*** add type/ q/ y/ x/ cat/ diff/"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "** Upon seeing that, users will be able to select those options or use those as a guideline to complete his commands more intuitively."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".  RevisionTool should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".  RevisionTool be able to hold up to 1000 questions without any significant reduction in performance for typical usage."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".  A user with above slow typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".  RevisionTool should be able to run without any internet connectivity."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".  RevisionTool does not require any further installation upon downloading the jar file."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "[[Answerables]] Answerables::"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "A set of question answers, which includes :"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* Type: MCQ, True False, Short Answered Question"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* Question"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* Correct Answers (Can contain multiple answers)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* Wrong Answers (Can contain multiple answers)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* Category"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "* Difficulty"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003d\u003d\u003d Adding an answerable"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ". Adding a MCQ to the current list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".. Test case: `add type/mcq q/What is 1 + 1 y/2 x/1 x/3 x/4 cat/easy diff/1` +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Expected: new MCQ answerable will be created and appended at the bottom of the list. Details of the the added answerable will be shown at the bottom of the list, and the correct answer will be highlighted in green."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ". Adding a True False to the current list"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".. Test case: `add type/tf q/What is 1 + 1 \u003d 2 y/true cat/easy diff/1` +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Expected: new True False answerable will be created and appended at the bottom of the list. Details of the added answerable will be shown at the bottom of the list, and only the correct answer will be shown and highlighted in green."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ". Adding a Short Answer Question (SAQ) to the current list"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".. Test case: `add type/saq q/What is smaller than 10 but bigger than 7? y/8 y/9 cat/easy diff/1` +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Expected: new SAQ answerable will be created and appended at the bottom of the list. Details of the added answerable will be shown at the bottom of the list and all the correct answers state will be highlighted in green."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ". Adding an Answerable that already exist in the Revision Tool"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ".. Test case: `add type/mcq q/What is 1 + 1 y/2 x/1 x/3 x/4 cat/easy diff/1` +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "Expected: No new answerable will be added as the question already exist in the Revision Tool. An error message will be thrown, informing users that the answerable already exist in the Revision Tool."
      }
    ],
    "authorContributionMap": {
      "ShaunNgTX": 227
    }
  },
  {
    "path": "docs/team/wilfredbtan.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d Wilfred Bradley Tan - Project Portfolio for CS2103/T Revision Tool (RT)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":contributedCodeUrl: https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#\u003dundefined\u0026search\u003dwilfredbtan"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":ab3Url: https://github.com/nus-cs2103-AY1920S1/addressbook-level3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":pullUrl: https://github.com/AY1920S1-CS2103-F10-3/main/pull"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":mainPullUrl: https://github.com/nus-cs2103-AY1920S1/addressbook-level3/pull"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ":issuesUrl: https://github.com/nus-cs2103-AY1920S1/forum/issues"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "By: `Team F10-3`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "This portfolio provides an overview of the CS2103/T Revision Tool and highlights my contribution in the project including a brief description of the key features that I implemented."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d The Team"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Our team of 5 consists of 2 Year 4 Engineering Science students, a Year 4 Industrial \u0026 Systems Engineering student, a Year"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "3 Communications and New Media student and myself, a Year 2 Computer Science / Business student."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d About the Project"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "This 7-week project was started as part of NUS\u0027 Software Engineering (CS2103/T) module. The team was required to"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "to either morph or enhance an existing application (link:{ab3Url}/[Address Book - Level 3]). Our team decided to morph the project"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "into the CS2103/T Revision Tool (RT) a desktop quiz application which allows users to create customised question banks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "and attempt the quizzes in an interactive manner. The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "It is written in Java, and has about 14 kLoC."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".UI of the Configuration Mode"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image:Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".UI of the Quiz Mode"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image:Ui2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "As the Team Lead of the project, my role was to ensure that the team met the milestones and to coordinate the integration"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "of the entire application. Furthermore, I developed the main driver for the Quiz Mode in the application which was the backbone"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "of many of the other features."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Major enhancement*: added *the main driver for the quiz*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** *What it does*: After entering quiz mode, the driver parses user input, determines whether the answer is correct and displays the next question. At the end of each level and the entire quiz, the user is shown his/her score and given the choice to continue (i.e. proceed to the next level or restart) or exit the quiz."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** *Justification*: This essential feature is the core of the application and allows other features to be built upon it. Furthermore, it significantly improves the product as it adds the element of interaction to the application."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** *Highlights*: This enhancement required the deep understanding of the entire project structure as it can be considered the nervous system that connects the application from UI to Storage. Other functionality such as answering MCQs, True \u0026 False or Short-Answer Questions (SAQ) were built upon this feature. This feature was also tested using automated GUI tests."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** Credits: Code for the GUI display was adapted from Address Book – Level 3 and the structure for GUI tests was adapted from Address Book - Level 4."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Minor enhancements*:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** Created the Normal and Arcade mode for the quiz. In Arcade Mode, each level has increasing difficulty and a shorter time limit, whenever a user gets a question wrong, the quiz ends and the user has to restart."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** Created the abstract `Answerable` Class for subclasses such as `MCQ`, `TrueFalse` and `SAQ` classes to be built upon using the factory design pattern."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** Added an interactive progress bar for each level in the quiz."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** Implemented the adaptable UI for each type of question’s answers (i.e. allowing the GUI to change from displaying 4 panels for MCQs to 2 panels for True \u0026 False questions)."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Code contributed*: You can view the code I contributed to this project link:{contributedCodeUrl}[here]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*** Managed release v1.4 on GitHub"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*** Managed issues and resolved the main bulk of the post Mock PE issues."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*** Wrote additional GUI tests to increase coverage from 50% to 75% (PR link:{pullUrl}/158[#158], link:{pullUrl}/161[#161], link:{pullUrl}/163[#163])"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*** Updated the GUI colour scheme and added aesthetic artifacts such as level label (PR link:{pullUrl}/98[#98], link:{pullUrl}/148[#148])"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*** Created skeleton class for `AnswerableBuilder` using Java Generics and builder design pattern so that my teammates will be able to build upon it easily (PR link:{pullUrl}/148[#148], link:{pullUrl}/149[#149])"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*** Created skeleton sequence and activity diagrams for the team to reuse so that the DG can have a more congruent look."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*** Added all the use cases for the project."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*** Reviewed this link:{mainPullUrl}/14[PR]."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*** Helped a fellow student in this link:{issuesUrl}/60[forum post]."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Starting the quiz: `start`."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "User can start by choosing the mode of the quiz. (normal / arcade / custom). See \u003c\u003cQuiz Mode\u003e\u003e for in-quiz commands."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Format: `start mode/MODE`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "To start all questions in the question bank, use command +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "start mode/normal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `start mode/normal`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `start mode/custom cat/uml /diff/1 timer/20`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Adding a question: `add`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Adds a question to the question bank"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Format: `add type/TYPE q/QUESTION cat/CATEGORY diff/DIFFICULTY y/CORRECT_ANSWER x/WRONG_ANSWER... `"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "****"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[%hardbreaks]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The following are the valid answer formats for each question type:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*MCQ*: 1 Correct answer and 3 Wrong answers."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*True \u0026 False*: 1 Correct answer (i.e. True / False) wrong answers omitted."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*SAQ*: Multiple correct answers, no wrong answers."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "****"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `add type/mcq q/According to the textbook, which kind of project is more difficult? cat/Week 2 diff/1"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "x/Greenfield x/Brownfield y/None of the others x/Padifield`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `add type/tf q/OODMs are Class Diagrams cat/uml diff/2 y/true`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `add type/saq q/What does UML stands for? cat/cs2103 diff/1 y/unified modeling language`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Editing a question : `edit`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Edits an existing question in the question bank."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Format: `edit INDEX [q/QUESTION] [cat/CATEGORY] [diff/DIFFICULTY] [x/WRONG_ANSWER]... [y/CORRECT_ANSWER]...`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "****"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Edits the question at the specified `INDEX`. The index refers to the index number shown in the displayed question list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* When editing category and/or difficulty, the existing category and/or difficulty of the question will be removed"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "i.e adding of category and/or difficulty is not cumulative."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "****"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* `edit 1 q/According the the textbook, is greenfield or brownfield tougher?` +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Edits the the first question to \"According the the textbook, is greenfield or brownfield tougher?\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d Quiz Mode"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Normal Mode"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Levels are separated by difficulty. At the end of each level, user has the choice to move on to the next level or exit the quiz."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The user is given 30 seconds to answer each question."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image::normal-mode.png[]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Arcade Mode"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Levels are separated by difficulty. If the user enters a wrong answer before finishing the quiz. The quiz will end and display the results."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The user is given 30 seconds to answer each question in level 1. Subsequent level timers are 5 seconds faster than the previous level with"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "level 3 giving the user 20 seconds to answer each question."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image::arcade-mode.png[]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Custom Mode"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`Category`, `Difficulty` and `Timer` (must be above 1 second) can be customised by the user. Levels are also sorted according to"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "difficulty."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Answering Questions"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|MCQ |TrueFalse |SAQ"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|Answers can only be A, B, C, or D (Case insensitive) |Answers can only be True (T) / False (F) (Case insensitive)|Answers are open ended. Revision tool uses NLP to parse answers and determine whether they are correct."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Start* `start mode/MODE` +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "e.g. `start mode/normal`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Exit* `exit`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Status* : `status`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Add* `add type/TYPE q/QUESTION cat/CATEGORY diff/DIFFICULTY y/CORRECT_ANSWER x/WRONG_ANSWER...` +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "e.g. `add type/mcq q/According to the textbook, which kind of project is more difficult? cat/Week 2 diff/1"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "x/Greenfield x/Brownfield y/None of the others of the above x/Padifield`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Edit* : `edit INDEX [q/QUESTION] [cat/CATEGORY] [diff/DIFFICULTY] [x/WRONG_ANSWER]... [y/CORRECT_ANSWER]...` +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "e.g. `edit 1 q/According the the textbook, is greenfield or brownfield tougher?`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Delete* : `delete INDEX [MORE_INDICES]` +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "e.g. `delete 1 3 5`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *List* : `list [cat/CATEGORY] [diff/DIFFICULTY]`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "e.g. `list cat/requiments diff/2`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "e.g. `find user story`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *Restore* : `restore`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "(For all use cases below, the *System* is the `RevisionTool` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Use case (UC01): Add answerable"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "1.  User requests to add an answerable"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "2.  RevisionTool adds the answerable"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* 2a. The answerable already exists in the list."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 2a1. RevisionTool shows an error message."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* 2a. Any of the parameters provided are invalid."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 2a1. RevisionTool shows an error message."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Use case (UC02): Delete answerable"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "1.  User requests to list answerables"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "2.  RevisionTool shows a list of answerables"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "3.  User requests to delete a specific answerable in the list"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "4.  RevisionTool deletes the answerable"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 3a1. RevisionTool shows an error message."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Use case (UC03): Start Quiz in `Normal Mode`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "1.  User requests to start quiz in Normal Mode"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "2.  RevisionTool shows the Quiz Mode window with the first question displayed."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "3.  User enters his input into the command box."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "4.  RevisionTool checks the input and records the result of the answer (i.e. whether correct or not)."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "5.  RevisionTool displays the next question. Use case resumes at step 3."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* 1a. The list of questions for the quiz is empty."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* 3a. The given input is invalid."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 3a1. RevisionTool shows an error message."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* 3c. User inputs an exit command."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* 5a. The current level of the quiz has ended."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 5a1. RevisionTool prompts the user to continue or end the quiz."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 5a2. User chooses to proceed to the next level."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case resumes at step 5."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* 5b. The current level of the quiz has ended."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 5b1. RevisionTool prompts the user to continue or end the quiz."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 5b2. User chooses to end the quiz."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* 5c. The entire quiz has ended."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 5c1. RevisionTool prompts the user to restart or end the quiz."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 5c2. User chooses to restart the quiz."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case ends resumes at step 2."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* 5d. The entire quiz has ended."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 5d1. RevisionTool prompts the user to restart or end the quiz."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** 5d2. User chooses to end the quiz."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* *a. Time available to answer each question of the quiz runs out (30 seconds for Normal Mode)."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** *a1. RevisionTool marks the question as wrong."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "+"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Use case resumes at step 5."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "For Custom Mode, the use case is the same except timer can be customised. +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "For Arcade Mode, an extension 4a will be added. If the user gets the question wrong, the quiz will end and the User will"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "be prompted to restart or end the quiz."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d The `Answerable` Class"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".Class Diagram of the Answerable Class"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image::AnswerableClassDiagram.png[]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The main class that the Revision Tool operates on is the `Answerable` class."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Each `Answerable` class must have 1 `Question`, 1 `Difficulty` and can have any amount of categories associated with it."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The amount of answers that an `Answerable` can have depends on its type."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "There are 3 subclasses of the `Answerable` Class which are: `Mcq`, `TrueFalse` and `Saq`. Each class defines it\u0027s"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "own rules on the validity of `Answer` s (highlighted in red in the class diagram) provided to it."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The following are the rules of validity for each subclass:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Mcq: 4 answers in total. 1 correct answer, 3 wrong answers."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* TrueFalse: Either \u0027true\u0027 or \u0027false\u0027 as its answer."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* Saq: Any amount of answers."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "For all subclasses, there cannot be any duplicates of answers. For example, if an Mcq class has \"option1\" as one of its"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "wrong answers, it cannot have \"option1\" as its correct answer or another wrong answer."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Managing parsing in Configuration and Quiz Mode (Overview)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The Revision Tool uses two Parser interfaces (`Parser` and `QuizParser`) to parse different sets of commands (i.e. in Configuration Mode and in Quiz Mode)."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".Class Diagram of ParserManager to display how parsers are created in both modes."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image::ParserClassDiagram.png[width\u003d500]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "As shown in the figure above, the `ParserManager` class is responsible for creating the respective parsers for Configuration and Quiz Mode."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "This was designed while taking into consideration that the Quiz Mode Parsers (i.e. XYZParsers) will require"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "an extra `Answerable` argument on top of the user input String in order to carry out commands such as determining whether the user\u0027s input is the correct answer."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "(E.g. to call methods such as Answerable#isCorrect(Answer))"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "As different commands are accepted in Configuration and Quiz Mode, the `ParserManager` class uses overloaded methods"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "(`parseCommand(String)` and `parseCommand(String, Answerable)` to determine the valid commands in each mode. If a Configuration Mode"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "command such as `add` were to be used in Quiz Mode, the ParserManager would deem the the command as invalid. +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "With reference to Figure 6, The following are the parsers used in each mode:"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* ABCParser (Configuration Mode):"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** AddCommandParser"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** DeleteCommandParser"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** EditCommandParser"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** FindCommandParser"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** ListCommandParser"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** StartCommandParser"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "* XYZParser (Quiz Mode):"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** McqInputCommandParser"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** TfInputCommandParser"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "** SaqInputCommandParser"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "A more detailed description of the implementation of parsing in Configuration and Quiz Mode and its design considerations"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "can be found in \u003c\u003cImplementation-ConfigQuiz\u003e\u003e."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[[Implementation-ConfigQuiz]]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d Configuration and Quiz Mode"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "As different commands are available for Configuration and Quiz Mode, we have to determine which commands are valid based on"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "the state of the application. To implement this, we had to examine two main design considerations: The *structure of the parser component* and *how to"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "determine which parser to use*. We will discuss these considerations in the following segment."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|*Aspect* | *Alternative 1* | *Alternative 2* | *Conclusion and Explanation*"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|Structure of the Parser Component"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|Command parsers for both modes implement the same interface (i.e. implement both `parse(String)` and `parse(String, Answerable)` methods)"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "but for the method which is not used, throw an error if a client calls it."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|Command parsers belonging to each mode implement different interfaces (i.e. a `Parser` or `QuizParser` interface)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "which dictates the parameters of their parse() methods. (i.e. `parse(String)` for Configuration Mode vs `parse(String, Answerable)` for Quiz Mode)"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|*Alternative 2 was implemented.* The main reason for this choice was to adhere to the interface-segregation principle."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "If alternative 1 were to be implemented, a Configuration Mode command may have to implement a parse(String, Answerable)"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "dummy method which it will not use. This is bad design as a client might be able to call the dummy method and receive"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "unexpected results. Thus, by separating the interfaces, clients will only need to know about the methods that they need."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|Determining which parser to use| Create two parser manager classes (i.e. `QuizParserManager` and `ParserManager`)"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "with accompanying `QuizLogicManager` and `LogicManager` classes whose methods will be called in `MainWindow` for Configuration Mode and"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`StartQuizWindow` for Quiz Mode respectively."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|Use a single `ParserManager` class which has overloaded methods of parse(String) and parse(String, Answerable). A"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "single `LogicManager` will also implement `execute(String)` and `execute(String, Answerable)`. In Configuration Mode, the"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "`LogicManager` will call `execute(String)` as there is no need to take in an Answerable and in Quiz Mode, the `LogicManager`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "will call `execute(String, Answerable)` to initiate quiz-related commands."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|*Alternative 2 was implemented.* By doing so, we were able to adopt a facade design pattern. The main benefit would be that"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "the client doesn\u0027t need to know the logic involved in selecting which type of parser and logic to use. This hides the internal"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "complexity of the `ParserManager` class which will be responsible for determining which type of parser to use."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d\u003d Commands in Configuration Mode"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "In Configuration Mode, a single string is passed as an argument to the Logic#execute method (i.e. `execute(String)`)."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d\u003d Commands in Quiz Mode"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "In Quiz Mode, a string and the current `Answerable` object are passed as arguments to the Logic#execute method. (i.e. `execute(String, Answerable)`)"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"c\", answerable)` API call."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".Interactions Inside the Logic Component for the `c` input command."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image::QuizSequenceDiagram.png[width\u003d790]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d\u003d Key differences between Configuration Mode and Quiz Mode:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|*Configuration Mode* | *Quiz Mode*"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|Logic#execute takes in a single string. | Logic#execute takes in a String and an Answerable."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|No methods of `Answerable` are called. | `Answerable#isCorrect(Answer)` is called from `AnswerableInputCommand`s such as `McqInputCommand` to check whether the user\u0027s answer is correct."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|`CommandResult` is used to display feedback to the user| `CommandResult` is used to display feedback to the user and inform `LogicManager` whether the selected answer is correct."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|`Model` is used to save actions such as the addition/deletion of answerables. | `Model` is used to update the score history statistics."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation of `CommandResult` (Builder Design Pattern)"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "The `CommandResult` class is designed using a builder pattern to allow flexibility of values returned to the `LogicManager`."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "To guard against null values, default values are provided to every field in the `CommandResult` class upon construction."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Objects that call `CommandResult` can choose to customise `CommandResult` according to their needs."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Below is a code snippet of the `CommandResultBuilder` and `CommandResult` class:"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image::wilfred-commandwithfeedback.png[width\u003d790]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image::wilfred-commandbuild.png[width\u003d790]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image::wilfred-commandresult.png[width\u003d790]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "Examples of how to build a CommandResult:"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "...."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "CommandResult c \u003d new CommandResultBuilder().withFeedback(message).withExit(true).build();"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "CommandResult c \u003d new CommandResultBuilder().isCorrect(true).build();"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "...."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003d\u003d\u003d\u003d How the quiz works"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "After the user has `start` ed the quiz, the application enters Quiz Mode. The following is the flow of events after a quiz"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "session has started."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".Activity Diagram of a Quiz Session in `NormalMode`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "image::QuizSessionActivityDiagram.png[width\u003d790]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "*Elaboration of Steps:*"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". After the user has started a normal mode quiz. He/she will be prompted to key in their answer."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". If the input is valid, the revision tool will display the subsequent question until the level / entire quiz has ended."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". If the input is invalid, the revision tool will prompt the user to key in their input again with guidance provided on"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "the commands accepted."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". If the time limit is exceeded (e.g. 30 seconds in Normal Mode), the revision tool will mark the question as wrong and"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "move on to the next question."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Once a level has ended, the user will be given the choice to move on to the next level or exit the quiz."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ". Once the entire quiz has ended, the user will be given the choice to restart or exit the quiz."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "For Custom Mode, the game play is the same except that user can choose the category, difficulty and timer for the questions. +"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "For Arcade Mode, when a users enters a wrong answer, the quiz will end."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 491
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.PersonCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 3,
      "-": 422
    }
  },
  {
    "path": "src/main/java/seedu/revision/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/revision/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/revision/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.History;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.ReadOnlyRevisionTool;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.RevisionTool;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.model.answerable.Pipeline;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.util.SampleHistoryUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.storage.HistoryStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.storage.JsonHistoryStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.storage.JsonRevisionToolStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.storage.RevisionToolStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.storage.Storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.ui.Ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.ui.UiManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Revision Tool ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        RevisionToolStorage revisionToolStorage \u003d new JsonRevisionToolStorage(userPrefs.getRevisionToolFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        HistoryStorage historyStorage \u003d new JsonHistoryStorage(userPrefs.getHistoryFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        storage \u003d new StorageManager(revisionToolStorage, userPrefsStorage, historyStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        Pipeline.getPipeline();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s revision tool and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * The data from the sample revision tool will be used instead if {@code storage}\u0027s revision tool is not found,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * or an empty revision tool will be used instead if errors occur when reading {@code storage}\u0027s revision tool."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        Optional\u003cReadOnlyHistory\u003e historyOptional;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        ReadOnlyHistory initialHistory;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        Optional\u003cReadOnlyRevisionTool\u003e revisionToolOptional;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        ReadOnlyRevisionTool initialData;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            revisionToolOptional \u003d storage.readRevisionTool();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            if (!revisionToolOptional.isPresent()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample question bank\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            initialData \u003d revisionToolOptional.orElseGet(SampleDataUtil::getSampleRevisionTool);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty question bank\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            initialData \u003d new RevisionTool();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty question bank\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            initialData \u003d new RevisionTool();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            historyOptional \u003d storage.readHistory();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (!historyOptional.isPresent()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                logger.info(\"History file not found. Will be starting with a sample history\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            initialHistory \u003d historyOptional.orElseGet(SampleHistoryUtil::getSampleHistory);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            logger.warning(\"History file not in the correct format. \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    + \"Will be starting with an empty history\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            initialHistory \u003d new History();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty history\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            initialHistory \u003d new History();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return new ModelManager(initialData, userPrefs, initialHistory);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty RevisionTool\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        logger.info(\"Starting Revision Tool \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Revision Tool ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 29,
      "neoshh": 3,
      "khiangleon": 18,
      "-": 145,
      "ShaunNgTX": 15
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String LOG_FILE \u003d \"RevisionTool.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static Level currentLogLevel \u003d Level.ALL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        consoleHandler.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4,
      "-": 109
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_INVALID_ANSWERABLE_DISPLAYED_INDEX \u003d \"The answerable index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_ANSWERABLES_LISTED_OVERVIEW \u003d \"%1$d answerables listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public static final String MESSAGE_QUIZ_STARTED \u003d \"Quiz starting...!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 9,
      "ShaunNgTX": 1
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 81,
      "ShaunNgTX": 1
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/revision/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"([.,!?:;\u0027\\\"-]|\\\\s)+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.quiz.Statistics;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Returns the History."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @see seedu.revision.model.Model#getHistory()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    ReadOnlyHistory getHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /** Updates history of quiz statistics with the latest results */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    void updateHistory(Statistics newResult);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of answerables */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    ObservableList\u003cAnswerable\u003e getFilteredAnswerableList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /** Returns an unmodifiable view of the list of statistics */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    ObservableList\u003cStatistics\u003e getStatisticsList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered and sorted list of answerables */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    ObservableList\u003cAnswerable\u003e getFilteredSortedAnswerableList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Removes the filters from answerable list and restores the list to its original size. **/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    void removeFiltersFromAnswerableList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the user prefs\u0027 revision tool file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    Path getRevisionToolFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Returns the user prefs\u0027 revision tool file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    Path getHistoryFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Executes commands while the Quiz session in operation. Takes in user input and determines command to execute."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param currentAnswerable The current question to be responded to."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return commandResult to be executed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    CommandResult execute(String commandText, Answerable currentAnswerable) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 37,
      "khiangleon": 20,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.main.ParserManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.quiz.Statistics;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final ParserManager parserManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        parserManager \u003d new ParserManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Command command \u003d parserManager.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            //since it\u0027s being stored here."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            storage.saveRevisionTool(model.getRevisionTool());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            storage.saveHistory(model.getHistory());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult execute(String commandText, Answerable currentAnswerable)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throws ParseException, CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Command command \u003d parserManager.parseCommand(commandText, currentAnswerable);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        CommandResult commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (commandResult.isCorrect()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            logger.info(\"Correct answer selected\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            logger.info(\"Wrong answer selected\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public ReadOnlyHistory getHistory() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return model.getHistory();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Updates the history of quiz statistics."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @param newResult model is updated with new quiz statistics."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void updateHistory(Statistics newResult) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        requireNonNull(newResult);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        model.addStatistics(newResult);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ObservableList\u003cAnswerable\u003e getFilteredAnswerableList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return model.getFilteredAnswerableList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public ObservableList\u003cStatistics\u003e getStatisticsList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return model.getStatisticsList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ObservableList\u003cAnswerable\u003e getFilteredSortedAnswerableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return model.getFilteredAnswerableList().sorted(Comparator.comparing(a -\u003e a.getDifficulty()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void removeFiltersFromAnswerableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        model.removeFiltersFromAnswerableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Path getRevisionToolFilePath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return model.getRevisionToolFilePath();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public Path getHistoryFilePath() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return model.getHistoryFilePath();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 48,
      "jxofficial": 1,
      "khiangleon": 29,
      "-": 49,
      "ShaunNgTX": 2
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "jxofficial": 2,
      "-": 16,
      "ShaunNgTX": 1
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CORRECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_QUESTION_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_WRONG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Adds a answerable to the revision tool."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public static final String COMPLETE_COMMAND \u003d \"add type/ q/ y/ x/ cat/ diff/ \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a question to the test bank. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_QUESTION_TYPE + \"QUESTION TYPE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_QUESTION + \"QUESTION \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_DIFFICULTY + \"DIFFICULTY \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_CATEGORY + \"[CATEGORY]...\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_QUESTION_TYPE + \"mcq \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_QUESTION + \"Which of the following gives us the highest intensity of testing? \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_WRONG + \"50% statement coverage \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_CORRECT + \"100% path coverage \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_WRONG + \"70% branch coverage \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_WRONG + \"80% condition coverage \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_DIFFICULTY + \"3 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_CATEGORY + \"TestCoverage \" + PREFIX_CATEGORY + \"Week8 \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New question added: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ANSWERABLE \u003d \"This question already exists in the test bank\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final Answerable toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Answerable}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AddCommand(Answerable answerable) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(answerable);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        toAdd \u003d answerable;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (model.hasAnswerable(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ANSWERABLE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        model.addAnswerable(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResultBuilder().withFeedBack(String.format(MESSAGE_SUCCESS, toAdd)).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 34,
      "jxofficial": 2,
      "khiangleon": 1,
      "-": 34,
      "ShaunNgTX": 2
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.RevisionTool;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Clears the revision tool."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Test bank has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public static final String MESSAGE_ADDITIONAL_COMMAND_BEHIND \u003d \"Unexpected trailing command!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        model.setRevisionTool(new RevisionTool());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResultBuilder().withFeedBack(MESSAGE_SUCCESS).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4,
      "jxofficial": 2,
      "-": 16,
      "ShaunNgTX": 3
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.quiz.Mode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Feedback that will be shown to the user**/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final boolean isShowHelp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final boolean isExit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /** The quiz will start. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final boolean isStart;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /** The restore window will open. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final boolean isRestore;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /** The history window will open. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final boolean isShowHistory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /** The stats window will open. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final boolean isShowStats;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** The answer is correct. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final boolean isCorrect;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** The mode of the quiz in session **/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final Mode mode;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /** To pass the Model. */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Constructs a {@code CommandResult} using a {@code CommandResultBuilder}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Defensive programming: By taking in a builder, the developer cannot type"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * in the parameters manually. The builder also assigns default values when initiated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult(CommandResultBuilder builder) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(builder);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.feedbackToUser \u003d builder.getFeedbackToUser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.isShowHelp \u003d builder.isShowHelp();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.isExit \u003d builder.isExit();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.isStart \u003d builder.isStart();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.isRestore \u003d builder.isShowRestore();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.isShowHistory \u003d builder.isShowHistory();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.isShowStats \u003d builder.isShowStats();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.isCorrect \u003d builder.isCorrect();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.mode \u003d builder.getMode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.model \u003d builder.getModel();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return isShowHelp;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public boolean isStart() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return isStart;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public boolean isShowRestore() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return isRestore;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public boolean isShowHistory() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return isShowHistory;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public boolean isShowStats() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return isShowStats;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isCorrect() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.isCorrect;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(this.model);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Mode getMode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(this.mode);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return mode;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 isShowHelp \u003d\u003d otherCommandResult.isShowHelp"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 isExit \u003d\u003d otherCommandResult.isExit;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return Objects.hash(feedbackToUser, isShowHelp, isExit);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 52,
      "jxofficial": 1,
      "khiangleon": 12,
      "-": 49,
      "ShaunNgTX": 14
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/CommandResultBuilder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.quiz.Mode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.quiz.NormalMode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class CommandResultBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Feedback that will be shown to the user**/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private String feedbackToUser \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private boolean showHelp \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private boolean exit \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** The quiz will start. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private boolean start \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** The restore window will open. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private boolean showRestore \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** The history window will open. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private boolean showHistory \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** The stats window will open. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private boolean showStats \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** The answer is correct. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private boolean isCorrect \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** The mode of the quiz in session **/"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Mode mode \u003d new NormalMode();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** To pass the Model. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Adds feedback to the {@code CommandResultBuilder} that will be returned."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param feedbackToUser feedback that will be provided to the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return CommandResultBuilder with the updated feedback."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResultBuilder withFeedBack(String feedbackToUser) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Adds a boolean to the {@code CommandResultBuilder} to indicate whether the command is a {@code HelpCommand}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param isHelp input boolean to determine result."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return {@code CommandResultBuilder} with the withHelp boolean updated according to the input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResultBuilder withHelp(boolean isHelp) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.showHelp \u003d isHelp;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Adds a boolean to the {@code CommandResultBuilder} to indicate whether the command is a {@code ExitCommand}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param isExit input boolean to determine result."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return {@code CommandResultBuilder} with the withExit boolean updated according to the input."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResultBuilder withExit(boolean isExit) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.exit \u003d isExit;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Adds a boolean to the {@code CommandResultBuilder} to indicate whether the command is a {@code StartCommand}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param isStart input boolean to determine result."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return {@code CommandResultBuilder} with the withStart boolean updated according to the input."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResultBuilder withStart(boolean isStart) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.start \u003d isStart;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Adds a boolean to the {@code CommandResultBuilder} to indicate whether the command is a {@code RestoreCommand}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param isRestore input boolean to determine result."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return {@code CommandResultBuilder} with the withRestore boolean updated according to the input."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResultBuilder withRestore(boolean isRestore) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.showRestore \u003d isRestore;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Adds a boolean to the {@code CommandResultBuilder} to indicate whether the command is a {@code RestoreCommand}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param isHistory input boolean to determine result."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return {@code CommandResultBuilder} with the withRestore boolean updated according to the input."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResultBuilder withHistory(boolean isHistory) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.showHistory \u003d isHistory;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Adds a boolean to the {@code CommandResultBuilder} to indicate whether the command is a {@code RestoreCommand}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param isStats input boolean to determine result."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return {@code CommandResultBuilder} with the withRestore boolean updated according to the input."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResultBuilder withStats(boolean isStats) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.showStats \u003d isStats;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Adds a {@code Mode} to the {@code CommandResultBuilder} to be used to determine the mode when starting the"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * quiz session."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param mode mode that is chosen by the user."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return {@code CommandResultBuilder} with the updated mode."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResultBuilder withMode(Mode mode) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Adds a boolean to the {@code CommandResultBuilder} to indicate whether the answer is correct"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param isCorrect input boolean to determine whether answer is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return {@code CommandResultBuilder} with the withCorrect boolean updated according to the input."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResultBuilder withCorrect(boolean isCorrect) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.isCorrect \u003d isCorrect;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Adds a {@code Mode} to the {@code CommandResultBuilder} to be used in the restore command."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param model current model that is being used."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return {@code CommandResultBuilder} with the updated model."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResultBuilder withModel(Model model) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Builds a new instance of the {@code CommandResult} using the builder design pattern."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return {@code CommandResult}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult build() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResult(this);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isStart() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isShowRestore() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return showRestore;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isShowHistory() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return showHistory;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isShowStats() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return showStats;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isCorrect() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.isCorrect;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Mode getMode() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return mode;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 192
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Deletes one or more answerables identified using it\u0027s displayed index from the revision tool."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \": Deletes one or more questions identified by the index number used in the displayed question list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 2 3\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_DELETE_ANSWERABLE_SUCCESS \u003d \"Deleted Questions: %s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ArrayList\u003cIndex\u003e targetIndexList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public DeleteCommand(ArrayList\u003cIndex\u003e targetIndexList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (Index targetIndex : targetIndexList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            this.targetIndexList.add(targetIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        List\u003cAnswerable\u003e lastShownList \u003d model.getFilteredAnswerableList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cAnswerable\u003e toBeDeleted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (Index targetIndex : targetIndexList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_ANSWERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d targetIndexList.size() - 1; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            for (int j \u003d i + 1; j \u003c\u003d targetIndexList.size() - 1; j++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                if (targetIndexList.get(i).equals(targetIndexList.get(j))) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    throw new CommandException(\"You have indicated duplicate questions to be deleted. \\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                            + \"Please indicate only once for each question to be deleted!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (Index targetIndex : targetIndexList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            Answerable answerableToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            toBeDeleted.add(answerableToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (Answerable answerableToDelete : toBeDeleted) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            model.deleteAnswerable(answerableToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResultBuilder().withFeedBack(String.format(MESSAGE_DELETE_ANSWERABLE_SUCCESS,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                toBeDeleted.toString())).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || (other instanceof DeleteCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                // \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 65,
      "jxofficial": 2,
      "khiangleon": 9
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.model.Model.PREDICATE_SHOW_ALL_ANSWERABLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Mcq;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.QuestionType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Saq;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.TrueFalse;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Edits the details of an existing answerable in the test bank."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the answerable identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"by the index number used in the displayed answerable list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"[\" + PREFIX_QUESTION + \"QUESTION] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"[\" + PREFIX_DIFFICULTY + \"DIFFICULTY] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"ADDRESS] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"category]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_QUESTION + \"Blackfield or Whitefield? \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_DIFFICULTY + \"1\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_EDIT_ANSWERABLE_SUCCESS \u003d \"Edited Answerable: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ANSWERABLE \u003d \"This question already exists in the test bank.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_CANNOT_EDIT_TYPE \u003d \"Edit command cannot edit question type.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final EditAnswerableDescriptor editAnswerableDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param index of the answerable in the filtered answerable list to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param editAnswerableDescriptor details to edit the answerable with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public EditCommand(Index index, EditAnswerableDescriptor editAnswerableDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(editAnswerableDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.editAnswerableDescriptor \u003d new EditAnswerableDescriptor(editAnswerableDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        List\u003cAnswerable\u003e lastShownList \u003d model.getFilteredAnswerableList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ANSWERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable answerableToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable editedAnswerable \u003d createEditedAnswerable(answerableToEdit, editAnswerableDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        validateAnswerableToEdit(answerableToEdit, editedAnswerable);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!answerableToEdit.isSameAnswerable(editedAnswerable) \u0026\u0026 model.hasAnswerable(editedAnswerable)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ANSWERABLE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        model.setAnswerable(answerableToEdit, editedAnswerable);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        model.updateFilteredAnswerableList(PREDICATE_SHOW_ALL_ANSWERABLE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResultBuilder().withFeedBack(String.format(MESSAGE_EDIT_ANSWERABLE_SUCCESS,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                editedAnswerable)).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Validates the {@code Answerable} used for the edit command by its type."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param answerableToEdit answerable that is to be edited."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param editedAnswerable answerable that has been edited"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws CommandException exception is thrown is edited answerable is not in the correct format according to type."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void validateAnswerableToEdit(Answerable answerableToEdit, Answerable editedAnswerable)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (answerableToEdit instanceof Mcq) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (!Mcq.isValidMcq((Mcq) editedAnswerable)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new CommandException(Mcq.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (answerableToEdit instanceof TrueFalse) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (!TrueFalse.isValidTrueFalse((TrueFalse) editedAnswerable)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new CommandException(TrueFalse.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Creates and returns a {@code Answerable} with the details of {@code answerableToEdit}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * edited with {@code editAnswerableDescriptor}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static Answerable createEditedAnswerable("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            Answerable answerableToEdit, EditAnswerableDescriptor editAnswerableDescriptor) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assert answerableToEdit !\u003d null : \"Attempting to edit null answerable\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Question updatedQuestion \u003d editAnswerableDescriptor.getQuestion().orElse(answerableToEdit.getQuestion());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cAnswer\u003e updatedCorrectAnswerList \u003d editAnswerableDescriptor.getCorrectAnswerList()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .orElse(answerableToEdit.getCorrectAnswerList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cAnswer\u003e updatedWrongAnswerList \u003d editAnswerableDescriptor.getWrongAnswerList()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .orElse(answerableToEdit.getWrongAnswerList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Difficulty updatedDifficulty \u003d editAnswerableDescriptor.getDifficulty().orElse(answerableToEdit"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .getDifficulty());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Set\u003cCategory\u003e updatedCategories \u003d editAnswerableDescriptor.getCategories().orElse(answerableToEdit"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .getCategories());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (answerableToEdit instanceof Mcq) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new Mcq(updatedQuestion, updatedCorrectAnswerList, updatedWrongAnswerList, updatedDifficulty,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    updatedCategories);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else if (answerableToEdit instanceof TrueFalse) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new TrueFalse(updatedQuestion, updatedCorrectAnswerList, updatedDifficulty, updatedCategories);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new Saq(updatedQuestion, updatedCorrectAnswerList, updatedDifficulty, updatedCategories);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 editAnswerableDescriptor.equals(e.editAnswerableDescriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Stores the details to edit the answerable with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * corresponding field value of the answerable."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static class EditAnswerableDescriptor {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        private QuestionType questionType;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        private Question question;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        private ArrayList\u003cAnswer\u003e correctAnswerList;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        private ArrayList\u003cAnswer\u003e wrongAnswerList;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        private Difficulty difficulty;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        private Set\u003cCategory\u003e categories;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public EditAnswerableDescriptor() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "         * A defensive copy of {@code categories} is used internally."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public EditAnswerableDescriptor(EditAnswerableDescriptor toCopy) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            setQuestionType(toCopy.questionType);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            setQuestion(toCopy.question);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            setCorrectAnswerList(toCopy.correctAnswerList);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            setWrongAnswerList(toCopy.wrongAnswerList);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            setDifficulty(toCopy.difficulty);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            setCategories(toCopy.categories);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return CollectionUtil.isAnyNonNull(questionType, question, correctAnswerList, wrongAnswerList,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    difficulty, categories);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public QuestionType getQuestionType() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return questionType;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public void setQuestionType(QuestionType questionType) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            this.questionType \u003d questionType;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public void setQuestion(Question question) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            this.question \u003d question;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public Optional\u003cQuestion\u003e getQuestion() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return Optional.ofNullable(question);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public void setCorrectAnswerList(ArrayList\u003cAnswer\u003e correctAnswerList) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            this.correctAnswerList \u003d correctAnswerList;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public Optional\u003cArrayList\u003cAnswer\u003e\u003e getCorrectAnswerList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return Optional.ofNullable(correctAnswerList);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public void setWrongAnswerList(ArrayList\u003cAnswer\u003e wrongAnswerList) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            this.wrongAnswerList \u003d wrongAnswerList;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public Optional\u003cArrayList\u003cAnswer\u003e\u003e getWrongAnswerList() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return Optional.ofNullable(wrongAnswerList);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public void setDifficulty(Difficulty difficulty) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public Optional\u003cDifficulty\u003e getDifficulty() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return Optional.ofNullable(difficulty);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        public void setCategories(Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            this.categories \u003d (categories !\u003d null) ? new HashSet\u003c\u003e(categories) : null;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "         * Returns an unmodifiable category set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        public Optional\u003cSet\u003cCategory\u003e\u003e getCategories() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return (categories !\u003d null) ? Optional.of(Collections.unmodifiableSet(categories)) : Optional.empty();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (!(other instanceof EditAnswerableDescriptor)) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            EditAnswerableDescriptor e \u003d (EditAnswerableDescriptor) other;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return getQuestion().equals(e.getQuestion())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    \u0026\u0026 getCorrectAnswerList().equals(e.getCorrectAnswerList())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    \u0026\u0026 getWrongAnswerList().equals(e.getWrongAnswerList())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    \u0026\u0026 getDifficulty().equals(e.getDifficulty())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    \u0026\u0026 getCategories().equals(e.getCategories());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 146,
      "jxofficial": 14,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting quiz as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResultBuilder().withFeedBack(MESSAGE_EXIT_ACKNOWLEDGEMENT).withExit(true).build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || (other instanceof ExitCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 8,
      "jxofficial": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Finds and lists all answerables in test bank whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all answerables whose questions contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" greenfield brownfield\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final QuestionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public FindCommand(QuestionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        model.updateFilteredAnswerableList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResultBuilder().withFeedBack("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                String.format(Messages.MESSAGE_ANSWERABLES_LISTED_OVERVIEW, model.getFilteredAnswerableList().size()))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 12,
      "jxofficial": 2,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Type \" + COMMAND_WORD + \" to show program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResultBuilder().withFeedBack(SHOWING_HELP_MESSAGE).withHelp(true).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "jxofficial": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/HistoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.quiz.Statistics;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Provides a view on the results from all past attempts of quizzes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows all results from your past history. \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"History shown! \\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        ObservableList\u003cStatistics\u003e history \u003d model.getStatisticsList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        if (history.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new CommandResultBuilder().withFeedBack(\"You have not attempted any quizzes yet!\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResultBuilder().withFeedBack(String.format(MESSAGE_SUCCESS + history + \"\\nYou have attempted \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                + history.size() + \" quizzes so far.\")).withHistory(true).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "khiangleon": 38
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Lists all answerables in the revision tool to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String COMPLETE_COMMAND_DIFF \u003d \"list diff/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String COMPLETE_COMMAND_CAT \u003d \"list cat/\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all questions which belong to the \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            + \"specified category and difficulty (case-insensitive, optional) \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            + \"and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            + PREFIX_DIFFICULTY + \"DIFFICULTY \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            + PREFIX_CATEGORY + \"UML \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            + PREFIX_DIFFICULTY + \"2 \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Predicate\u003cAnswerable\u003e predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ListCommand(Predicate\u003cAnswerable\u003e predicate) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        model.updateFilteredAnswerableList(predicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResultBuilder().withFeedBack(String.format(Messages.MESSAGE_ANSWERABLES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                model.getFilteredAnswerableList().size())).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 14,
      "jxofficial": 17,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/RestoreCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * Format Restore instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class RestoreCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"restore\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public static final String SHOWING_CONFIRMATION_MESSAGE \u003d \" \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @return feedback message of the operation result for display."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @@author ShaunNgTx"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return new CommandResultBuilder().withFeedBack(SHOWING_CONFIRMATION_MESSAGE).withRestore(true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                .withModel(model).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "ShaunNgTX": 29
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/StartCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_MODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.quiz.Mode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Command to start the quiz session."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class StartCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"start\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public static final String COMMAND_AUTOCOMPLETE \u003d \"start mode/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String COMMAND_AUTOCOMPLETE_NORMAL \u003d \"start mode/normal\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public static final String COMMAND_AUTOCOMPLETE_ARCADE \u003d \"start mode/arcade\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public static final String COMMAND_AUTOCOMPLETE_CUSTOM \u003d \"start mode/custom\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Starts quiz based on Mode (Normal / Arcade / Custom)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            + \"For Custom, you can add the optional prefixes timer/ cat/ diff/ \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            + \"If no prefixes are provided, quiz will default to normal mode.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_MODE + \"MODE\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_MODE + \"normal\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Starting Quiz!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Mode mode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Instantiates a StartCommand to start a quiz session. **/"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public StartCommand(Mode mode) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public CommandResult execute(Model model) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        model.updateFilteredAnswerableList(this.mode.getCombinedPredicate());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResultBuilder().withFeedBack(String.format(Messages.MESSAGE_ANSWERABLES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                model.getFilteredAnswerableList().size())).withStart(true).withMode(mode).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 16,
      "jxofficial": 11,
      "khiangleon": 5,
      "ShaunNgTX": 18
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/main/StatsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.logic.commands.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.quiz.Statistics;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Provides a summary of statistics for current quiz session or last done quiz."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "public class StatsCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows results breakdown of all your past \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            + \"quiz performances.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Results breakdown shown!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        ObservableList\u003cStatistics\u003e history \u003d model.getStatisticsList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        if (history.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new CommandResultBuilder().withFeedBack(\"You have not attempted any quizzes yet!\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return new CommandResultBuilder().withFeedBack(MESSAGE_SUCCESS).withStats(true).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "khiangleon": 40
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/quiz/McqInputCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.ui.bar.Timer.TIMER_UP_SKIP_QUESTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResultBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * User inputs that answer the MCQ questions in the quiz session."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class McqInputCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Input can only be A, B, C, or D (case insensitive)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(McqInputCommand.class.getName());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final String mcqInput;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final Answerable currentAnswerable;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public McqInputCommand(String mcqInput, Answerable currentAnswerable) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.mcqInput \u003d mcqInput;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.currentAnswerable \u003d currentAnswerable;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answer selectedAnswer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (mcqInput.equalsIgnoreCase(TIMER_UP_SKIP_QUESTION)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new CommandResultBuilder().withCorrect(false).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        switch (mcqInput.toLowerCase()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"a\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            selectedAnswer \u003d currentAnswerable.getCombinedAnswerList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"b\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            selectedAnswer \u003d currentAnswerable.getCombinedAnswerList().get(1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"c\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            selectedAnswer \u003d currentAnswerable.getCombinedAnswerList().get(2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"d\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            selectedAnswer \u003d currentAnswerable.getCombinedAnswerList().get(3);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            selectedAnswer \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(selectedAnswer);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        boolean result \u003d currentAnswerable.isAnswerCorrect(selectedAnswer);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResultBuilder().withCorrect(result).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || (other instanceof McqInputCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u0026\u0026 mcqInput.equalsIgnoreCase(((McqInputCommand) other).mcqInput));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 34,
      "jxofficial": 33,
      "khiangleon": 3
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/quiz/SaqInputCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neoshh"
        },
        "content": "package seedu.revision.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.ui.bar.Timer.TIMER_UP_SKIP_QUESTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResultBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neoshh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neoshh"
        },
        "content": " * User inputs that answer the SAQ questions in the quiz session."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neoshh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neoshh"
        },
        "content": "public class SaqInputCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Input cannot be blank and must start with letter or number\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final String MESSAGE_INVALID_INPUT_TIMER_UP \u003d \"The input cannot be \" + TIMER_UP_SKIP_QUESTION;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    private final String saqInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    private final Answerable currentAnswerable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    public SaqInputCommand(String saqInput, Answerable currentAnswerable) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        this.saqInput \u003d saqInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        this.currentAnswerable \u003d currentAnswerable;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (saqInput.equalsIgnoreCase(TIMER_UP_SKIP_QUESTION)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new CommandResultBuilder().withCorrect(false).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        Answer selectedAnswer \u003d new Answer(saqInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        requireNonNull(selectedAnswer);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        boolean result \u003d currentAnswerable.isAnswerCorrect(selectedAnswer);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResultBuilder().withCorrect(result).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                || (other instanceof SaqInputCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u0026\u0026 saqInput.equalsIgnoreCase(((SaqInputCommand) other).saqInput));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neoshh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 5,
      "neoshh": 32,
      "jxofficial": 14
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/commands/quiz/TfInputCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.ui.bar.Timer.TIMER_UP_SKIP_QUESTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResultBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/** TfInputCommand class used to execute user inputs for True and False Answerables. **/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class TfInputCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Input can only be True(T) or False(F) (case insensitive)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final String tfInput;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final Answerable currentAnswerable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public TfInputCommand(String tfInput, Answerable currentAnswerable) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.tfInput \u003d tfInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.currentAnswerable \u003d currentAnswerable;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (tfInput.equalsIgnoreCase(TIMER_UP_SKIP_QUESTION)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new CommandResultBuilder().withCorrect(false).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Answer selectedAnswer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        switch (tfInput.toLowerCase()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"true\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"t\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            selectedAnswer \u003d new Answer(\"true\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"false\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            //fallthrough"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"f\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            selectedAnswer \u003d new Answer(\"false\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            selectedAnswer \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        requireNonNull(selectedAnswer);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        boolean result \u003d currentAnswerable.isAnswerCorrect(selectedAnswer);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new CommandResultBuilder().withCorrect(result).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                || (other instanceof TfInputCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u0026\u0026 tfInput.equalsIgnoreCase(((TfInputCommand) other).tfInput));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 13,
      "jxofficial": 49
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Prefix PREFIX_QUESTION_TYPE \u003d new Prefix(\"type/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Prefix PREFIX_CORRECT \u003d new Prefix(\"y/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Prefix PREFIX_WRONG \u003d new Prefix(\"x/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Prefix PREFIX_DIFFICULTY \u003d new Prefix(\"diff/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"cat/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Prefix PREFIX_MODE \u003d new Prefix(\"mode/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Prefix PREFIX_TIMER \u003d new Prefix(\"timer/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 8,
      "jxofficial": 2,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.QuestionType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.quiz.ArcadeMode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.quiz.CustomMode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.quiz.Mode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.quiz.NormalMode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.ui.bar.Timer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses a {@code String answer} into a {@code Answer}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws ParseException if the given {@code answer} is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static Answer parseAnswer(String answer) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String trimmedAnswer \u003d answer.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!Answer.isValidAnswer(trimmedAnswer)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new Answer(trimmedAnswer);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e answers} into a {@code Set\u003cAnswer\u003e}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static ArrayList\u003cAnswer\u003e parseAnswers(Collection\u003cString\u003e answers) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(answers);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final ArrayList\u003cAnswer\u003e answerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (String answer : answers) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            Answer newAnswer \u003d parseAnswer(answer);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (answerList.contains(newAnswer)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new ParseException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            answerList.add(newAnswer);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answerList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses {@code questionType} into an {@code QuestionType} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws ParseException if the given {@code questionType} is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static QuestionType parseType(String questionType) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String trimmedType \u003d questionType.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!QuestionType.isValidQuestionType(trimmedType)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(QuestionType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new QuestionType(trimmedType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses a {@code String question} into a {@code Question}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws ParseException if the given {@code question} is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static Question parseQuestion(String question) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String trimmedQuestion \u003d question.trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!Question.isValidQuestion(trimmedQuestion)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new Question(trimmedQuestion);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses a {@code String difficulty} into a {@code Difficulty}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws ParseException if the given {@code difficulty} is invalid."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static Difficulty parseDifficulty(String difficulty) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(difficulty);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String trimmedDifficulty \u003d difficulty.trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!Difficulty.isValidDifficulty(trimmedDifficulty)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(Difficulty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new Difficulty(trimmedDifficulty);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Parses a {@code String Category} into a {@code Category}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws ParseException if the given {@code Category} is invalid."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static Category parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!Category.isValidCategory(trimmedCategory)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return new Category(trimmedCategory);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e Categories} into a {@code Set\u003cCategory\u003e}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static Set\u003cCategory\u003e parseCategories(Collection\u003cString\u003e categories) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        requireNonNull(categories);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        final Set\u003cCategory\u003e categorySet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        for (String categoryName : categories) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            categorySet.add(parseCategory(categoryName));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return categorySet;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Parses {@code String time} into a valid {int time}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws ParseException if the given {@code time} is \u003c 1 seconds"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static int parseTimer(String time) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        int convertedTime \u003d (int) Double.parseDouble(time);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (convertedTime \u003c 1) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throw new ParseException(Timer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return convertedTime;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses a {@code String mode} into a {@code Mode}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws ParseException if the given {@code mode} is invalid."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static Mode parseMode(String mode) throws ParseException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(mode);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String trimmedMode \u003d mode.trim();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!Mode.isValidMode(trimmedMode)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(Mode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        switch (trimmedMode) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"normal\":"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new NormalMode();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"arcade\":"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new ArcadeMode();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"custom\":"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new CustomMode();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(\"Invalid mode found at ParserUtil\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 100,
      "jxofficial": 29,
      "khiangleon": 4,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/QuizParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents a QuizParserManager that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public interface QuizParser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    T parse(String userInput, Answerable currentAnswerable) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "jxofficial": 16
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/main/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CORRECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_QUESTION_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_WRONG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import me.xdrop.fuzzywuzzy.FuzzySearch;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.Prefix;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.model.answerable.Answer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.model.answerable.Mcq;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.model.answerable.QuestionType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.model.answerable.Saq;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.model.answerable.TrueFalse;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION_TYPE, PREFIX_QUESTION, PREFIX_CORRECT, PREFIX_WRONG,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                PREFIX_DIFFICULTY, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_QUESTION_TYPE, PREFIX_QUESTION, PREFIX_CORRECT, PREFIX_CATEGORY,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                PREFIX_DIFFICULTY) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        QuestionType questionType \u003d ParserUtil.parseType(argMultimap.getValue(PREFIX_QUESTION_TYPE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Question question \u003d ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Difficulty difficulty \u003d ParserUtil.parseDifficulty(argMultimap.getValue(PREFIX_DIFFICULTY).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Set\u003cCategory\u003e categories \u003d ParserUtil.parseCategories(argMultimap.getAllValues(PREFIX_CATEGORY));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cAnswer\u003e correctAnswerList \u003d ParserUtil.parseAnswers(argMultimap.getAllValues(PREFIX_CORRECT));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cAnswer\u003e wrongAnswerList \u003d ParserUtil.parseAnswers(argMultimap.getAllValues(PREFIX_WRONG));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable answerable \u003d Answerable.create(questionType.getType(), question, correctAnswerList,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                wrongAnswerList, difficulty, categories);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(answerable);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        validateAnswerableToAdd(answerable);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new AddCommand(answerable);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Validates the answerable by its type."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param answerableToAdd the answerable that is being added."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return a boolean to determine if answerable is valid. True if valid. False otherwise."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws ParseException exception is thrown if answerable is not in the correct format."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private boolean validateAnswerableToAdd(Answerable answerableToAdd)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (answerableToAdd instanceof Mcq) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (!Mcq.isValidMcq((Mcq) answerableToAdd)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new ParseException(Mcq.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (answerableToAdd instanceof TrueFalse) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (!TrueFalse.isValidTrueFalse((TrueFalse) answerableToAdd)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new ParseException(TrueFalse.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        if (answerableToAdd instanceof Saq) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            if (!Saq.isValidSaq((Saq) answerableToAdd)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                throw new ParseException(Saq.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            areSaqAnswersValid(answerableToAdd.getCorrectAnswerList(), answerableToAdd.getQuestion());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * Returns true if none of the answers is \u0027exit\u0027"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * @param answerList the list of correct answers"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * @return a boolean to determine if saq answer is valid. True if valid. False otherwise."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * @throws ParseException exception is thrown if answer is \u0027exit\u0027."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    private boolean areSaqAnswersValid(ArrayList\u003cAnswer\u003e answerList, Question question) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        for (Answer answer : answerList) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            if (answer.getAnswer().toLowerCase().trim().equals(\"exit\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                throw new ParseException(Saq.MESSAGE_INVALID_ANSWER_EXIT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            if (FuzzySearch.tokenSetRatio(answer.getAnswer(), question.question) \u003d\u003d 100) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                throw new ParseException(Saq.MESSAGE_INVALID_ANSWER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 49,
      "neoshh": 34,
      "jxofficial": 7,
      "khiangleon": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/main/ClearCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "package seedu.revision.logic.parser.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.ClearCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * Parses input arguments and creates a new ClearCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class ClearCommandParser implements Parser\u003cClearCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public static final String MESSAGE_ADDITIONAL_COMMAND_BEHIND \u003d \"Unexpected trailing command!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClearCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * and returns an ClearCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public ClearCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        if (!args.isBlank()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                    MESSAGE_ADDITIONAL_COMMAND_BEHIND));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return new ClearCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShaunNgTX": 29
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/main/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ArrayList\u003cIndex\u003e indexArray;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            indexArray \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            String[] rawIndices \u003d args.strip().split(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            for (String index : rawIndices) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                indexArray.add(ParserUtil.parseIndex(index.strip()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new DeleteCommand(indexArray);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 11,
      "jxofficial": 4,
      "khiangleon": 2,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/main/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.main.EditCommand.MESSAGE_CANNOT_EDIT_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CORRECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_QUESTION_TYPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_WRONG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * @@author jxofficial"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUESTION_TYPE, PREFIX_QUESTION, PREFIX_CORRECT, PREFIX_WRONG,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                        PREFIX_DIFFICULTY, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUESTION_TYPE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throw new ParseException(MESSAGE_CANNOT_EDIT_TYPE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        EditCommand.EditAnswerableDescriptor editAnswerableDescriptor \u003d new EditCommand.EditAnswerableDescriptor();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUESTION).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            editAnswerableDescriptor.setQuestion("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DIFFICULTY).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            editAnswerableDescriptor.setDifficulty("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    ParserUtil.parseDifficulty(argMultimap.getValue(PREFIX_DIFFICULTY).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CORRECT).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            editAnswerableDescriptor.setCorrectAnswerList("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    ParserUtil.parseAnswers(argMultimap.getAllValues(PREFIX_CORRECT)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (argMultimap.getValue(PREFIX_WRONG).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            editAnswerableDescriptor.setWrongAnswerList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    ParserUtil.parseAnswers(argMultimap.getAllValues(PREFIX_WRONG)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        parseCategoriesForEdit(argMultimap.getAllValues(PREFIX_CATEGORY))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .ifPresent(editAnswerableDescriptor::setCategories);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (!editAnswerableDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return new EditCommand(index, editAnswerableDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e categories} into a {@code Set\u003cCategory\u003e} if {@code categories} is non-empty."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * If {@code categories} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * {@code Set\u003cCategory\u003e} containing zero categories."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Optional\u003cSet\u003cCategory\u003e\u003e parseCategoriesForEdit(Collection\u003cString\u003e categories) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assert categories !\u003d null : \"Attempting to edit null Category\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (categories.isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return Optional.of(ParserUtil.parseCategories(categories));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 10,
      "jxofficial": 79,
      "khiangleon": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/main/ExitCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "package seedu.revision.logic.parser.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * Parses input arguments and creates a new ExitCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class ExitCommandParser implements Parser\u003cExitCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public static final String MESSAGE_ADDITIONAL_COMMAND_BEHIND \u003d \"Unexpected trailing command!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExitCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * and returns an ExitCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public ExitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        if (!args.isBlank()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                    MESSAGE_ADDITIONAL_COMMAND_BEHIND));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShaunNgTX": 29
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/main/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String[] questionKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new FindCommand(new QuestionContainsKeywordsPredicate(Arrays.asList(questionKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 5,
      "jxofficial": 3,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/main/HelpCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "package seedu.revision.logic.parser.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * Parses input arguments and creates a new HelpCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class HelpCommandParser implements Parser\u003cHelpCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public static final String MESSAGE_ADDITIONAL_COMMAND_BEHIND \u003d \"Unexpected trailing command!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HelpCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * and returns an HelpCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public HelpCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        if (!args.isBlank()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                    MESSAGE_ADDITIONAL_COMMAND_BEHIND));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return new HelpCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShaunNgTX": 29
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/main/HistoryCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "package seedu.revision.logic.parser.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.HistoryCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * Parses input arguments and creates a new HistoryCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class HistoryCommandParser implements Parser\u003cHistoryCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public static final String MESSAGE_ADDITIONAL_COMMAND_BEHIND \u003d \"Unexpected trailing command!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the HistoryCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * and returns an HistoryCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public HistoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        if (!args.isBlank()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                    MESSAGE_ADDITIONAL_COMMAND_BEHIND));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return new HistoryCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShaunNgTX": 29
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/main/ListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.model.Model.PREDICATE_SHOW_ALL_ANSWERABLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.CategoryPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.DifficultyPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Adds a filter to the list command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Can filter by category or difficulty of questions available."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Checks whether category or difficulty parsed in is available before executing list command to filter."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class ListCommandParser implements Parser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Command parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CATEGORY, PREFIX_DIFFICULTY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Predicate\u003cAnswerable\u003e combinedPredicate \u003d PREDICATE_SHOW_ALL_ANSWERABLE;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            Category categoryToFilter \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            CategoryPredicate categoryPredicate \u003d new CategoryPredicate(categoryToFilter);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            combinedPredicate \u003d combinedPredicate.and(categoryPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DIFFICULTY).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            Difficulty difficultyToFilter \u003d ParserUtil.parseDifficulty(argMultimap.getValue(PREFIX_DIFFICULTY).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            DifficultyPredicate difficultyPredicate \u003d new DifficultyPredicate(difficultyToFilter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            combinedPredicate \u003d combinedPredicate.and(difficultyPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new ListCommand(combinedPredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 22,
      "jxofficial": 26,
      "khiangleon": 6
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/main/ParserManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.main.HistoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.RestoreCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.StartCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.main.StatsCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.quiz.McqInputCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.quiz.SaqInputCommandParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.quiz.TfInputCommandParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Mcq;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Saq;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.TrueFalse;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * @author wilfredbtan"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class ParserManager {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param userInput full user input string."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format or is not a configuration mode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            return new ClearCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            return new ExitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            return new HelpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        case RestoreCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            return new RestoreCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case StartCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new StartCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        case StatsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            return new StatsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            return new HistoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Checks if user input during quiz is valid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * It should be either an exit command, or an answer to the current question."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param userInput user response or command."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param currentAnswerable the current answerable."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return exit command or an answerable input command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws ParseException throws an exception if the user input is not a quiz command."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Command parseCommand(String userInput, Answerable currentAnswerable) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (commandWord.equalsIgnoreCase(ExitCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (currentAnswerable instanceof Mcq) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new McqInputCommandParser().parse(userInput, currentAnswerable);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else if (currentAnswerable instanceof TrueFalse) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new TfInputCommandParser().parse(userInput, currentAnswerable);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else if (currentAnswerable instanceof Saq) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new SaqInputCommandParser().parse(userInput, currentAnswerable);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 51,
      "jxofficial": 10,
      "khiangleon": 7,
      "-": 55,
      "ShaunNgTX": 10
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/main/RestoreCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "package seedu.revision.logic.parser.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.RestoreCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * Parses input arguments and creates a new RestoreCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class RestoreCommandParser implements Parser\u003cRestoreCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public static final String MESSAGE_ADDITIONAL_COMMAND_BEHIND \u003d \"Unexpected trailing command!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RestoreCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * and returns an RestoreCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public RestoreCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        if (!args.isBlank()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                    MESSAGE_ADDITIONAL_COMMAND_BEHIND));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return new RestoreCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShaunNgTX": 29
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/main/StartCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_MODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_TIMER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.model.Model.PREDICATE_SHOW_ALL_ANSWERABLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.StartCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.predicates.CategoryPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.predicates.DifficultyPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.quiz.ArcadeMode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.quiz.CustomMode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.quiz.Mode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.quiz.NormalMode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Parses input arguments and creates a new StartCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class StartCommandParser implements Parser\u003cStartCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Predicate\u003cAnswerable\u003e combinedPredicate \u003d PREDICATE_SHOW_ALL_ANSWERABLE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StartCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * and returns a StartCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public StartCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODE, PREFIX_TIMER, PREFIX_DIFFICULTY, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StartCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        boolean optionalTimerPrefixIsPresent \u003d argMultimap.getValue(PREFIX_TIMER).isPresent();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        boolean optionalDifficultyPrefixIsPresent \u003d argMultimap.getValue(PREFIX_DIFFICULTY).isPresent();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        boolean optionalCategoryPrefixIsPresent \u003d argMultimap.getValue(PREFIX_CATEGORY).isPresent();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        boolean optionalPrefixesArePresent \u003d optionalTimerPrefixIsPresent || optionalCategoryPrefixIsPresent"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                || optionalDifficultyPrefixIsPresent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Mode mode;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        int time;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODE).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            mode \u003d ParserUtil.parseMode(argMultimap.getValue(PREFIX_MODE).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StartCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        switch (mode.toString().toLowerCase()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"normal\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            if (optionalPrefixesArePresent) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StartCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                mode \u003d new NormalMode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                return new StartCommand(mode);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"arcade\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (optionalPrefixesArePresent) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StartCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                mode \u003d new ArcadeMode();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                return new StartCommand(mode);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case \"custom\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            if (optionalCategoryPrefixIsPresent) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                Category categoryToFilter \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                CategoryPredicate categoryPredicate \u003d new CategoryPredicate(categoryToFilter);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                combinedPredicate \u003d combinedPredicate.and(categoryPredicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            if (optionalDifficultyPrefixIsPresent) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                Difficulty difficultyToFilter \u003d ParserUtil.parseDifficulty(argMultimap"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                        .getValue(PREFIX_DIFFICULTY).get());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                DifficultyPredicate difficultyPredicate \u003d new DifficultyPredicate(difficultyToFilter);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                combinedPredicate \u003d combinedPredicate.and(difficultyPredicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            mode \u003d ((CustomMode) mode).withCombinedPredicate(combinedPredicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            if (optionalTimerPrefixIsPresent) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                time \u003d ParserUtil.parseTimer(argMultimap.getValue(PREFIX_TIMER).get());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                mode \u003d ((CustomMode) mode).withTime(time);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            mode \u003d ((CustomMode) mode).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new StartCommand(mode);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StartCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 36,
      "jxofficial": 57,
      "khiangleon": 2,
      "ShaunNgTX": 13
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/main/StatsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "package seedu.revision.logic.parser.main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.StatsCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * Parses input arguments and creates a new StatsCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class StatsCommandParser implements Parser\u003cStatsCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public static final String MESSAGE_ADDITIONAL_COMMAND_BEHIND \u003d \"Unexpected trailing command!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StatsCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * and returns an StatsCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public StatsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        if (!args.isBlank()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                    MESSAGE_ADDITIONAL_COMMAND_BEHIND));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return new StatsCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShaunNgTX": 29
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/quiz/McqInputCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.ui.bar.Timer.TIMER_UP_SKIP_QUESTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.quiz.McqInputCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.QuizParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class McqInputCommandParser implements QuizParser\u003cMcqInputCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public McqInputCommand parse(String args, Answerable currentAnswerable) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (args.matches(\"\\\\b(?i)[a-d]\\\\b\") || args.equals(TIMER_UP_SKIP_QUESTION)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new McqInputCommand(args, currentAnswerable);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, McqInputCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "jxofficial": 29
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/quiz/SaqInputCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neoshh"
        },
        "content": "package seedu.revision.logic.parser.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.logic.commands.quiz.SaqInputCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.logic.parser.QuizParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neoshh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neoshh"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neoshh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neoshh"
        },
        "content": "public class SaqInputCommandParser implements QuizParser\u003cSaqInputCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * @throws ParseException if the user input is blank"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    public SaqInputCommand parse(String args, Answerable currentAnswerable) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        if (!args.isBlank() \u0026\u0026 (Character.isLetter(args.charAt(0)) || Character.isDigit(args.charAt(0)))) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            return new SaqInputCommand(args, currentAnswerable);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SaqInputCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neoshh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neoshh": 30
    }
  },
  {
    "path": "src/main/java/seedu/revision/logic/parser/quiz/TfInputCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.ui.bar.Timer.TIMER_UP_SKIP_QUESTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.quiz.TfInputCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.QuizParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/** TfInputCommandParser used to parse user inputs for True and False {@code Answerables}.**/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class TfInputCommandParser implements QuizParser\u003cTfInputCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TfInputCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * and returns an TfInputCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public TfInputCommand parse(String args, Answerable currentAnswerable) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (args.matches(\"\\\\b(?i)(true|false|t|f)\\\\b\") || args.equalsIgnoreCase(TIMER_UP_SKIP_QUESTION)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return new TfInputCommand(args, currentAnswerable);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TfInputCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "jxofficial": 27
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/History.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.quiz.Statistics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.quiz.StatisticsList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Wraps all data of statistics."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "public class History implements ReadOnlyHistory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final StatisticsList statistics;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        statistics \u003d new StatisticsList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public History() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Creates a quiz history using the Statistics in the {@code toBeCopied}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public History(ReadOnlyHistory toBeCopied) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Replaces the contents of the statistics list with {@code statistics}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void setStatistics(List\u003cStatistics\u003e statistics) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.statistics.setStatistics(statistics);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Resets the existing data of this {@code History} with {@code newData}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void resetData(ReadOnlyHistory newData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        setStatistics(newData.getStatisticsList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Adds a statistics to the history."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void addStatistics(Statistics s) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        statistics.add(s);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return statistics.asUnmodifiableObservableList().size() + \" quiz attempts in total\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Returns the total number of quiz attempts shown from history."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @return total number of statistics"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return statistics.asUnmodifiableObservableList().size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Returns an unmodifiable view of the list of statistics."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public ObservableList\u003cStatistics\u003e getStatisticsList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return statistics.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                || (other instanceof History // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                \u0026\u0026 statistics.equals(((History) other).statistics));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return statistics.hashCode();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 94
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.quiz.Statistics;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    Predicate\u003cAnswerable\u003e PREDICATE_SHOW_ALL_ANSWERABLE \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the user prefs\u0027 revision tool file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    Path getRevisionToolFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Returns the user prefs\u0027 quiz history file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    Path getHistoryFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the user prefs\u0027 revision tool file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    void setRevisionToolFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Sets the user prefs\u0027 quiz history file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    void setHistoryFilePath(Path historyFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Replaces revision tool data with the data in {@code revisionTool}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    void setRevisionTool(ReadOnlyRevisionTool revisionTool);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /** Returns the RevisionTool */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    ReadOnlyRevisionTool getRevisionTool();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Replaces quiz history data with the data in {@code history}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    void setHistory(ReadOnlyHistory history);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /** Returns the History */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    ReadOnlyHistory getHistory();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if a answerable with the same identity as {@code answerable} exists in the revision tool."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    boolean hasAnswerable(Answerable answerable);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Deletes the given answerable."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * The answerable must exist in the revision tool."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    void deleteAnswerable(Answerable target);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Adds the given answerable."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * {@code answerable} must not already exist in the revision tool."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    void addAnswerable(Answerable answerable);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Adds the given statistics."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    void addStatistics(Statistics statistics);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Replaces the given answerable {@code target} with {@code editedAnswerable}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * {@code target} must exist in the revision tool."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * The answerable identity of {@code editedAnswerable} must not be the same as"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * another existing answerable in the revision tool."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    void setAnswerable(Answerable target, Answerable editedAnswerable);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Returns an unmodifiable view of the filtered answerable list */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    ObservableList\u003cAnswerable\u003e getFilteredAnswerableList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /** Returns an unmodifiable view of the statistics list */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    ObservableList\u003cStatistics\u003e getStatisticsList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Updates the filter of the filtered answerable list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    void updateFilteredAnswerableList(Predicate\u003cAnswerable\u003e predicate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Removes the filters from answerable list and restores the list to its original size. **/"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    void removeFiltersFromAnswerableList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 26,
      "khiangleon": 26,
      "-": 61,
      "ShaunNgTX": 5
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.quiz.Statistics;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents the in-memory model of the revision tool data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private final RevisionTool revisionTool;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final FilteredList\u003cAnswerable\u003e filteredAnswerables;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final FilteredList\u003cStatistics\u003e filteredStatistics;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final History history;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Initializes a ModelManager with the given revisionTool, userPrefs and quiz history."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public ModelManager(ReadOnlyRevisionTool revisionTool, ReadOnlyUserPrefs userPrefs, ReadOnlyHistory history) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        requireAllNonNull(revisionTool, userPrefs, history);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        logger.fine(\"Initializing with revision tool: \" + revisionTool + \" and user prefs \" + userPrefs"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                + \" and quiz history \" + history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this.revisionTool \u003d new RevisionTool(revisionTool);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        filteredAnswerables \u003d new FilteredList\u003c\u003e(this.revisionTool.getAnswerableList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.history \u003d new History(history);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        filteredStatistics \u003d new FilteredList\u003c\u003e(this.history.getStatisticsList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this(new RevisionTool(), new UserPrefs(), new History());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public Path getRevisionToolFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return userPrefs.getRevisionToolFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public Path getHistoryFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return userPrefs.getHistoryFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void setRevisionToolFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        userPrefs.setRevisionToolFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RevisionTool \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void setHistoryFilePath(Path historyFilePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        requireNonNull(historyFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        userPrefs.setHistoryFilePath(historyFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void setRevisionTool(ReadOnlyRevisionTool revisionTool) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this.revisionTool.resetData(revisionTool);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void setHistory(ReadOnlyHistory history) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.history.resetData(history);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public ReadOnlyRevisionTool getRevisionTool() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return revisionTool;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public ReadOnlyHistory getHistory() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return history;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean hasAnswerable(Answerable answerable) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(answerable);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return revisionTool.hasAnswerable(answerable);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void deleteAnswerable(Answerable target) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        revisionTool.removeAnswerable(target);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void addAnswerable(Answerable answerable) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        revisionTool.addAnswerable(answerable);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        updateFilteredAnswerableList(PREDICATE_SHOW_ALL_ANSWERABLE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void addStatistics(Statistics statistics) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        history.addStatistics(statistics);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerable(Answerable target, Answerable editedAnswerable) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireAllNonNull(target, editedAnswerable);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        revisionTool.setAnswerable(target, editedAnswerable);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Answerable List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Answerable} backed by the internal list of"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ObservableList\u003cAnswerable\u003e getFilteredAnswerableList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return filteredAnswerables;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Statistics} backed by the internal list of"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public ObservableList\u003cStatistics\u003e getStatisticsList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return filteredStatistics;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void updateFilteredAnswerableList(Predicate\u003cAnswerable\u003e predicate) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        filteredAnswerables.setPredicate(predicate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void removeFiltersFromAnswerableList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        filteredAnswerables.setPredicate(PREDICATE_SHOW_ALL_ANSWERABLE);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return revisionTool.equals(other.revisionTool)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                \u0026\u0026 history.equals(other.history)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                \u0026\u0026 filteredAnswerables.equals(other.filteredAnswerables)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                \u0026\u0026 filteredStatistics.equals(other.filteredStatistics);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 25,
      "khiangleon": 43,
      "-": 107,
      "ShaunNgTX": 22
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/ReadOnlyHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.quiz.Statistics;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Unmodifiable view of quiz history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "public interface ReadOnlyHistory {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Returns an unmodifiable view of the history of statistics."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    ObservableList\u003cStatistics\u003e getStatisticsList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 14
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/ReadOnlyRevisionTool.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Unmodifiable view of an revision tool."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public interface ReadOnlyRevisionTool {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns an unmodifiable view of the answerables list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * This list will not contain any duplicate answerables."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    ObservableList\u003cAnswerable\u003e getAnswerableList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 6,
      "-": 10,
      "ShaunNgTX": 1
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    Path getRevisionToolFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    Path getHistoryFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "khiangleon": 1,
      "-": 14,
      "ShaunNgTX": 1
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/RevisionTool.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.UniqueAnswerableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Wraps all data at the revision tool level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Duplicates are not allowed (by .isSameAnswerable comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class RevisionTool implements ReadOnlyRevisionTool {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final UniqueAnswerableList answerables;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerables \u003d new UniqueAnswerableList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public RevisionTool() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Creates an RevisionTool using the Answerables in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public RevisionTool(ReadOnlyRevisionTool toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Replaces the contents of the answerable list with {@code answerables}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * {@code answerables} must not contain duplicate answerables."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerables(List\u003cAnswerable\u003e answerables) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.answerables.setAnswerables(answerables);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Resets the existing data of this {@code RevisionTool} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void resetData(ReadOnlyRevisionTool newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        setAnswerables(newData.getAnswerableList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    //// answerable-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if a answerable with the same identity as {@code answerable} exists in the revision tool."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean hasAnswerable(Answerable answerable) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(answerable);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answerables.contains(answerable);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Adds a answerable to the revision tool."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * The answerable must not already exist in the revision tool."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void addAnswerable(Answerable p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerables.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Replaces the given answerable {@code target} in the list with {@code editedAnswerable}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * {@code target} must exist in the revision tool."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * The answerable identity of {@code editedAnswerable} must not be the same as"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * another existing answerable in the revision tool."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerable(Answerable target, Answerable editedAnswerable) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(editedAnswerable);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerables.setAnswerable(target, editedAnswerable);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Removes {@code key} from this {@code RevisionTool}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * {@code key} must exist in the revision tool."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void removeAnswerable(Answerable key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerables.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answerables.asUnmodifiableObservableList().size() + \" answerables\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ObservableList\u003cAnswerable\u003e getAnswerableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answerables.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                || (other instanceof RevisionTool // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                \u0026\u0026 answerables.equals(((RevisionTool) other).answerables));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answerables.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 33,
      "khiangleon": 2,
      "-": 77,
      "ShaunNgTX": 9
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private Path historyFilePath \u003d Paths.get(\"data\", \"history.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private Path revisionToolFilePath \u003d Paths.get(\"data\" , \"revisiontool.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        setRevisionToolFilePath(newUserPrefs.getRevisionToolFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        setHistoryFilePath(newUserPrefs.getHistoryFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public Path getRevisionToolFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return revisionToolFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void setRevisionToolFilePath(Path revisionToolFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        requireNonNull(revisionToolFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this.revisionToolFilePath \u003d revisionToolFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public Path getHistoryFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return historyFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void setHistoryFilePath(Path historyFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        requireNonNull(historyFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.historyFilePath \u003d historyFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                \u0026\u0026 revisionToolFilePath.equals(o.revisionToolFilePath)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                \u0026\u0026 historyFilePath.equals(o.historyFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return Objects.hash(guiSettings, revisionToolFilePath, historyFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + revisionToolFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        sb.append(\"\\nLocal data history file location : \" + historyFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "khiangleon": 7,
      "-": 79,
      "ShaunNgTX": 12
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/Answer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/** Answer class used to create answers for {@code Answerable}s. **/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Answer {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Message to be shown if user-added answer is not is in the wrong format**/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Answers must be less than 150 characters \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \", should be not be blank and cannot be duplicates.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Validation Regex for the Answer class used to validate user-added answers. **/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?\u003d.{0,150}$)(?\u003d\\\\s*\\\\S).*$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public final String answer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Constructs a {@code Ansewr}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param answer A valid answer."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Answer(String answer) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        checkArgument(isValidAnswer(answer), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static boolean isValidAnswer(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || (other instanceof Answer // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 answer.equals(((Answer) other).answer)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answer.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 51,
      "jxofficial": 4
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/AnswerChecker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neoshh"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import edu.stanford.nlp.ie.NumberNormalizer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import edu.stanford.nlp.ling.CoreAnnotations;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import edu.stanford.nlp.ling.CoreLabel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import edu.stanford.nlp.pipeline.CoreDocument;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import edu.stanford.nlp.pipeline.StanfordCoreNLP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import me.xdrop.fuzzywuzzy.FuzzySearch;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neoshh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neoshh"
        },
        "content": " * Used to check saq answers"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neoshh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neoshh"
        },
        "content": "public class AnswerChecker {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * Question of the current Answerable"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    private static List\u003cCoreLabel\u003e question;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * Get StanfordCoreNLP pipeline to process String"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    private static StanfordCoreNLP pipeline \u003d Pipeline.getPipeline();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * Processes the question of current answerable and return as a list of tokenized words"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * It will return list of type CoreLabel"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * @param question String of the question"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * @return List containing each words of the question"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    private static List\u003cCoreLabel\u003e processQuestion(String question) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        CoreDocument coreDocument \u003d new CoreDocument(question.replaceAll(\"\\\\s*\\\\p{Punct}+\\\\s*$\", \"\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                .toLowerCase().trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        pipeline.annotate(coreDocument);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        List\u003cCoreLabel\u003e coreLabelList \u003d coreDocument.tokens();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        return coreLabelList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * Processes the String to trim trailing and leading whitespaces, covert all characters to lowercase,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * Checks for numbers that are in alphabets form and changes it to digits form."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * It will return the processed String"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * @param stringToBeProcessed String to be processed"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * @return processed String"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    private static String processString(String stringToBeProcessed) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        StringBuilder processedString \u003d new StringBuilder(stringToBeProcessed"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                .replaceAll(\"\\\\s*\\\\p{Punct}+\\\\s*$\", \"\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        CoreDocument coreDocument \u003d new CoreDocument(processedString.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        pipeline.annotate(coreDocument);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        List\u003cCoreLabel\u003e coreLabelList \u003d coreDocument.tokens();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        for (CoreLabel coreLabel : coreLabelList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            String pos \u003d coreLabel.get(CoreAnnotations.PartOfSpeechAnnotation.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            if (pos.equals(\"CD\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                Number num \u003d NumberNormalizer.wordToNumber(coreLabel.originalText());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                coreLabel.setOriginalText(num.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        Iterator\u003cCoreLabel\u003e iter \u003d coreLabelList.iterator();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            CoreLabel coreLabel \u003d iter.next();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            for (CoreLabel word : question) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                if (coreLabel.originalText().equals(word.originalText())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                    iter.remove();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        processedString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        for (CoreLabel coreLabel : coreLabelList) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            processedString.append(coreLabel.originalText()).append(\" \");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        return processedString.toString().toLowerCase().trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * Checks if user answer matches the correct answer using fuzzy matching technique."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * It will return true if match percentage passes the matchedPercentageThreshold"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * @param userInput String of user\u0027s input to the question"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * @param correctAnswer String of correct answer"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * @return true or false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    private static boolean isMatched(String userInput, String correctAnswer) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "neoshh"
        },
        "content": "         * Used to determine if user input answer is correct or not"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "neoshh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        int matchedPercentageThreshold \u003d 80;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        int matchedPercentage \u003d FuzzySearch.weightedRatio(userInput, correctAnswer);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        if (matchedPercentage \u003e matchedPercentageThreshold) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * Compares sentiment value between two Strings."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * It will compare sentiment value (Very negative, Negative, Neutral, Positive, Very positive) between the"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * two Strings and return true if same sentiment and false otherwise."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * @param userInput String of user\u0027s input to the question"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * @param correctAnswer String of correct answer"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * @return true or false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    private static boolean hasSameSentiment(String userInput, String correctAnswer) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        CoreDocument userInputDocument \u003d new CoreDocument(userInput);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        pipeline.annotate(userInputDocument);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        CoreDocument correctAnswerDocument \u003d new CoreDocument(correctAnswer);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        pipeline.annotate(correctAnswerDocument);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        String sentimentValueOfUserInput \u003d userInputDocument.sentences().get(0).sentiment();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        String sentimentValueOfCorrectAnswer \u003d correctAnswerDocument.sentences().get(0).sentiment();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        if (sentimentValueOfUserInput.equals(\"Very negative\") || sentimentValueOfUserInput.equals(\"Negative\")) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            sentimentValueOfUserInput \u003d \"Negative\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            sentimentValueOfUserInput \u003d \"Positive\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        if (sentimentValueOfCorrectAnswer.equals(\"Very negative\") || sentimentValueOfCorrectAnswer.equals(\"Negative\")) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            sentimentValueOfCorrectAnswer \u003d \"Negative\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            sentimentValueOfCorrectAnswer \u003d \"Positive\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        return sentimentValueOfUserInput.equals(sentimentValueOfCorrectAnswer);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * Checks if user answer is correct or not."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * It will return true if answer is correct and false if answer is wrong"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * @param userInput user\u0027s answer to the question"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * @param answerable the current Answerable - and SAQ Answerable"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * @return true or false"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    public static boolean check(String userInput, Answerable answerable) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        question \u003d processQuestion(answerable.question.question);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        ArrayList\u003cAnswer\u003e correctAnswerList \u003d answerable.getCorrectAnswerList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        userInput \u003d processString(userInput);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        if (userInput.isBlank()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        for (Answer answer : correctAnswerList) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            String correctAnswer \u003d processString(answer.getAnswer());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            if (hasSameSentiment(userInput, correctAnswer) \u0026\u0026 isMatched(userInput, correctAnswer)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "neoshh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "neoshh": 173
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/Answerable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * @author wilfredbtan"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents a Answerable in the Test Bank."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public abstract class Answerable {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected final Question question;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected final Difficulty difficulty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected final ArrayList\u003cAnswer\u003e correctAnswerList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected final ArrayList\u003cAnswer\u003e wrongAnswerList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected final ArrayList\u003cAnswer\u003e combinedAnswerList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected final Set\u003cCategory\u003e categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Answerable(Question question, ArrayList\u003cAnswer\u003e correctAnswerList,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                      ArrayList\u003cAnswer\u003e wrongAnswerList, Difficulty difficulty, Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        requireAllNonNull(question, difficulty, categories);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.correctAnswerList \u003d correctAnswerList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.wrongAnswerList \u003d wrongAnswerList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cAnswer\u003e shuffledList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        shuffledList.addAll(correctAnswerList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        shuffledList.addAll(wrongAnswerList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Collections.shuffle(shuffledList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.combinedAnswerList \u003d shuffledList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.categories.addAll(categories);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ArrayList\u003cAnswer\u003e getCorrectAnswerList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return correctAnswerList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ArrayList\u003cAnswer\u003e getWrongAnswerList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return wrongAnswerList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ArrayList\u003cAnswer\u003e getCombinedAnswerList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return combinedAnswerList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Difficulty getDifficulty() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return difficulty;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Set\u003cCategory\u003e getCategories() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return Collections.unmodifiableSet(categories);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Creates an answerable based on its type using the factory design pattern."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param questionType the question type."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param question the question description."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param correctAnswerList the list of correct answers."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param wrongAnswerList the list of wrong answers."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param difficulty the difficulty of the answerable."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param categories the categories of the answerables."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return Answerable initiated with the inputs provided."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static Answerable create(String questionType, Question question, ArrayList\u003cAnswer\u003e correctAnswerList,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            ArrayList\u003cAnswer\u003e wrongAnswerList, Difficulty difficulty, Set\u003cCategory\u003e categories) throws"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        switch (questionType) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"mcq\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new Mcq(question, correctAnswerList, wrongAnswerList, difficulty, categories);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"saq\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new Saq(question, correctAnswerList, difficulty, categories);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case \"tf\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return new TrueFalse(question, correctAnswerList, difficulty, categories);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new ParseException(\"Invalid answerable\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Returns true if question has been answered correctly and false if it has been answered wrongly."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param selectedAnswer answer that user selected."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return true if correct or false if wrong."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isAnswerCorrect(Answer selectedAnswer) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(selectedAnswer);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (correctAnswerList.contains(selectedAnswer)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if both answerables with the same question have at least one other identity field that is the same."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * This defines a weaker notion of equality between two answerables."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isSameAnswerable(Answerable otherAnswerable) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (otherAnswerable \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (otherAnswerable \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!(otherAnswerable.getClass().equals(this.getClass()))) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if both Answerables have the same identity and data fields."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * This defines a stronger notion of equality between two Answerables."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!(other instanceof Answerable)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable otherAnswerable \u003d (Answerable) other;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return otherAnswerable.getQuestion().equals(getQuestion())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 otherAnswerable.getCorrectAnswerList().equals(getCorrectAnswerList())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 otherAnswerable.getWrongAnswerList().equals(getWrongAnswerList())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 otherAnswerable.getDifficulty().equals(getDifficulty())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u0026\u0026 otherAnswerable.getCategories().equals(getCategories());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return Objects.hash(question, correctAnswerList, wrongAnswerList, difficulty, categories);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 102,
      "jxofficial": 6,
      "khiangleon": 3,
      "-": 47,
      "ShaunNgTX": 1
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/Difficulty.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents a Questions\u0027s Difficulty in the test bank."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDifficulty(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Difficulty implements Comparable\u003cDifficulty\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            \"Difficulty should only contain numbers, and it should only be 1, 2, or 3\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[1-3]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public final String difficulty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Constructs a {@code Difficulty}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param difficulty A valid difficulty."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Difficulty(String difficulty) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(difficulty);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        checkArgument(isValidDifficulty(difficulty), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if a given string is a valid difficulty."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static boolean isValidDifficulty(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return difficulty;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || (other instanceof Difficulty // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 difficulty.equals(((Difficulty) other).difficulty)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return difficulty.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public int compareTo(Difficulty o) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.difficulty.compareTo(o.difficulty);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 24,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/Mcq.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * @author wilfredbtan"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents a Answerable in the Test Bank."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Mcq extends Answerable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"MCQs should only have 1 correct answer and 4 options in total\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \" with no duplicate answers.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Mcq(Question question, ArrayList\u003cAnswer\u003e correctAnswerList, ArrayList\u003cAnswer\u003e wrongAnswerList,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "               Difficulty difficulty, Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(question, correctAnswerList, wrongAnswerList, difficulty, categories);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Checks whether the input Mcq is valid"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param mcq the mcq to validate."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return boolean to indicate whether Mcq is valid or not."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static boolean isValidMcq(Mcq mcq) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(mcq);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (mcq.getCorrectAnswerList().size() !\u003d 1"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || mcq.getWrongAnswerList().contains(mcq.getCorrectAnswerList().get(0))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || mcq.getWrongAnswerList().size() !\u003d 3) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if both {@code Mcq}s with the same question have at least one other identity field that is the same."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * This defines a weaker notion of equality between two {@code Mcq}s."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isSameAnswerable(Answerable otherAnswerable) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        boolean generalAnswerableCheck \u003d super.isSameAnswerable(otherAnswerable);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return generalAnswerableCheck \u0026\u0026 otherAnswerable.getQuestion().equals(getQuestion())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 otherAnswerable.getCorrectAnswerList().equals(getCorrectAnswerList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Returns an entire text string of the answerable (question with all possible answers,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * difficulty level and categories)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @return answerable string"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        builder.append(\"Type: MCQ\\n\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\"Question: \")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(getQuestion() + \"\\n\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\"Correct Answer: \" + getCorrectAnswerList() + \"\\n\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\"Wrong Answers: \" + getWrongAnswerList() + \"\\n\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\"Difficulty: \")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(getDifficulty() + \"\\n\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\"Categories: \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        getCategories().forEach(builder::append);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 67,
      "khiangleon": 5,
      "ShaunNgTX": 1
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/Pipeline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neoshh"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import java.util.Properties;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import edu.stanford.nlp.pipeline.StanfordCoreNLP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neoshh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neoshh"
        },
        "content": " * Creates a pipeline to process user input"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neoshh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neoshh"
        },
        "content": "public class Pipeline {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    private static Properties properties;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    private static String propertiesName \u003d \"tokenize, ssplit, parse, sentiment, pos, lemma\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    private static StanfordCoreNLP pipeline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    private Pipeline() { }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        properties \u003d new Properties();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        properties.setProperty(\"annotators\", propertiesName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    public static StanfordCoreNLP getPipeline() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        if (pipeline \u003d\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            pipeline \u003d new StanfordCoreNLP(properties);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        return pipeline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neoshh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neoshh": 29
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/Question.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents a Answerable\u0027s name in the revision tool."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidQuestion(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Questions must be less that 300 characters and \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \"should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?\u003d.{0,300}$)(?\u003d\\\\s*\\\\S).*$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public final String question;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Constructs a {@code Question}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param question A valid question."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Question(String question) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        checkArgument(isValidQuestion(question), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if a given string is a valid question."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static boolean isValidQuestion(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || (other instanceof Question // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 question.equals(((Question) other).question)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return question.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 22,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/QuestionType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents the type of Question"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class QuestionType {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \"Question type should only be mcq, tf, or saq\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * The first character of the question type must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?i)mcq|saq|tf\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Constructs a {@code QuestionType}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param type A valid question type."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public QuestionType(String type) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        checkArgument(isValidQuestionType(type), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.type \u003d type.toLowerCase();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if a given string is a valid question."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static boolean isValidQuestionType(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || (other instanceof QuestionType // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 type.equals(((QuestionType) other).type)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return type.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 57,
      "jxofficial": 3
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/Saq.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents a Answerable in the Test Bank."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class Saq extends Answerable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"SAQs should have at least one correct answer\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            + \" and no wrong answers.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    public static final String MESSAGE_INVALID_ANSWER_EXIT \u003d \"The answer cannot be \u0027exit\u0027. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            + \"\u0027Exit\u0027 is a special command\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    public static final String MESSAGE_INVALID_ANSWER \u003d \"Answers should not appear in the question.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Saq(Question question, ArrayList\u003cAnswer\u003e correctAnswerList, Difficulty difficulty,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "               Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(question, correctAnswerList, new ArrayList\u003c\u003e(), difficulty, categories);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * Checks whether the input Mcq is valid"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * @param saq the saq to validate."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * @return boolean to indicate whether Mcq is valid or not."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    public static boolean isValidSaq(Saq saq) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        requireNonNull(saq);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (saq.getCorrectAnswerList().isEmpty()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                || !saq.getWrongAnswerList().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isAnswerCorrect(Answer selectedAnswer) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        boolean answerIsCorrect \u003d AnswerChecker.check(selectedAnswer.toString(), this);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        return answerIsCorrect;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if both {@code Saq}s with the same question have at least one other identity field that is the same."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * This defines a weaker notion of equality between two {@code Saq}s."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isSameAnswerable(Answerable otherAnswerable) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        boolean generalAnswerableCheck \u003d super.isSameAnswerable(otherAnswerable);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return generalAnswerableCheck \u0026\u0026 otherAnswerable.getQuestion().equals(getQuestion());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Returns an entire text string of the answerable (question with all possible answers,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * difficulty level and categories)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @return answerable string"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        builder.append(\"Type: SAQ\\n\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\"Question: \")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(getQuestion() + \"\\n\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\"Correct Answers: \")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(getCorrectAnswerList() + \"\\n\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\"Difficulty: \")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(getDifficulty() + \"\\n\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\"Categories: \");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        getCategories().forEach(builder::append);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 44,
      "neoshh": 24,
      "jxofficial": 2,
      "khiangleon": 7
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/TrueFalse.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/** TrueFalse class used to create True and False answerables. **/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class TrueFalse extends Answerable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Message to be shown if user-added True and False {@code Answerable}is not is in the wrong format**/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \" T/F answer\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + \" should only be True/False (case insensitive) and can only have 1 answer.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public TrueFalse(Question question, ArrayList\u003cAnswer\u003e correctAnswerList,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                     Difficulty difficulty, Set\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(question, correctAnswerList, new ArrayList\u003c\u003e(), difficulty, categories);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean isAnswerCorrect(Answer selectedAnswer) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return correctAnswerList.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                         .map(Answer::toString)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                         .anyMatch(ans -\u003e ans.equalsIgnoreCase(selectedAnswer.toString()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Empty TrueFalse Answer used for validation."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return empty TrueFalse Answer."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static boolean isValidTrueFalse(TrueFalse trueFalse) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(trueFalse);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String trueFalseRegex \u003d \"(?i)(true|false)\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (trueFalse.getCorrectAnswerList().size() !\u003d 1 || !trueFalse.getWrongAnswerList().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (trueFalse.getCorrectAnswerList().stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .anyMatch(a -\u003e a.getAnswer().matches(trueFalseRegex))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || trueFalse.getWrongAnswerList().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .anyMatch(a -\u003e a.getAnswer().matches(trueFalseRegex))) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if both {@code TrueFalse} questions have the same question only."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * This defines a weaker notion of equality between two {@code TrueFalse} questions."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isSameAnswerable(Answerable otherAnswerable) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        boolean generalAnswerableCheck \u003d super.isSameAnswerable(otherAnswerable);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return generalAnswerableCheck \u0026\u0026 otherAnswerable.getQuestion().equals(getQuestion());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        builder.append(\"Type: T/F\\n\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .append(\"Question: \")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(getQuestion() + \"\\n\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(\"Correct Answer: \" + getCorrectAnswerList() + \"\\n\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .append(\"Difficulty: \")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(getDifficulty() + \"\\n\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .append(\"Categories: \");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        getCategories().forEach(builder::append);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 39,
      "jxofficial": 35
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/UniqueAnswerableList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.exceptions.AnswerableNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.answerable.exceptions.DuplicateAnswerableException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A list of answerables that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * A answerable is considered unique by comparing using {@code Answerable#isSameAnswerable(Answerable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * As such, adding and updating of answerables uses Answerable#isSameAnswerable(Answerable) for equality"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * so as to ensure that the answerable being added or updated is unique in terms of identity in the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * UniqueAnswerableList. However, the removal of a answerable uses Answerable#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * as to ensure that the answerable with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * @see Answerable#isSameAnswerable(Answerable)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class UniqueAnswerableList implements Iterable\u003cAnswerable\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final ObservableList\u003cAnswerable\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final ObservableList\u003cAnswerable\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if the list contains an equivalent answerable as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean contains(Answerable toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAnswerable);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Adds a answerable to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * The answerable must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void add(Answerable toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new DuplicateAnswerableException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Replaces the answerable {@code target} in the list with {@code editedAnswerable}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * The answerable identity of {@code editedAnswerable} must not be the same as"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * another existing answerable in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerable(Answerable target, Answerable editedAnswerable) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireAllNonNull(target, editedAnswerable);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new AnswerableNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!target.isSameAnswerable(editedAnswerable) \u0026\u0026 contains(editedAnswerable)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new DuplicateAnswerableException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        internalList.set(index, editedAnswerable);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Removes the equivalent answerable from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * The answerable must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void remove(Answerable toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new AnswerableNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerables(UniqueAnswerableList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Replaces the contents of this list with {@code answerables}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * {@code answerables} must not contain duplicate answerables."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerables(List\u003cAnswerable\u003e answerables) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireAllNonNull(answerables);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!answerablesAreUnique(answerables)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new DuplicateAnswerableException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        internalList.setAll(answerables);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ObservableList\u003cAnswerable\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Iterator\u003cAnswerable\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || (other instanceof UniqueAnswerableList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueAnswerableList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if {@code answerables} contains only unique answerables."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private boolean answerablesAreUnique(List\u003cAnswerable\u003e answerables) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (int i \u003d 0; i \u003c answerables.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            for (int j \u003d i + 1; j \u003c answerables.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                if (answerables.get(i).isSameAnswerable(answerables.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 132,
      "khiangleon": 7
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/exceptions/AnswerableNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Signals that the operation is unable to find the specified answerable."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class AnswerableNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 6
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/exceptions/DuplicateAnswerableException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Signals that the operation will result in duplicate Answerables (Answerables are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class DuplicateAnswerableException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public DuplicateAnswerableException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(\"Operation would result in duplicate answerables\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 9,
      "khiangleon": 2
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/predicates/CategoryPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Tests that a {@code Answerable}\u0027s {@code category} matches the category given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class CategoryPredicate implements Predicate\u003cAnswerable\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final Category category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public CategoryPredicate(Category category) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean test(Answerable answerable) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return answerable.getCategories()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                         .stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                         .map(category -\u003e category.category)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                         .anyMatch(categoryName -\u003e categoryName.equalsIgnoreCase(this.category.category));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                || (other instanceof CategoryPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u0026\u0026 category.equals(((CategoryPredicate) other).category)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 5,
      "jxofficial": 30
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/predicates/DifficultyPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Tests that a {@code Answerable}\u0027s {@code difficulty} matches the difficulty given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class DifficultyPredicate implements Predicate\u003cAnswerable\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final Difficulty level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public DifficultyPredicate(Difficulty level) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean test(Answerable answerable) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return level.equals(answerable.getDifficulty());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                || (other instanceof DifficultyPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u0026\u0026 level.equals(((DifficultyPredicate) other).level)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "jxofficial": 25,
      "khiangleon": 3
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/answerable/predicates/QuestionContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Tests that a {@code Answerable}\u0027s {@code Question} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class QuestionContainsKeywordsPredicate implements Predicate\u003cAnswerable\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public QuestionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean test(Answerable answerable) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(answerable.getQuestion().question, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || (other instanceof QuestionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 keywords.equals(((QuestionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 10,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/category/Category.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents a category in the revision tool."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidCategory(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Category names should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?\u003d\\\\s*\\\\S).*$\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public final String category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Constructs a {@code category}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param category A valid category name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Category(String category) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        checkArgument(isValidCategory(category), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Returns true if a given string is a valid category name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static boolean isValidCategory(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                || (other instanceof Category // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 category.equals(((Category) other).category)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return category.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return \u0027[\u0027 + category + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 16,
      "jxofficial": 38
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/quiz/ArcadeMode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/** ArcadeMode class which has increasing difficulty each level and ends any time a user gets a question wrong. **/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class ArcadeMode extends Mode {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Constructs an {@code ArcadeMode}.Uses defensive programming to immediately provide default values to"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * time and combinedPredicate."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ArcadeMode() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(Modes.ARCADE.toString());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.time \u003d 30;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.combinedPredicate \u003d NormalMode.NORMAL_MODE_PREDICATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public int getTime(int nextLevel) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        switch(nextLevel) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return 25;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return 20;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return this.time;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 25,
      "jxofficial": 1
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/quiz/CustomMode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * CustomMode which can be adapted according to user input."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class CustomMode extends Mode {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public CustomMode() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(Modes.CUSTOM.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.time \u003d NormalMode.NORMAL_MODE_TIME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.combinedPredicate \u003d NormalMode.NORMAL_MODE_PREDICATE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises a CustomMode with the time and predicate provided."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param value value of the custom mode is \"custom\" by default."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param time amount of time per level provided by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param combinedPredicate predicate provided by the user used to filter the quiz questions."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public CustomMode(String value, int time, Predicate\u003cAnswerable\u003e combinedPredicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.combinedPredicate \u003d combinedPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the combinedPredicate for the custom mode."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param combinedPredicate combinedPredicate that will be set."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return {@Mode} object with its combinedPredicate set."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Mode withCombinedPredicate(Predicate\u003cAnswerable\u003e combinedPredicate) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.combinedPredicate \u003d combinedPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Sets the time for the custom mode."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param time time that will be set."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return {@Mode} object with its time set."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Mode withTime(int time) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Builds the CustomMode with the parameters provided."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return CustomMode according to user input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Mode build() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return new CustomMode(value, time, combinedPredicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public int getTime(int nextLevel) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 24,
      "jxofficial": 38
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/quiz/GraphList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * To compute lists of historical scores according to difficulty levels."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "public class GraphList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final ObservableList\u003cDouble\u003e totalScoreList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final ObservableList\u003cDouble\u003e diff1List \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final ObservableList\u003cDouble\u003e diff2List \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final ObservableList\u003cDouble\u003e diff3List \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final ObservableList\u003cObservableList\u003cDouble\u003e\u003e graphList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private Iterator\u003cStatistics\u003e statisticsIterator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public GraphList(ObservableList\u003cStatistics\u003e statisticsList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        statisticsIterator \u003d statisticsList.iterator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        while (statisticsIterator.hasNext()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            Statistics next \u003d statisticsIterator.next();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            totalScoreList.add(next.getResult());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            diff1List.add(next.getResult1());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            diff2List.add(next.getResult2());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            diff3List.add(next.getResult3());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        graphList.add(totalScoreList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        graphList.add(diff1List);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        graphList.add(diff2List);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        graphList.add(diff3List);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public ObservableList\u003cObservableList\u003cDouble\u003e\u003e getGraphList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return graphList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 40
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/quiz/Mode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents the mode of a quiz in the Revision Tool."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMode(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public abstract class Mode {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Mode can only be normal / arcade / custom\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?i)\\\\bnormal\\\\b|\\\\barcade\\\\b|^\\\\bcustom\\\\b\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected int time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    protected Predicate\u003cAnswerable\u003e combinedPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Constructs a {@code Mode}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param value A valid mode."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Mode(String value) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        checkArgument(isValidMode(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Returns true if a given string is a valid mode."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static boolean isValidMode(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Predicate\u003cAnswerable\u003e getCombinedPredicate() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return combinedPredicate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public abstract int getTime(int nextLevel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || (other instanceof Mode // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 value.equals(((Mode) other).value)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 59,
      "jxofficial": 10
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/quiz/Modes.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/** Enumeration of valid quiz modes. **/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public enum Modes {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    NORMAL(\"normal\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    ARCADE(\"arcade\"),"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    CUSTOM(\"custom\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private String mode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    Modes(String mode) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.mode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 19
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/quiz/NormalMode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.model.Model.PREDICATE_SHOW_ALL_ANSWERABLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/** NormalMode class which sets a default time and initialises the quiz with all questions in the question bank.**/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class NormalMode extends Mode {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final int NORMAL_MODE_TIME \u003d 30;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Predicate\u003cAnswerable\u003e NORMAL_MODE_PREDICATE \u003d PREDICATE_SHOW_ALL_ANSWERABLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Constructs a {@code NormalMode}. Uses defensive programming to immediately provide default values to"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * time and combinedPredicate."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public NormalMode() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(Modes.NORMAL.toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.time \u003d NORMAL_MODE_TIME;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.combinedPredicate \u003d NORMAL_MODE_PREDICATE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public int getTime(int nextLevel) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 16,
      "jxofficial": 12
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/quiz/Statistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Represents the statistics of a quiz completed in the Revision Tool."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidStatistics (String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Statistics are made up of total scores and scores of \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            + \"difficulty levels 1, 2, 3.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * The first character of the statistics must not be a whitespace,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * 1 or more digits before and after the decimal point."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?i)\\\\d+\\\\/\\\\d+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private int score;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private int total;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private double result;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private int score1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private int total1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private double result1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private int score2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private int total2;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private double result2;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private int score3;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private int total3;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private double result3;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public Statistics() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.score \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.total \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.score1 \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.total1 \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.score2 \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.total2 \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.score3 \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.total3 \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.result \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.result1 \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.result2 \u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.result3 \u003d 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public Statistics(String scores) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        requireNonNull(scores);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        checkArgument(isValidStatistics(scores), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        String[] splitStr \u003d scores.split(\",\", 4);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        String[] splitScore \u003d splitStr[0].split(\"/\", 2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        String[] splitScore1 \u003d splitStr[1].split(\"/\", 2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        String[] splitScore2 \u003d splitStr[2].split(\"/\", 2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        String[] splitScore3 \u003d splitStr[3].split(\"/\", 2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.score \u003d Integer.parseInt(splitScore[0]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.total \u003d Integer.parseInt(splitScore[1]);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.score1 \u003d Integer.parseInt(splitScore1[0]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.total1 \u003d Integer.parseInt(splitScore1[1]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.score2 \u003d Integer.parseInt(splitScore2[0]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.total2 \u003d Integer.parseInt(splitScore2[1]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.score3 \u003d Integer.parseInt(splitScore3[0]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.total3 \u003d Integer.parseInt(splitScore3[1]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.result \u003d (double) score / total;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.result1 \u003d (double) score1 / total1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.result2 \u003d (double) score2 / total2;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.result3 \u003d (double) score3 / total3;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public double getResult() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return result * 100.0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public double getResult1() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return result1 * 100.0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public double getResult2() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return result2 * 100.0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public double getResult3() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return result3 * 100.0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public String getPriority() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        double priority \u003d Math.min(result1, Math.min(result2, result3));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        if (priority \u003d\u003d result1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            return \"Difficulty 1\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        } else if (priority \u003d\u003d result2) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            return \"Difficulty 2\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        } else if (priority \u003d\u003d result3) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            return \"Difficulty 3\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            return \"Cannot be determined\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Returns true if a given string is a valid statistics."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static boolean isValidStatistics(String test) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        String[] splitStr \u003d test.split(\",\", 4);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return splitStr[0].matches(VALIDATION_REGEX) \u0026\u0026 splitStr[1].matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                \u0026\u0026 splitStr[2].matches(VALIDATION_REGEX) \u0026\u0026 splitStr[3].matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Converting the statistics into a string to be stored later."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @return a fixed string format."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return String.format(score + \"/\" + total + \",\" + score1 + \"/\" + total1 + \",\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        + score2 + \"/\" + total2 + \",\" + score3 + \"/\" + total3);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Updates the scores after every answer to a question."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @param currentAnswerable the current question."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @param quizList the entire list of questions during a quiz attempt."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void updateStatistics(Answerable currentAnswerable, ObservableList\u003cAnswerable\u003e quizList) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.score++;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.total \u003d quizList.size();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        switch (currentAnswerable.getDifficulty().difficulty) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        case \"1\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            score1++;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            this.total1 \u003d quizList.filtered(a -\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    a.getDifficulty().difficulty.equals(currentAnswerable.getDifficulty().difficulty)).size();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        case \"2\":"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            score2++;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            this.total2 \u003d quizList.filtered(a -\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    a.getDifficulty().difficulty.equals(currentAnswerable.getDifficulty().difficulty)).size();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        case \"3\":"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            score3++;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            this.total3 \u003d quizList.filtered(a -\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    a.getDifficulty().difficulty.equals(currentAnswerable.getDifficulty().difficulty)).size();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            assert false : currentAnswerable.getDifficulty().difficulty;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.result \u003d (double) score / total;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.result1 \u003d (double) score1 / total1;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.result2 \u003d (double) score2 / total2;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.result3 \u003d (double) score3 / total3;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                || (other instanceof Statistics // instanceof handles nulls"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                \u0026\u0026 score \u003d\u003d (((Statistics) other).score)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                \u0026\u0026 total \u003d\u003d (((Statistics) other).total)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                \u0026\u0026 score1 \u003d\u003d (((Statistics) other).score1)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                \u0026\u0026 total1 \u003d\u003d (((Statistics) other).total1)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                \u0026\u0026 score2 \u003d\u003d (((Statistics) other).score2)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                \u0026\u0026 total2 \u003d\u003d (((Statistics) other).total2)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                \u0026\u0026 score3 \u003d\u003d (((Statistics) other).score3)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                \u0026\u0026 total3 \u003d\u003d (((Statistics) other).total3)); // state check"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return String.format(score + \"/\" + total + \",\" + score1 + \"/\" + total1 + \",\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                + score2 + \"/\" + total2 + \",\" + score3 + \"/\" + total3).hashCode();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 178
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/quiz/StatisticsList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * To support list operations."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "public class StatisticsList implements Iterable\u003cStatistics\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final ObservableList\u003cStatistics\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final ObservableList\u003cStatistics\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return internalUnmodifiableList.isEmpty();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Adds a statistics to the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void add(Statistics toAdd) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Resets all statistics on the list with a new list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @param replacement new list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void setStatistics(StatisticsList replacement) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Replaces the contents of this list with {@code statistics}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void setStatistics(List\u003cStatistics\u003e statistics) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        requireAllNonNull(statistics);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        internalList.setAll(statistics);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public ObservableList\u003cStatistics\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Returns an iterator over elements of type {@code T}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @return an Iterator."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public Iterator\u003cStatistics\u003e iterator() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                || (other instanceof StatisticsList // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                \u0026\u0026 internalList.equals(((StatisticsList) other).internalList));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 79
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.ReadOnlyRevisionTool;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.RevisionTool;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.model.answerable.Answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.model.answerable.Mcq;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.model.answerable.Saq;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.model.answerable.TrueFalse;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * Contains utility methods for populating {@code RevisionTool} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static Answerable[] getSampleAnswerables() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new Answerable[] {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"What type of project is AB3?\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"Brownfield\"))),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"Greenfield\"), new Answer(\"Blackfield\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"Whitefield\"))),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new Difficulty(\"1\"), getCategorySet(\"introduction\", \"Week 2\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is a delight of Software Engineering?\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"What you get of making things that are useful to others\"))),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"One must perform perfectly\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"One rarely controls the circumstances of his work or goal\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"The dependence upon others\"))),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new Difficulty(\"1\"), getCategorySet(\"introduction\", \"pros and cons\", \"Week 2\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is a woe of Software Engineering?\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"Finding nitty little bugs\"))),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"What you get of having to solve puzzles\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"What you get of working in such a tractable medium\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"What you get of having to keep learning always\"))),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new Difficulty(\"1\"), getCategorySet(\"introduction\", \"pros and cons\", \"Week 2\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"What does IDE stand for?\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"Integrated Development Environment\"))),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"Integrated Development Editor\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"Interchangeable Development Environment\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"Integrated Development Enhancement\"))),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new Difficulty(\"1\"), getCategorySet(\"implementation\", \"IDEs\", \"basic\", \"Week 2\")),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is not true?\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"Test cases can only be determined \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"by reviewing similar existing systems\"))),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"SUT stands for Software Under Test\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"A test case failure is a mismatch between the actual behaviour \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"and the expected behaviour\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"A test case failure may not always indicate a bug/defect in the SUT\"))),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new Difficulty(\"3\"), getCategorySet(\"quality assurance\", \"testing\", \"Week 2\")),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is true?\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"A regression is an unintended and undesirable side effect \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"of a modification\"))),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"Regression testing is the re-testing of the \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"software to fix regression bugs\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"Regression testing must be automated\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"Regression testing is less effective when done frequently\"))),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new Difficulty(\"2\"), getCategorySet(\"quality assurance\", \"testing\", \"Week 2\")),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            new TrueFalse(new Question(\"The term Design Patterns was popularized by a book whose authors are \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"also known as the ‘Three Amigos’.\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"false\"))),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new Difficulty(\"2\"), getCategorySet(\"Design Patterns\", \"Week 9\")),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is not true?\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                        .asList(new Answer(\"Downloading a copy of a remote repo to your computer is \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                + \"called forking\"))),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                        new Answer(\"A local repo can pull from multiple remote repositories\"),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                        new Answer(\"It is possible to set up a Git server on your own computer\"),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                        new Answer(\"A pull request is mechanism for contributing code to a remote repo.\"))),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                new Difficulty(\"3\"), getCategorySet(\"project management\", \"revision control\", \"Week 2\")),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is not true?\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"To see the working folder at specific commit, \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"we ‘revert’ to that commit.\"))),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"The git history only contains specific points that you \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"committed to the history.\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"After you initialize a git repo , all files in that folder are \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                                    + \"automatically tracked by Git.\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"Git can show you the difference between two adjacent commits in the \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"version history.\"))),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new Difficulty(\"3\"), getCategorySet(\"project management\", \"revision control\", \"Week 2\")),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is true?\"),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"One aim of adopting a coding standard is to make the \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"entire code base look like it was written by one person.\"))),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"A developer should understand the importance of \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"following a coding standard. However, there is no need to follow one.\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"It is better if each developer followed their own style of coding \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"so that the code can be traced to the author easily.\"),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"A coding standard is universal and not specific to any programming language\"))),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new Difficulty(\"2\"), getCategorySet(\"implementation\", \"code quality\", \"Week 3\")),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is true?\"),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"There are tools that can help to enforce some parts of a \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"coding standard e.g. indentation rules.\"))),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"It is better if each developer followed their \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"own style of coding so that the code can be traced to the author easily.\"),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"A developer should understand the importance of following a coding standard. \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"However, there is no need to follow one.\"),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"Company\u0027s coding standard can be vastly different from typical \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"industry practices as long as it is consistent throughout the whole company\"))),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new Difficulty(\"2\"), getCategorySet(\"implementation\", \"code quality\", \"Week 3\")),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            new TrueFalse(new Question(\"A UML sequence diagram can capture the interactions between multiple \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"objects for a given scenario, for example, an object calling a method of \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"another object.\"),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"true\"))),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new Difficulty(\"1\"), getCategorySet(\"UML\", \"Week 5\")),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            new Mcq(new Question(\"Which of the following is not true?\"),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"Git uses a serial no. matching the exact nano-second a commit \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                                    + \"was created to identify a commit.\"))),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"After you initialize a git repo in a folder, \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                                    + \"all files in that folder are automatically tracked by Git.\"),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"The git history does not contain everything that happened to the \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                                    + \"tracked files. It only contains specific points that you committed to \""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                                    + \"the history.\"),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"Git can show you the difference between two adjacent commits in the \""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                                    + \"version history.\"))),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new Difficulty(\"3\"), getCategorySet(\"project management\", \"revision control\", \"Week 2\")),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            new TrueFalse(new Question(\"As per the textbook, a log file is like the auto-pilot system of an \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"airplane.\"),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"false\"))),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new Difficulty(\"1\"), getCategorySet(\"Logging\", \"Week 5\")),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            new TrueFalse(new Question(\"OODMs represents the class structure of the problem domain.\"),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"true\"))),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new Difficulty(\"2\"), getCategorySet(\"Modeling\", \"OODM\", \"Week 8\")),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is not true?\"),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"There is no need for developer testing if there are \""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"separate testers.\"))),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"Developer testing is the testing done by the \""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"developers themselves.\"),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"A downside of developer testing: A developer may subconsciously test \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"only situations that she knows to work (i.e. test it too \u0027gently\u0027)\"),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"It is better to do earlier testing\"))),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new Difficulty(\"1\"), getCategorySet(\"quality assurance\", \"testing\", \"Week 3\")),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            new TrueFalse(new Question(\"XP can be divided into twelve simple rules.\"),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"false\"))),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new Difficulty(\"3\"), getCategorySet(\"Project Management\", \"XP\", \"Week 9\")),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Mcq(new Question(\"Which of the following is not true?\"),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            .asList(new Answer(\"A test driver is the person that ‘drives’ (or ‘in charge of’) \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"the testing process, usually, a test engineer.\"))),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"When using JUnit for a class Foo, the common practice is to create a \""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                                    + \"FooTest class, which will contain various test methods to test the Foo class.\"),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"The following method name (found in a JUnit test class) is compliant \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                                    + \"with the Java coding standard. \u0027intDivision_zeroDivisor_exceptionThrown\u0027\"),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                            new Answer(\"If the class Box depends on the class Lid, unit testing the Box class \""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                    + \"should be done in isolation from the Lid class.\"))),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new Difficulty(\"3\"), getCategorySet(\"quality assurance\", \"testing\", \"Week 3\")),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            new TrueFalse(new Question(\"Consider a Java method isPrime(int i) that returns true if i is a prime \""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"number. ‘All non-int values’ is a possible EP for testing this method.\"),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"false\"))),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new Difficulty(\"3\"), getCategorySet(\"Project Management\", \"XP\", \"Week 9\")),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            new Saq(new Question(\"What diagram is used to represent a software system?\"),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"UML Diagram\"))),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                    new Difficulty(\"1\"), getCategorySet(\"Diagrams\")),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            new Saq(new Question(\"Name one functional testing used in software engineering.\"),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"Unit Testing\"), new Answer(\"Integration Testing\"),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                            new Answer(\"System Testing\"), new Answer(\"Sanity Testing\"),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                            new Answer(\"Smoke Testing\"), new Answer(\"Interface Testing\"),"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                            new Answer(\"Regression Testing\"), new Answer(\"Acceptance Testing\"))),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                    new Difficulty(\"2\"), getCategorySet(\"Software Testing\")),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            new Saq(new Question(\"One of your teammates is proposing to use a recently-released “cool” UI \""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                    + \"framework for your class project. Name one disadvantage of this idea.\"),"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"Learning curve may be steep\"),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                            new Answer(\"May not be stable\"),"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                            new Answer(\"Performance penalties\"),"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                            new Answer(\"Might interfere with learning objectives of the module\"),"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                            new Answer(\"May not allow us to do exactly what we want\"))),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                    new Difficulty(\"3\"), getCategorySet(\"Framework\")),"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            new Saq(new Question(\"The process of checking that the software meets the specification \""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                    + \"is what type of testing?\"),"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"Verification Testing\"))),"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                    new Difficulty(\"1\"), getCategorySet(\"Software Testing\")),"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            new Saq(new Question(\"What does Boundary Value Analysis suggests?\"),"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"When picking test inputs from an equivalence partition,\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                            + \" values near boundaries are more likely to find bugs.\"))),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                    new Difficulty(\"2\"), getCategorySet(\"Equivalence Partition\", \"Test Cases\","
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                    \"Boundary Value Analysis\")),"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            new Saq(new Question(\"An application accepts integer values between -9999 to 9999. \""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                    + \"How many equivalence partition are there?\"),"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                    new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"Three\"))),"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                    new Difficulty(\"1\"), getCategorySet(\"Equivalence Partition\", \"Test Cases\")),"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public static ReadOnlyRevisionTool getSampleRevisionTool() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        RevisionTool sampleAb \u003d new RevisionTool();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (Answerable sampleAnswerable : getSampleAnswerables()) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            sampleAb.addAnswerable(sampleAnswerable);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Returns a category set containing the list of strings given."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static Set\u003cCategory\u003e getCategorySet(String... strings) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .map(Category::new)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 135,
      "neoshh": 42,
      "jxofficial": 4,
      "khiangleon": 43,
      "-": 22,
      "ShaunNgTX": 5
    }
  },
  {
    "path": "src/main/java/seedu/revision/model/util/SampleHistoryUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.History;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.quiz.Statistics;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Contains utility methods for populating {@code History} with sample data."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "public class SampleHistoryUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static Statistics[] getSampleStatistics() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return new Statistics[] {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Statistics(\"13/19,7/7,5/5,1/7\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Statistics(\"10/19,3/7,3/5,4/7\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Statistics(\"17/19,6/7,5/5,6/7\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Statistics(\"15/19,5/7,4/5,6/7\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Statistics(\"15/19,5/7,5/5,5/7\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Statistics(\"13/19,4/7,2/5,7/7\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Statistics(\"9/19,7/7,1/5,1/7\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Statistics(\"11/19,6/7,0/5,5/7\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Statistics(\"12/19,4/7,4/5,4/7\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Statistics(\"9/19,4/7,5/5,0/7\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Statistics(\"13/19,7/7,5/5,1/7\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Statistics(\"10/19,3/7,3/5,4/7\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Statistics(\"14/19,6/7,4/5,4/7\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Statistics(\"8/19,5/7,3/5,0/7\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Statistics(\"15/19,6/7,4/5,5/7\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Statistics(\"16/19,5/7,4/5,7/7\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Statistics(\"12/19,7/7,4/5,1/7\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Statistics(\"11/19,5/7,0/5,6/7\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Statistics(\"12/19,3/7,4/5,5/7\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new Statistics(\"11/19,6/7,5/5,0/7\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static ReadOnlyHistory getSampleHistory() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        History sampleHistory \u003d new History();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        for (Statistics sampleStatistics : getSampleStatistics()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            sampleHistory.addStatistics(sampleStatistics);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return sampleHistory;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 44
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/HistoryStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Represents a storage for {@link seedu.revision.model.History}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "public interface HistoryStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Returns the file path of the History data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    Path getHistoryFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Returns History data as a {@link ReadOnlyHistory}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    Optional\u003cReadOnlyHistory\u003e readHistory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @see #getHistoryFilePath()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    Optional\u003cReadOnlyHistory\u003e readHistory(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Saves the given {@link ReadOnlyHistory} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @param history cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    void saveHistory(ReadOnlyHistory history) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @see #saveHistory(ReadOnlyHistory)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    void saveHistory(ReadOnlyHistory history, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 44
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/JsonAdaptedAnswer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Jackson-friendly version of {@link Answer}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "class JsonAdaptedAnswer {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Constructs a {@code JsonAdaptedAnswer} with the given {@code answerDescription}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public JsonAdaptedAnswer(String answer) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Converts a given {@code answer} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public JsonAdaptedAnswer(Answer source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        answer \u003d source.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Converts this Jackson-friendly adapted category object into the model\u0027s {@code category} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted category."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Answer toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!Answer.isValidAnswer(answer)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new IllegalValueException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new Answer(answer);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 47,
      "khiangleon": 2
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/JsonAdaptedAnswerable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Mcq;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.TrueFalse;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Jackson-friendly version of {@link Answerable}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "class JsonAdaptedAnswerable {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Answerable\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final String questionType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final List\u003cJsonAdaptedAnswer\u003e correctAnswerSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final List\u003cJsonAdaptedAnswer\u003e wrongAnswerSet \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final String difficulty;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final List\u003cJsonAdaptedCategory\u003e categories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Constructs a {@code JsonAdaptedAnswerable} with the given answerable details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public JsonAdaptedAnswerable(@JsonProperty(\"questionType\") String questionType,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "             @JsonProperty(\"question\") String question,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "             @JsonProperty(\"correctAnswerSet\") List\u003cJsonAdaptedAnswer\u003e correctAnswerSet,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "             @JsonProperty(\"wrongAnswerSet\") List\u003cJsonAdaptedAnswer\u003e wrongAnswerSet,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "             @JsonProperty(\"difficulty\") String difficulty,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "             @JsonProperty(\"categories\") List\u003cJsonAdaptedCategory\u003e categories) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.questionType \u003d questionType;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.correctAnswerSet.addAll(correctAnswerSet);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.wrongAnswerSet.addAll(wrongAnswerSet);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.difficulty \u003d difficulty;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (categories !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            this.categories.addAll(categories);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Converts a given {@code Answerable} into this class for Jackson use."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public JsonAdaptedAnswerable(Answerable source) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (source instanceof Mcq) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            questionType \u003d \"mcq\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            wrongAnswerSet.addAll(source.getWrongAnswerList().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    .map(JsonAdaptedAnswer::new)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } else if (source instanceof TrueFalse) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            questionType \u003d \"tf\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            questionType \u003d \"saq\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        question \u003d source.getQuestion().question;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        difficulty \u003d source.getDifficulty().difficulty;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        correctAnswerSet.addAll(source.getCorrectAnswerList().stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .map(JsonAdaptedAnswer::new)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        categories.addAll(source.getCategories().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .map(JsonAdaptedCategory::new)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Converts this Jackson-friendly adapted answerable object into the model\u0027s {@code Answerable} object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted answerable."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Answerable toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final List\u003cCategory\u003e categories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (JsonAdaptedCategory category : this.categories) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            categories.add(category.toModelType());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final List\u003cAnswer\u003e correctAnswers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (JsonAdaptedAnswer correctAnswer : correctAnswerSet) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            correctAnswers.add(correctAnswer.toModelType());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final List\u003cAnswer\u003e wrongAnswers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (JsonAdaptedAnswer wrongAnswer : wrongAnswerSet) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            wrongAnswers.add(wrongAnswer.toModelType());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (question \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    Question.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!Question.isValidQuestion(question)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new IllegalValueException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final Question modelQuestion \u003d new Question(question);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final ArrayList\u003cAnswer\u003e modelCorrectAnswerSet \u003d new ArrayList\u003c\u003e(correctAnswers);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final ArrayList\u003cAnswer\u003e modelWrongAnswerSet \u003d new ArrayList\u003c\u003e(wrongAnswers);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (difficulty \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    Difficulty.class.getSimpleName()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!Difficulty.isValidDifficulty(difficulty)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new IllegalValueException(Difficulty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final Difficulty modelDifficulty \u003d new Difficulty(difficulty);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final Set\u003cCategory\u003e modelCategories \u003d new HashSet\u003c\u003e(categories);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return Answerable.create(questionType, modelQuestion, modelCorrectAnswerSet,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                modelWrongAnswerSet, modelDifficulty, modelCategories);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 79,
      "jxofficial": 12,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/JsonAdaptedCategory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * Jackson-friendly version of {@link Category}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "class JsonAdaptedCategory {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final String categoryName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Constructs a {@code JsonAdaptedCategory} with the given {@code categoryName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public JsonAdaptedCategory(String categoryName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.categoryName \u003d categoryName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Converts a given {@code category} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public JsonAdaptedCategory(Category source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        categoryName \u003d source.category;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public String getCategoryName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Converts this Jackson-friendly adapted category object into the model\u0027s {@code category} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted category."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Category toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!Category.isValidCategory(categoryName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return new Category(categoryName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 5,
      "jxofficial": 43
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/JsonAdaptedStatistics.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.quiz.Statistics;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Jackson-friendly version of {@link seedu.revision.model.quiz.Statistics}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "public class JsonAdaptedStatistics {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final String totalScore;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Constructs a {@code JsonAdaptedStatistics} with the given statistics details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public JsonAdaptedStatistics(@JsonProperty(\"totalScore\") String totalScore) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.totalScore \u003d totalScore;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Converts a given {@code Statistics} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public JsonAdaptedStatistics(Statistics source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        totalScore \u003d source.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Converts this Jackson-friendly adapted statistics object into the model\u0027s {@code Statistics} object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted statistics."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public Statistics toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        if (!Statistics.isValidStatistics(totalScore)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            throw new IllegalValueException(Statistics.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return new Statistics(totalScore);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 42
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/JsonHistoryStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * A class to access History data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "public class JsonHistoryStorage implements HistoryStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonHistoryStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public JsonHistoryStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public Path getHistoryFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readHistory() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return readHistory(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Similar to {@link #readHistory()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readHistory(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        Optional\u003cJsonSerializableHistory\u003e jsonHistory \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                filePath, JsonSerializableHistory.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        if (!jsonHistory.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            return Optional.of(jsonHistory.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void saveHistory(ReadOnlyHistory history) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        saveHistory(history, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Similar to {@link #saveHistory(ReadOnlyHistory)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void saveHistory(ReadOnlyHistory history, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableHistory(history), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 80
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/JsonRevisionToolStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.ReadOnlyRevisionTool;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * A class to access RevisionTool data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class JsonRevisionToolStorage implements RevisionToolStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonRevisionToolStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public JsonRevisionToolStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public Path getRevisionToolFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public Optional\u003cReadOnlyRevisionTool\u003e readRevisionTool() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return readRevisionTool(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Similar to {@link #readRevisionTool()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public Optional\u003cReadOnlyRevisionTool\u003e readRevisionTool(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        Optional\u003cJsonSerializableRevisionTool\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                filePath, JsonSerializableRevisionTool.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void saveRevisionTool(ReadOnlyRevisionTool revisionTool) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        saveRevisionTool(revisionTool, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Similar to {@link #saveRevisionTool(ReadOnlyRevisionTool)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void saveRevisionTool(ReadOnlyRevisionTool revisionTool, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        requireNonNull(revisionTool);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRevisionTool(revisionTool), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 6,
      "-": 56,
      "ShaunNgTX": 18
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/JsonSerializableHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.History;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.quiz.Statistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * An Immutable History that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "@JsonRootName(value \u003d \"history\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "class JsonSerializableHistory {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final List\u003cJsonAdaptedStatistics\u003e statistics \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Constructs a {@code JsonSerializableHistory} with the given statistics."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public JsonSerializableHistory(@JsonProperty(\"statistics\") List\u003cJsonAdaptedStatistics\u003e statistics) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.statistics.addAll(statistics);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Converts a given {@code ReadOnlyHistory} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableHistory}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public JsonSerializableHistory(ReadOnlyHistory source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        statistics.addAll(source.getStatisticsList().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .map(JsonAdaptedStatistics::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Converts this history into the model\u0027s {@code History} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public History toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        History history \u003d new History();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        for (JsonAdaptedStatistics jsonAdaptedStatistics : statistics) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            Statistics statistics \u003d jsonAdaptedStatistics.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            history.addStatistics(statistics);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return history;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 55
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/JsonSerializableRevisionTool.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.ReadOnlyRevisionTool;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.RevisionTool;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * An Immutable RevisionTool that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "@JsonRootName(value \u003d \"revisiontool\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "class JsonSerializableRevisionTool {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ANSWERABLE \u003d \"Answerables list contains duplicate answerable(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final List\u003cJsonAdaptedAnswerable\u003e answerables \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Constructs a {@code JsonSerializableRevisionTool} with the given answerables."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public JsonSerializableRevisionTool(@JsonProperty(\"answerables\") List\u003cJsonAdaptedAnswerable\u003e answerables) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.answerables.addAll(answerables);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Converts a given {@code ReadOnlyRevisionTool} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRevisionTool}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public JsonSerializableRevisionTool(ReadOnlyRevisionTool source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        answerables.addAll(source.getAnswerableList().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .map(JsonAdaptedAnswerable::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Converts this revision tool into the model\u0027s {@code RevisionTool} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public RevisionTool toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        RevisionTool revisionTool \u003d new RevisionTool();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (JsonAdaptedAnswerable jsonAdaptedAnswerable : answerables) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            Answerable answerable \u003d jsonAdaptedAnswerable.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            if (revisionTool.hasAnswerable(answerable)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ANSWERABLE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            revisionTool.addAnswerable(answerable);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return revisionTool;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 9,
      "khiangleon": 2,
      "-": 33,
      "ShaunNgTX": 16
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/RevisionToolStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.ReadOnlyRevisionTool;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.RevisionTool;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * Represents a storage for {@link RevisionTool}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public interface RevisionToolStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    Path getRevisionToolFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Returns RevisionTool data as a {@link ReadOnlyRevisionTool}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    Optional\u003cReadOnlyRevisionTool\u003e readRevisionTool() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @see #getRevisionToolFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    Optional\u003cReadOnlyRevisionTool\u003e readRevisionTool(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Saves the given {@link ReadOnlyRevisionTool} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @param revisionTool cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    void saveRevisionTool(ReadOnlyRevisionTool revisionTool) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @see #saveRevisionTool(ReadOnlyRevisionTool)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    void saveRevisionTool(ReadOnlyRevisionTool revisionTool, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ShaunNgTX": 46
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.ReadOnlyRevisionTool;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public interface Storage extends RevisionToolStorage, UserPrefsStorage, HistoryStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    Path getRevisionToolFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    Optional\u003cReadOnlyRevisionTool\u003e readRevisionTool() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    void saveRevisionTool(ReadOnlyRevisionTool revisionTool) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    Path getHistoryFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    Optional\u003cReadOnlyHistory\u003e readHistory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    void saveHistory(ReadOnlyHistory history) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4,
      "khiangleon": 10,
      "-": 23,
      "ShaunNgTX": 5
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.ReadOnlyRevisionTool;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * Manages storage of RevisionTool data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private RevisionToolStorage revisionToolStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private HistoryStorage historyStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public StorageManager(RevisionToolStorage revisionToolStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                          HistoryStorage historyStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this.revisionToolStorage \u003d revisionToolStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.historyStorage \u003d historyStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d RevisionTool methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public Path getRevisionToolFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return revisionToolStorage.getRevisionToolFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public Optional\u003cReadOnlyRevisionTool\u003e readRevisionTool() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return readRevisionTool(revisionToolStorage.getRevisionToolFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public Optional\u003cReadOnlyRevisionTool\u003e readRevisionTool(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return revisionToolStorage.readRevisionTool(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void saveRevisionTool(ReadOnlyRevisionTool revisionTool) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        saveRevisionTool(revisionTool, revisionToolStorage.getRevisionToolFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void saveRevisionTool(ReadOnlyRevisionTool revisionTool, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        revisionToolStorage.saveRevisionTool(revisionTool, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d History methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public Path getHistoryFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return historyStorage.getHistoryFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readHistory() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return readHistory(historyStorage.getHistoryFilePath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readHistory(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return historyStorage.readHistory(filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void saveHistory(ReadOnlyHistory history) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        saveHistory(history, historyStorage.getHistoryFilePath());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void saveHistory(ReadOnlyHistory history, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        historyStorage.saveHistory(history, filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 5,
      "khiangleon": 33,
      "-": 56,
      "ShaunNgTX": 16
    }
  },
  {
    "path": "src/main/java/seedu/revision/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Represents a storage for {@link seedu.revision.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Saves the given {@link seedu.revision.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/AlertDialog.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.ui.UiManager.ALERT_DIALOG_PANE_FIELD_ID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.ButtonBar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.ButtonType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/** AlertDialog class that is used to prompt users for inputs.**/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class AlertDialog {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String NEXT_LEVEL_TITLE \u003d \"Well done!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String END_QUIZ_TITLE \u003d \"End of quiz!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Alert alert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ButtonType yesButton;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ButtonType noButton;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Private initializer to prevent external parties from accessing the constructor. Initialises with default"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * stylesheet and buttons. Defensive programming."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private AlertDialog() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        alert \u003d new Alert(Alert.AlertType.CONFIRMATION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/OrangeTheme.css\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        yesButton \u003d new ButtonType(\"Yes\", ButtonBar.ButtonData.OK_DONE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        noButton \u003d new ButtonType(\"No\", ButtonBar.ButtonData.CANCEL_CLOSE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        alert.getButtonTypes().setAll(yesButton, noButton);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises an alert that will be shown when the user tries to restore the app."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return AlertDialog with warning to restore the app."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    static AlertDialog getRestoreAlert() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        AlertDialog restoreAlert \u003d new AlertDialog();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        restoreAlert.alert.setAlertType(Alert.AlertType.WARNING);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        restoreAlert.alert.setTitle(\"Warning!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        restoreAlert.alert.setHeaderText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        restoreAlert.alert.setContentText(\"Are you sure? This cannot be undone.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return restoreAlert;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises an alert that will be shown when the user completes a level in the quiz."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param nextLevel the next level in the quiz."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param score the user\u0027s current score so far."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param totalScore the total score of the user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return AlertDialog with options to proceed to next level or end the quiz."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    static AlertDialog getNextLevelAlert(int nextLevel, int score, int totalScore) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        AlertDialog nextLevelAlert \u003d new AlertDialog();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        nextLevelAlert.alert.setTitle(NEXT_LEVEL_TITLE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        nextLevelAlert.alert.setHeaderText(null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        nextLevelAlert.alert.setContentText(\"You have completed level \" + (nextLevel - 1) + \"\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"Your current score is: \" + score + \"/\" + totalScore + \"\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"Would you like to proceed to level \" + nextLevel + \"?\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"Press [ENTER] to proceed.\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"Press [ESC] to return to Configuration Mode.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return nextLevelAlert;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises an alert that will be shown when the user ends the quiz."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param score the user\u0027s current score so far."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param totalScore the total score of the user."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return AlertDialog with options to restart or end the quiz."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    static AlertDialog getEndAlert(int score, int totalScore, boolean isFailure) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        AlertDialog endAlert \u003d new AlertDialog();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        endAlert.alert.setTitle(END_QUIZ_TITLE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        endAlert.alert.setHeaderText(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (isFailure) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            endAlert.alert.setAlertType(Alert.AlertType.ERROR);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            endAlert.alert.setContentText(\"Better luck next time! :P Your score is \" + score"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"/\" + totalScore + \"\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"Try again?\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"Press [ENTER] to try again.\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"Press [ESC] to return to Configuration Mode.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            endAlert.alert.setAlertType(Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            endAlert.alert.setContentText(\"Quiz has ended! Your final score is \" + score"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"/\" + totalScore + \"\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"Try again?\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"Press [ENTER] to try again.\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"Press [ESC] to return to Configuration Mode.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return endAlert;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Shows the alert dialog and waits for user input which will be returned as an optional result."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return the ButtonType that the user chose if any."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    Optional\u003cButtonType\u003e showAndWait() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Optional\u003cButtonType\u003e result \u003d alert.showAndWait();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ButtonType getYesButton() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return yesButton;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ButtonType getNoButton() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return noButton;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 116
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/AutoComplete.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import javafx.scene.control.ContextMenu;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import javafx.scene.control.CustomMenuItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.HistoryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.RestoreCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.StartCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.StatsCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * This class is a TextField which implements an \"autocomplete\" functionality."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Entries based on Command_Usage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * @@author ShaunNgTX"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class AutoComplete extends TextField {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /** Entries based on Command_Usage. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private static final SortedSet\u003cString\u003e entries \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private static final SortedSet\u003cString\u003e entriesWithFixedCommand \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /** The popup of Auto-Complete list. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private ContextMenu popUpEntries;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private boolean isFixedCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Constructor for autocomplete."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public AutoComplete() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this.setEntries();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this.setEntriesWithFixedCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this.isFixedCommand \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        popUpEntries \u003d new ContextMenu();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        textProperty().addListener((observableValue, s, s2) -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            if (getText().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                popUpEntries.hide();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                for (String subItems : entriesWithFixedCommand) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                    if (isContain(subItems, getText())) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                        isFixedCommand \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                if (isFixedCommand) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                    popUpEntries.hide();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                    popUpEntries.hide();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                    LinkedList\u003cString\u003e searchResult \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                    searchResult.addAll(entries.subSet(getText(), getText() + Character.MAX_VALUE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                    populatePopup(searchResult);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                    if (!popUpEntries.isShowing()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                        popUpEntries.show(AutoComplete.this, Side.BOTTOM, 20, 0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            isFixedCommand \u003d false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        focusedProperty().addListener((observableValue, aBoolean, aBoolean2) -\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                popUpEntries.hide());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Get the existing set of autocomplete entries."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Basically the respective command words."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private void setEntries() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entries.add(AddCommand.COMPLETE_COMMAND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entries.add(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entries.add(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entries.add(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entries.add(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entries.add(FindCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entries.add(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entries.add(ListCommand.COMPLETE_COMMAND_DIFF);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entries.add(ListCommand.COMPLETE_COMMAND_CAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entries.add(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entries.add(RestoreCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entries.add(StartCommand.COMMAND_AUTOCOMPLETE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entries.add(StartCommand.COMMAND_AUTOCOMPLETE_NORMAL);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entries.add(StartCommand.COMMAND_AUTOCOMPLETE_ARCADE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entries.add(StartCommand.COMMAND_AUTOCOMPLETE_CUSTOM);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entries.add(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entries.add(StatsCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Set another entries to remove the double enter problem."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private void setEntriesWithFixedCommand() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entriesWithFixedCommand.add(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entriesWithFixedCommand.add(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entriesWithFixedCommand.add(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entriesWithFixedCommand.add(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entriesWithFixedCommand.add(RestoreCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        entriesWithFixedCommand.add(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Populate the entry set with the given search results."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @param searchResult The set of matching strings."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private void populatePopup(List\u003cString\u003e searchResult) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        List\u003cCustomMenuItem\u003e menuItems \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        int maxEntries \u003d 10;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        int count \u003d Math.min(searchResult.size(), maxEntries);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        // Most probably won\u0027t exceed 10 but just in case."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            final String result \u003d searchResult.get(i);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            Label entryLabel \u003d new Label(result);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            CustomMenuItem item \u003d new CustomMenuItem(entryLabel, true);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            item.setOnAction(actionEvent -\u003e {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                setText(result);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                popUpEntries.hide();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            });"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            menuItems.add(item);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        popUpEntries.getItems().clear();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        popUpEntries.getItems().addAll(menuItems);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @param source String that you comparing to."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @param subItem String that you using to compare."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @return True if subItem is in source, false otherwise."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private static boolean isContain(String source, String subItem) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        String pattern \u003d \"\\\\b\" + subItem + \"\\\\b\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        Pattern p \u003d Pattern.compile(pattern);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        Matcher m \u003d p.matcher(source);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return m.find();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 5,
      "ShaunNgTX": 146
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private StackPane commandBox;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private AutoComplete autoCompleteField;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * The text box in the UI."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param commandExecutor To execute the command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param mainWindow Is to see if commandBox is in main or quiz mode."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, boolean mainWindow) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (mainWindow) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            autoCompleteField \u003d new AutoComplete();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            autoCompleteField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault(true));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            autoCompleteField.getStyleClass().add(\"commandTextField\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            autoCompleteField.addEventFilter(KeyEvent.KEY_PRESSED, keyEvent -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                if (keyEvent.getCode() \u003d\u003d KeyCode.ENTER) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    handleCommandEntered(true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            commandBox.getChildren().add(autoCompleteField);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            commandTextField \u003d new TextField();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault(false));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            commandTextField.getStyleClass().add(\"commandTextField\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            commandTextField.addEventFilter(KeyEvent.KEY_PRESSED, keyEvent -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                if (keyEvent.getCode() \u003d\u003d KeyCode.ENTER) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    handleCommandEntered(false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            commandBox.getChildren().add(commandTextField);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param mainWindow Is to see if commandBox is in main or quiz mode."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void handleCommandEntered(Boolean mainWindow) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (mainWindow) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    commandExecutor.execute(autoCompleteField.getText());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    autoCompleteField.setText(\"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    setStyleToIndicateCommandFailure(true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    setStyleToIndicateCommandFailure(false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param mainWindow Is to see if commandBox is in main or quiz mode."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void setStyleToDefault(Boolean mainWindow) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (mainWindow) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            autoCompleteField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param mainWindow Is to see if commandBox is in main or quiz mode."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void setStyleToIndicateCommandFailure(Boolean mainWindow) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ObservableList\u003cString\u003e styleClass;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (mainWindow) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            styleClass \u003d autoCompleteField.getStyleClass();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public TextField getCommandTextField() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return commandTextField;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AutoComplete getAutoCompleteField() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return autoCompleteField;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 73,
      "khiangleon": 1,
      "-": 58,
      "ShaunNgTX": 13
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * Controller for a help page."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            \"https://github.com/AY1920S1-CS2103-F10-3/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4,
      "-": 98,
      "ShaunNgTX": 1
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/HistoryWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.scene.control.ButtonType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.ReadOnlyRevisionTool;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.RevisionTool;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.quiz.GraphList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.quiz.Mode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.ui.answerables.AnswerableListPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.ui.statistics.GraphListPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * The History Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * especially for generating line graphs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "public class HistoryWindow extends ParentWindow {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    protected static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private GraphList graphList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Initialises the GUI when History is called."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @param primaryStage the stage where scenes can be added to."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @param logic the logic that will be used to drive the app."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public HistoryWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        super(FXML, primaryStage, logic);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        graphList \u003d new GraphList((logic.getStatisticsList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        graphListPanel \u003d new GraphListPanel(graphList.getGraphList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        answerableListPanelPlaceholder.getChildren().add(graphListPanel.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        resultDisplay.setFeedbackToUser(\"History of all quiz attempts shown: \\n\" + logic.getStatisticsList()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                        + \"\\nYou have attempted \" + logic.getStatisticsList().size() + \" quizzes so far.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getRevisionToolFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Initialises the session for quiz. Loads the window components for quiz."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void handleStart(Mode mode) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        if (this.logic.getFilteredAnswerableList().size() \u003e 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            StartQuizWindow startQuizWindow \u003d new StartQuizWindow(getPrimaryStage(), getLogic(), mode);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            startQuizWindow.show();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            startQuizWindow.fillInnerParts();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            throw new CommandException(\"No questions were found matching that category/difficulty\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    + \"Quiz start aborted. Type \u0027list\u0027 to view your full list of questions again.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Shows history of results as line graphs. Loads the window components for line graphs."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void handleHistory() throws CommandException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        if (this.logic.getStatisticsList().size() \u003e 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            HistoryWindow historyWindow \u003d new HistoryWindow(getPrimaryStage(), getLogic());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            historyWindow.show();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            historyWindow.fillInnerParts();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            throw new CommandException(\"No past results were found.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Shows results of all quiz attempts. Loads the window components for results."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void handleStats() throws CommandException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        if (this.logic.getStatisticsList().size() \u003e 0) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            StatisticsWindow statisticsWindow \u003d new StatisticsWindow(getPrimaryStage(), getLogic());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            statisticsWindow.show();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            statisticsWindow.fillInnerParts();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            throw new CommandException(\"You have not attempted any quiz yet.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    protected void handleExit() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Opens the restore window."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void handleRestore(Model passedModel) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        AlertDialog restoreAlert \u003d AlertDialog.getRestoreAlert();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        Optional\u003cButtonType\u003e result \u003d restoreAlert.showAndWait();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        if (result.get() !\u003d restoreAlert.getNoButton()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            ReadOnlyRevisionTool sampleData;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            sampleData \u003d SampleDataUtil.getSampleRevisionTool();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            passedModel.setRevisionTool(new RevisionTool(sampleData));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public AnswerableListPanel getAnswerableListPanel() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return answerableListPanel;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    protected CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        MainWindow mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (commandResult.isStart()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                handleStart(commandResult.getMode());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (commandResult.isShowRestore()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                handleRestore(commandResult.getModel());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (commandResult.isShowHistory()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                handleHistory();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (commandResult.isShowStats()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                handleStats();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khiangleon": 189
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/LevelLabel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class LevelLabel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(LevelLabel.class.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String FXML \u003d \"LevelLabel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private StackPane innerLevelPlaceholder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Label levelLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises a LevelLabel based on the next level in the quiz."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param nextLevel the next level in the quiz."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public LevelLabel(int nextLevel) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        updateLevelLabel(nextLevel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Updates the {@code levelLabel}\u0027s text and color according to the next level."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param nextLevel the next level in the quiz."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void updateLevelLabel(int nextLevel) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assert nextLevel \u003e 0 \u0026\u0026 nextLevel \u003c 4 : \"Level should be between in the range [1,3]\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            switch (nextLevel) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                levelLabel.setText(\"Level 1\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                innerLevelPlaceholder.setStyle(\"-fx-background-color: #5D5D5A;\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                levelLabel.setText(\"Level 2\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                innerLevelPlaceholder.setStyle(\"-fx-background-color: #ff8264;\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                levelLabel.setText(\"Level 3\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                innerLevelPlaceholder.setStyle(\"-fx-background-color: #f73859;\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                logger.warning(\"invalid level selected\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Label getLevelLabel() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return levelLabel;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 64
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import javafx.scene.control.ButtonType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.ReadOnlyRevisionTool;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.RevisionTool;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.quiz.Mode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.ui.answerables.AnswerableListPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class MainWindow extends ParentWindow {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises the GUI when App is started."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param primaryStage the stage where scenes can be added to."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param logic the logic that will be used to drive the app."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(FXML, primaryStage, logic);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerableListPanel \u003d new AnswerableListPanel(logic.getFilteredAnswerableList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        answerableListPanelPlaceholder.getChildren().add(answerableListPanel.getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getRevisionToolFilePath());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Initialises the session for quiz. Loads the window components for quiz."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void handleStart(Mode mode) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (this.logic.getFilteredAnswerableList().size() \u003e 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            StartQuizWindow startQuizWindow \u003d new StartQuizWindow(getPrimaryStage(), getLogic(), mode);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            startQuizWindow.show();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            startQuizWindow.fillInnerParts();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new CommandException(\"No questions were found matching that category/difficulty\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"Quiz start aborted. Type \u0027list\u0027 to view your full list of questions again.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Shows history of results as line graphs. Loads the window components for line graphs."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void handleHistory() throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        if (this.logic.getStatisticsList().size() \u003e 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            HistoryWindow historyWindow \u003d new HistoryWindow(getPrimaryStage(), getLogic());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            historyWindow.show();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            historyWindow.fillInnerParts();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            throw new CommandException(\"No past results were found.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Shows results of all quiz attempts. Loads the window components for results."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void handleStats() throws CommandException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        if (this.logic.getStatisticsList().size() \u003e 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            StatisticsWindow statisticsWindow \u003d new StatisticsWindow(getPrimaryStage(), getLogic());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            statisticsWindow.show();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            statisticsWindow.fillInnerParts();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            throw new CommandException(\"You have not attempted any quiz yet.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected void handleExit() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Opens the restore window."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void handleRestore(Model passedModel) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        AlertDialog restoreAlert \u003d AlertDialog.getRestoreAlert();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Optional\u003cButtonType\u003e result \u003d restoreAlert.showAndWait();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (result.get() !\u003d restoreAlert.getNoButton()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            ReadOnlyRevisionTool sampleData;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            sampleData \u003d SampleDataUtil.getSampleRevisionTool();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            passedModel.setRevisionTool(new RevisionTool(sampleData));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AnswerableListPanel getAnswerableListPanel() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answerableListPanel;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            if (commandResult.isStart()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                handleStart(commandResult.getMode());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            if (commandResult.isShowRestore()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                handleRestore(commandResult.getModel());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (commandResult.isShowHistory()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                handleHistory();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (commandResult.isShowStats()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                handleStats();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 45,
      "jxofficial": 1,
      "khiangleon": 43,
      "-": 64,
      "ShaunNgTX": 27
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/ParentWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.ui.answerables.AnswerableListPanel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.ui.statistics.GraphListPanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.ui.statistics.StatisticsListPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * The Parent Window. Provides the basic application layout containing a menu bar and space where other JavaFX"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * elements can be placed. Other windows can extend this basic window layout."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public abstract class ParentWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected Stage primaryStage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected AnswerableListPanel answerableListPanel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    protected StatisticsListPanel statisticsListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    protected GraphListPanel graphListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected StackPane answerableListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    protected StackPane scoreProgressAndTimerPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ParentWindow(String fxml, Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(fxml, primaryStage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        setWindowDefaultSize(this.logic.getGuiSettings());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Logic getLogic() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return logic;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "         *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "         *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    abstract void fillInnerParts();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected abstract void handleExit();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected abstract CommandResult executeCommand(String commandText)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 147,
      "jxofficial": 2,
      "khiangleon": 4
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        resultDisplay.setWrapText(true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public TextArea getResultDisplay() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/StartQuizWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.ui.bar.Timer.TIMER_UP_SKIP_QUESTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.beans.property.ReadOnlyDoubleWrapper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.concurrent.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.ButtonType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResultBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.quiz.McqInputCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.quiz.SaqInputCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.quiz.TfInputCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Mcq;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.TrueFalse;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.quiz.Mode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.quiz.Modes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.quiz.Statistics;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.ui.answers.AnswersGridPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.ui.answers.McqAnswersGridPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.ui.answers.SaqAnswersGridPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.ui.answers.TfAnswersGridPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.ui.bar.ProgressIndicatorBar;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.ui.bar.ScoreProgressAndTimerGridPane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.ui.bar.Timer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * @author wilfredbtan"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * The Quiz Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class StartQuizWindow extends ParentWindow {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected static final String FXML \u003d \"StartQuizWindow.fxml\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected StackPane levelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ObservableList\u003cAnswerable\u003e quizList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Mode mode;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LevelLabel levelLabel;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ResultDisplay questionDisplay;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private AnswersGridPane answersGridPane;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ProgressIndicatorBar progressIndicatorBar;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Timer timer;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private ScoreProgressAndTimerGridPane progressAndTimerGridPane;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Answerable previousAnswerable;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Answerable currentAnswerable;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Iterator\u003cAnswerable\u003e answerableIterator;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private Statistics statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private int totalScore \u003d 0; //accumulated score for completing all questions in entire quiz"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    //to keep track of the total number of questions answered so far at every level of the quiz"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private int accumulatedSize \u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Current progress of the user in the quiz. Used by {@code ProgressIndicatorBar}.**/"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private ReadOnlyDoubleWrapper currentProgressIndex \u003d new ReadOnlyDoubleWrapper("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            this, \"currentProgressIndex\", 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises the GUI when Quiz Mode is started."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param primaryStage the stage where scenes can be added to."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param logic the logic that will be used to drive the quiz."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param mode the mode of the quiz"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public StartQuizWindow(Stage primaryStage, Logic logic, Mode mode) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(FXML, primaryStage, logic);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /** gets the current progress of the user **/"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public final double getCurrentProgressIndex() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return currentProgressIndex.get();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.quizList \u003d logic.getFilteredSortedAnswerableList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerableIterator \u003d quizList.iterator();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        currentAnswerable \u003d answerableIterator.next();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        setAnswerGridPaneByType(currentAnswerable);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        questionDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        questionDisplay.setFeedbackToUser(currentAnswerable.getQuestion().toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(questionDisplay.getRoot());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getRevisionToolFilePath());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        commandBox \u003d new CommandBox(this::executeCommand, false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        int nextLevel \u003d Integer.parseInt(quizList.get(0).getDifficulty().difficulty);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.timer \u003d new Timer(mode.getTime(nextLevel), this::executeCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        levelLabel \u003d new LevelLabel(nextLevel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        levelPlaceholder.getChildren().add(levelLabel.getRoot());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        int sizeOfFirstLevel \u003d getSizeOfCurrentLevel(quizList.get(0));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        progressIndicatorBar \u003d new ProgressIndicatorBar(currentProgressIndex, sizeOfFirstLevel,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \"%.0f/\" + sizeOfFirstLevel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        progressAndTimerGridPane \u003d new ScoreProgressAndTimerGridPane(progressIndicatorBar, timer);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        scoreProgressAndTimerPlaceholder.getChildren().add(progressAndTimerGridPane.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private int getSizeOfCurrentLevel(Answerable answerable) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ObservableList\u003cAnswerable\u003e sectionList \u003d quizList.filtered(a -\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                a.getDifficulty().difficulty.equals(answerable.getDifficulty().difficulty));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return sectionList.size();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void setAnswerGridPaneByType(Answerable currentAnswerable) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (currentAnswerable instanceof Mcq) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            answersGridPane \u003d new McqAnswersGridPane(currentAnswerable);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else if (currentAnswerable instanceof TrueFalse) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            answersGridPane \u003d new TfAnswersGridPane(currentAnswerable);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            answersGridPane \u003d new SaqAnswersGridPane(currentAnswerable);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerableListPanelPlaceholder.getChildren().add(answersGridPane.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**Handles progression to the next level and receives response from the user."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param nextAnswerable next answerable that will be displayed."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private void handleNextLevel(Answerable currentAnswerable, Answerable nextAnswerable) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        int nextLevel \u003d Integer.parseInt(nextAnswerable.getDifficulty().difficulty);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        accumulatedSize \u003d accumulatedSize + getSizeOfCurrentLevel(currentAnswerable);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        AlertDialog nextLevelDialog \u003d AlertDialog.getNextLevelAlert(nextLevel, totalScore, accumulatedSize);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task\u003cVoid\u003e task \u003d new Task\u003c\u003e() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            public Void call() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                timer.stopTimer();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        task.setOnSucceeded(e -\u003e {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            Optional\u003cButtonType\u003e result \u003d nextLevelDialog.showAndWait();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (result.isPresent() \u0026\u0026 result.get() \u003d\u003d nextLevelDialog.getNoButton()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                //Reset UI in the window"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                levelLabel.updateLevelLabel(nextLevel);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                currentProgressIndex.set(0);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                progressIndicatorBar \u003d new ProgressIndicatorBar(currentProgressIndex,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                        getSizeOfCurrentLevel(nextAnswerable),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                        \"%.0f/\" + getSizeOfCurrentLevel(nextAnswerable));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                //Start a new timer for the next level"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                this.timer \u003d new Timer(mode.getTime(nextLevel), this::executeCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                progressAndTimerGridPane \u003d new ScoreProgressAndTimerGridPane(progressIndicatorBar, timer);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                scoreProgressAndTimerPlaceholder.getChildren().add(progressAndTimerGridPane.getRoot());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Start the event on a new thread so that showAndWait event is not conflicted with timer animation."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        new Thread(task).start();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Handles ending of quiz session."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private void handleEnd(Answerable currentAnswerable) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        accumulatedSize \u003d accumulatedSize + getSizeOfCurrentLevel(currentAnswerable);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        currentProgressIndex.set(currentProgressIndex.get() + 1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        boolean isFailure \u003d mode.value.equals(Modes.ARCADE.toString()) \u0026\u0026 answerableIterator.hasNext();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        AlertDialog endAlert \u003d AlertDialog.getEndAlert(totalScore, accumulatedSize, isFailure);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Task\u003cVoid\u003e task \u003d new Task\u003c\u003e() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            public Void call() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                timer.stopTimer();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        task.setOnSucceeded(e -\u003e {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            Optional\u003cButtonType\u003e result \u003d endAlert.showAndWait();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (result.get() \u003d\u003d endAlert.getNoButton()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                restartQuiz();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        if (mode.value.equals(Modes.NORMAL.toString())) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            logic.updateHistory(statistics);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Start the event on a new thread so that showAndWait event is not conflicted with timer animation."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        new Thread(task).start();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Restarts the quiz session and resets the progress."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void restartQuiz() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerableListPanelPlaceholder.getChildren().remove(answersGridPane.getRoot());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        Statistics statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        totalScore \u003d 0;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        accumulatedSize \u003d 0;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        currentProgressIndex.set(0);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        commandBox.getCommandTextField().requestFocus();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Closes quiz mode and enters configuration mode by displaying the {@code MainWindow}."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected void handleExit() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        timer.stopTimer();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        logic.removeFiltersFromAnswerableList();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        mainWindow \u003d new MainWindow(getPrimaryStage(), logic);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        mainWindow.show();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        mainWindow.resultDisplay.setFeedbackToUser(\"Great attempt! Type \u0027start mode/MODE\u0027 \""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"(normal / arcade / custom) to try another quiz!\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @throws ParseException when uses attempts to skip question using internal command."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (commandText.equals(TIMER_UP_SKIP_QUESTION) \u0026\u0026 !timer.isTimeUp()) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                throwParseExceptionWhenUserSkipsQuestion();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText, currentAnswerable);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (commandResult.isCorrect()) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                totalScore++;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                statistics.updateStatistics(currentAnswerable, quizList);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            timer.resetTimer();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                return new CommandResultBuilder().build();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (!commandResult.isCorrect() \u0026\u0026 mode.value.equals(Modes.ARCADE.toString())) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                handleEnd(currentAnswerable);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                return new CommandResultBuilder().build();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (!answerableIterator.hasNext()) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                handleEnd(currentAnswerable);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                return new CommandResultBuilder().build();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            currentProgressIndex.set(getCurrentProgressIndex() + 1);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            previousAnswerable \u003d currentAnswerable;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            currentAnswerable \u003d answerableIterator.next();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (previousAnswerable.getDifficulty().compareTo(currentAnswerable.getDifficulty()) \u003c 0) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                handleNextLevel(previousAnswerable, currentAnswerable);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            answerableListPanelPlaceholder.getChildren().remove(answersGridPane.getRoot());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            setAnswerGridPaneByType(currentAnswerable);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            answersGridPane.updateAnswers(currentAnswerable);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            questionDisplay.setFeedbackToUser(currentAnswerable.getQuestion().toString());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            questionDisplay.setFeedbackToUser(currentAnswerable.getQuestion().toString() + \"\\n\\n\" + e.getMessage());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Throws exception according to question type."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private void throwParseExceptionWhenUserSkipsQuestion() throws ParseException {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (currentAnswerable instanceof Mcq) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, McqInputCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } else if (currentAnswerable instanceof TrueFalse) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TfInputCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SaqInputCommand.MESSAGE_INVALID_INPUT_TIMER_UP));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public LevelLabel getLevelLabel() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return levelLabel;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ProgressIndicatorBar getProgressIndicatorBar() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return progressIndicatorBar;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Timer getTimer() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return timer;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 213,
      "neoshh": 1,
      "jxofficial": 37,
      "khiangleon": 49,
      "ShaunNgTX": 32
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/StatisticsWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.scene.control.ButtonType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.ReadOnlyRevisionTool;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.RevisionTool;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.quiz.Mode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.ui.answerables.AnswerableListPanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.ui.statistics.StatisticsListPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * The Statistics Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * especially showing results breakdown of quizzes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "public class StatisticsWindow extends ParentWindow {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    protected static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Initialises the GUI when App is started."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @param primaryStage the stage where scenes can be added to."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @param logic the logic that will be used to drive the app."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public StatisticsWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        super(FXML, primaryStage, logic);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        statisticsListPanel \u003d new StatisticsListPanel(logic.getStatisticsList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        answerableListPanelPlaceholder.getChildren().add(statisticsListPanel.getRoot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        resultDisplay.setFeedbackToUser(\"Statistics of all quiz attempts shown!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getRevisionToolFilePath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Initialises the session for quiz. Loads the window components for quiz."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void handleStart(Mode mode) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        if (this.logic.getFilteredAnswerableList().size() \u003e 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            StartQuizWindow startQuizWindow \u003d new StartQuizWindow(getPrimaryStage(), getLogic(), mode);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            startQuizWindow.show();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            startQuizWindow.fillInnerParts();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            throw new CommandException(\"No questions were found matching that category/difficulty\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    + \"Quiz start aborted. Type \u0027list\u0027 to view your full list of questions again.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Shows history of results as line graphs. Loads the window components for line graphs."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void handleHistory() throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        if (this.logic.getStatisticsList().size() \u003e 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            HistoryWindow historyWindow \u003d new HistoryWindow(getPrimaryStage(), getLogic());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            historyWindow.show();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            historyWindow.fillInnerParts();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            throw new CommandException(\"No past results were found.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Shows results of all quiz attempts. Loads the window components for results."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void handleStats() throws CommandException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        if (this.logic.getStatisticsList().size() \u003e 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            StatisticsWindow statisticsWindow \u003d new StatisticsWindow(getPrimaryStage(), getLogic());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            statisticsWindow.show();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            statisticsWindow.fillInnerParts();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            throw new CommandException(\"You have not attempted any quiz yet.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    protected void handleExit() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Opens the restore window."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void handleRestore(Model passedModel) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        AlertDialog restoreAlert \u003d AlertDialog.getRestoreAlert();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        Optional\u003cButtonType\u003e result \u003d restoreAlert.showAndWait();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        if (result.get() !\u003d restoreAlert.getNoButton()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            ReadOnlyRevisionTool sampleData;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            sampleData \u003d SampleDataUtil.getSampleRevisionTool();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            passedModel.setRevisionTool(new RevisionTool(sampleData));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public AnswerableListPanel getAnswerableListPanel() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return answerableListPanel;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    protected CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        MainWindow mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (commandResult.isStart()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                handleStart(commandResult.getMode());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (commandResult.isShowRestore()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                handleRestore(commandResult.getModel());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (commandResult.isShowHistory()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                handleHistory();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (commandResult.isShowStats()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                handleStats();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khiangleon": 184
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/idea.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/OrangeTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 7,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/answerables/AnswerableCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.ui.answerables;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Mcq;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.TrueFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * An UI component that displays information of a {@code Answerable}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class AnswerableCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String FXML \u003d \"AnswerableListCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public final Answerable answerable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Label questionType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Label question;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private FlowPane answerPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private Label questionNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Label difficulty;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private FlowPane categories;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AnswerableCard(Answerable answerable, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.answerable \u003d answerable;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (answerable instanceof Mcq) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            questionType.setText(\"Question type: MCQ\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else if (answerable instanceof TrueFalse) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            questionType.setText(\"Question type: T/F\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            questionType.setText(\"Question type: SAQ\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        question.setText(answerable.getQuestion().question);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        difficulty.setText(\"Difficulty: \" + answerable.getDifficulty().difficulty);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerable.getCorrectAnswerList().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .sorted(Comparator.comparing(correctAnswer -\u003e correctAnswer.answer))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .forEach(correctAnswer -\u003e answerPane.getChildren().add(correctLabel(correctAnswer.answer)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerable.getWrongAnswerList().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .sorted(Comparator.comparing(wrongAnswer -\u003e wrongAnswer.answer))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .forEach(wrongAnswer -\u003e answerPane.getChildren().add(new Label(wrongAnswer.answer)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        answerable.getCategories().stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .sorted(Comparator.comparing(category -\u003e category.category))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .forEach(category -\u003e categories.getChildren().add(new Label(category.category)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Label correctLabel(String text) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Label correctL \u003d new Label(text);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        correctL.setStyle(\"-fx-background-color: #42b883\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return correctL;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!(other instanceof AnswerableCard)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        AnswerableCard card \u003d (AnswerableCard) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 answerable.equals(card.answerable);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 45,
      "jxofficial": 3,
      "khiangleon": 1,
      "-": 38,
      "ShaunNgTX": 3
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/answerables/AnswerableListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.ui.answerables;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Panel containing the list of answerables."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class AnswerableListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String FXML \u003d \"AnswerableListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AnswerableListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ListView\u003cAnswerable\u003e answerableListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AnswerableListPanel(ObservableList\u003cAnswerable\u003e answerableList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerableListView.setItems(answerableList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerableListView.setCellFactory(listView -\u003e new AnswerableListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Answerable} using a {@code AnswerableCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    class AnswerableListViewCell extends ListCell\u003cAnswerable\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        protected void updateItem(Answerable answerable, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            super.updateItem(answerable, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (empty || answerable \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                setGraphic(new AnswerableCard(answerable, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 45,
      "jxofficial": 2
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/answers/AnswersGridPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.ui.answers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Shows available answers/options to the user during quiz."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public abstract class AnswersGridPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public final Answerable answerable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initialises an AnswersGridPane used to display answers."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param answerable the answerable that is used to display answers."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public AnswersGridPane(String fxml, Answerable answerable) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(fxml);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.answerable \u003d answerable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Updates the grid pane with updated answers."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param answerable the question to be answered."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public abstract void updateAnswers(Answerable answerable);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 12,
      "jxofficial": 19
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/answers/McqAnswersGridPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.ui.answers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * McqAnswersGridPane class used to display Mcq Answers."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class McqAnswersGridPane extends AnswersGridPane {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String MCQ_GRID_PANE_FXML \u003d \"McqAnswersGridPane.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(McqAnswersGridPane.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Label option1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Label option2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Label option3;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Label option4;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public McqAnswersGridPane(Answerable answerable) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(MCQ_GRID_PANE_FXML, answerable);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        updateAnswers(answerable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.getRoot().getStyleClass().add(\"option-label\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Updates the answers displayed during quiz mode."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param answerable answerable used to update answers."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void updateAnswers(Answerable answerable) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cAnswer\u003e answerList \u003d answerable.getCombinedAnswerList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        option1.setText(\"a. \" + answerList.get(0).toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        option2.setText(\"b. \" + answerList.get(1).toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        option3.setText(\"c. \" + answerList.get(2).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        option4.setText(\"d. \" + answerList.get(3).toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (!(other instanceof McqAnswersGridPane)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        McqAnswersGridPane answersGrid \u003d (McqAnswersGridPane) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return answerable.equals(answersGrid.answerable);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 28,
      "jxofficial": 35
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/answers/SaqAnswersGridPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neoshh"
        },
        "content": "package seedu.revision.ui.answers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neoshh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neoshh"
        },
        "content": " * SaqAnswersGridPane class used to display an empty pane."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neoshh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neoshh"
        },
        "content": "public class SaqAnswersGridPane extends AnswersGridPane {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    private static final String SAQ_GRID_PANE_FXML \u003d \"SaqAnswersGridPane.fxml\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * Instantiates SaqAnswersGridPane to display an empty pane."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * @param answerable answerable used to display answers."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    public SaqAnswersGridPane(Answerable answerable) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        super(SAQ_GRID_PANE_FXML, answerable);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        this.getRoot().getStyleClass().add(\"option-label\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * Updates the answers grid pane to an empty pane"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * @param answerable taken in and will update the AnswerSet."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    public void updateAnswers(Answerable answerable) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        if (!(other instanceof SaqAnswersGridPane)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neoshh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        SaqAnswersGridPane answersGrid \u003d (SaqAnswersGridPane) other;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        return answerable.equals(answersGrid.answerable);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neoshh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neoshh": 43
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/answers/TfAnswersGridPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.ui.answers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * TfAnswersGridPane class used to display True and False answers."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class TfAnswersGridPane extends AnswersGridPane {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String TF_GRID_PANE_FXML \u003d \"TfAnswersGridPane.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TfAnswersGridPane.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Label option1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Label option2;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Instantiates TfAnswersGridPane to display True and False answers."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param answerable answerable used to display answers."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public TfAnswersGridPane(Answerable answerable) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(TF_GRID_PANE_FXML, answerable);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        option1.setText(\"True\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        option2.setText(\"False\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.getRoot().getStyleClass().add(\"option-label\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Updates the answers to true and false."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * @param answerable taken in and will update the AnswerSet."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void updateAnswers(Answerable answerable) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        option1.setText(\"True\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        option2.setText(\"False\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        if (!(other instanceof TfAnswersGridPane)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        TfAnswersGridPane answersGrid \u003d (TfAnswersGridPane) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return answerable.equals(answersGrid.answerable);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 16,
      "jxofficial": 41,
      "ShaunNgTX": 1
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/bar/ProgressIndicatorBar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.ui.bar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.beans.property.ReadOnlyDoubleProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Shows a bar to the user to indicate current progress through quiz."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class ProgressIndicatorBar extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String FXML \u003d \"ProgressIndicatorBar.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private static final int DEFAULT_LABEL_PADDING \u003d 5;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    protected ProgressBar bar;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    protected Text text \u003d new Text();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final ReadOnlyDoubleProperty currentProgress;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final double totalProgress;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final String labelFormatSpecifier;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ProgressIndicatorBar(final ReadOnlyDoubleProperty currentProgress, final double totalProgress,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                                final String labelFormatSpecifier) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assert currentProgress.get() \u003e\u003d 0 \u0026\u0026 currentProgress.get() \u003c\u003d totalProgress"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                : \"Invalid current progress provided\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assert totalProgress \u003e 0 : \"Invalid total progress provided\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.currentProgress \u003d currentProgress;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.totalProgress \u003d totalProgress;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.labelFormatSpecifier \u003d labelFormatSpecifier;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        bar.getStyleClass().add(\"progress-bar\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        syncProgress();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        currentProgress.addListener(new ChangeListener\u003cNumber\u003e() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            public void changed(ObservableValue\u003c? extends Number\u003e observableValue, Number number, Number number2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                syncProgress();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        bar.setMaxWidth(Double.MAX_VALUE); // allows the progress bar to expand to fill available horizontal space."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Synchronizes the progress indicated with the work done."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void syncProgress() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (currentProgress \u003d\u003d null || totalProgress \u003d\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            text.setText(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            bar.setProgress(ProgressBar.INDETERMINATE_PROGRESS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            assert currentProgress.get() \u003e\u003d 0 \u0026\u0026 currentProgress.get() \u003c\u003d totalProgress"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    : \"Invalid current progress provided\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            assert totalProgress \u003e 0 : \"Invalid total progress provided\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            text.setText(String.format(labelFormatSpecifier, Math.ceil(currentProgress.get())));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            bar.setProgress(currentProgress.get() / totalProgress);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        bar.setMinHeight(text.getBoundsInLocal().getHeight() + DEFAULT_LABEL_PADDING * 2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        bar.setMinWidth(text.getBoundsInLocal().getWidth() + DEFAULT_LABEL_PADDING * 2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ProgressBar getBar() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return bar;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Text getText() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public double getCurrentProgress() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return currentProgress.get();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ReadOnlyDoubleProperty currentProgressProperty() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return currentProgress;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 75,
      "jxofficial": 4,
      "khiangleon": 8
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/bar/ScoreProgressAndTimerGridPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.ui.bar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * UI Part which contains the {@ProgressBar} and {@Timer} in a {@StackPane}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class ScoreProgressAndTimerGridPane extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static final String FXML \u003d \"ScoreProgressAndTimerGridPane.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected Text text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ScoreProgressAndTimerGridPane.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Label timerLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private StackPane pane1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private StackPane pane2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private ProgressBar bar;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ProgressIndicatorBar progressIndicatorBar;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Timer timer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public ScoreProgressAndTimerGridPane(ProgressIndicatorBar progressIndicatorBar, Timer timer) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.progressIndicatorBar \u003d progressIndicatorBar;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.bar \u003d progressIndicatorBar.bar;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.text \u003d progressIndicatorBar.text;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.pane1.getChildren().setAll(bar, text);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.timer \u003d timer;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.timerLabel \u003d timer.getTimerLabel();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.pane2.getChildren().setAll(timerLabel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.timer.startTimer();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 11,
      "jxofficial": 42
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/bar/Timer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.ui.bar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.beans.property.ReadOnlyIntegerWrapper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.ui.UiPart;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Timer class which handles the animations and implementation of the quiz session timer."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * @@author jxofficial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class Timer extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Timer must be a number that is greater 1, and \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            + \"double values will be truncated.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final String TIMER_UP_SKIP_QUESTION \u003d \"Timer up, skipped to next question with wrong answer\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static final String FXML \u003d \"Timer.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Timer.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final Integer startTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final Label timerLabel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private ReadOnlyIntegerWrapper currentTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Timeline timeline;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Initialises a {@Timer} object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param startTime start time of the countdown timer."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param commandExecutor command that will be executed at the end of the countdown."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Timer(Integer startTime, CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.currentTime \u003d new ReadOnlyIntegerWrapper("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                this, \"currentTime\", startTime);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.timerLabel \u003d new Label();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        currentTime.addListener(new ChangeListener\u003cNumber\u003e() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            public void changed(ObservableValue\u003c? extends Number\u003e observableValue, Number number, Number number2) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                syncProgress();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Starts the timer and initiates the {@CommandExecutor}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void startTimer() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        timeline \u003d new Timeline();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        KeyFrame frame \u003d new KeyFrame(Duration.seconds(1), event -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            currentTime.set(currentTime.get() - 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            if (currentTime.get() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                timeline.stop();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    commandExecutor.execute(TIMER_UP_SKIP_QUESTION);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    logger.severe(\"Timer failed to go next question\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        timeline.setCycleCount(startTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        timeline.getKeyFrames().add(frame);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /** Syncs the observable value with the progress. **/"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private void syncProgress() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        //Run on the JavaFX Application Thread."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            timerLabel.setText(((Integer) currentTime.get()).toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /** Resets the timer and starts a new timer.**/"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void resetTimer() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        timeline.stop();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        currentTime.set(startTime);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        startTimer();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /** Stops the timer. **/"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void stopTimer() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        timeline.stop();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Label getTimerLabel() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return timerLabel;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public boolean isTimeUp() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return currentTime.get() \u003c\u003d 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "         *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "         */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 6,
      "jxofficial": 122
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/statistics/GraphCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.ui.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * An UI component that displays line graph of a {@code scoreList}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "public class GraphCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private static final String FXML \u003d \"GraphListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final ObservableList\u003cDouble\u003e scoreList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on RevisionTool level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final NumberAxis xAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final LineChart\u003cNumber, Number\u003e lineChart \u003d new LineChart\u003c\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private XYChart.Series series \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public GraphCard(ObservableList\u003cDouble\u003e scoreList, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.scoreList \u003d scoreList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        xAxis.setLabel(\"Number of quiz attempts\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        yAxis.setLabel(\"score (%)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        series.setName(\"scores\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        switch (displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            lineChart.setTitle(\"Overall results\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            lineChart.setTitle(\"Results for Difficulty 1 Questions\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            lineChart.setTitle(\"Results for Difficulty 2 Questions\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            lineChart.setTitle(\"Results for Difficulty 3 Questions\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            assert false : displayedIndex;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        //for (int i \u003d 0; i \u003c scoreList.size(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        //    series.getData().add(new XYChart.Data(i + 1, scoreList.get(i)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        //lineChart.getData().add(series);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        cardPane \u003d new HBox();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        cardPane.getChildren().addAll(lineChart);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        if (!(other instanceof GraphCard)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        GraphCard card \u003d (GraphCard) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return scoreList.equals(card.scoreList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khiangleon": 87
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/statistics/GraphListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.ui.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Panel containing the list of line graphs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "public class GraphListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private static final String FXML \u003d \"GraphListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(GraphListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private ListView\u003cObservableList\u003cDouble\u003e\u003e graphListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public GraphListPanel(ObservableList\u003cObservableList\u003cDouble\u003e\u003e graphList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        graphListView.setItems(graphList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        graphListView.setCellFactory(listView -\u003e new GraphListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Graph} using a {@code GraphCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    class GraphListViewCell extends ListCell\u003cObservableList\u003cDouble\u003e\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        protected void updateItem(ObservableList\u003cDouble\u003e scoreList, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            super.updateItem(scoreList, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (empty || scoreList \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                setGraphic(new GraphCard(scoreList, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khiangleon": 48
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/statistics/StatisticsCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.ui.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.quiz.Statistics;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * An UI component that displays breakdown of results in a {@code Statistics}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "public class StatisticsCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private static final String FXML \u003d \"StatisticsListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public final Statistics statistics;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on RevisionTool level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private Label total;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private Label difficulty1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private Label difficulty2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private Label difficulty3;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public StatisticsCard(Statistics statistics, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        total.setText(\"Total: \" + String.format(\"%.2f\", statistics.getResult()) + \"%\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        difficulty1.setText(\"Difficulty 1: \" + String.format(\"%.2f\", statistics.getResult1()) + \"%\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        difficulty2.setText(\"Difficulty 2: \" + String.format(\"%.2f\", statistics.getResult2()) + \"%\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        difficulty3.setText(\"Difficulty 3: \" + String.format(\"%.2f\", statistics.getResult3()) + \"%\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        priority.setText(\"Please prioritise this type of questions: \" + statistics.getPriority());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        priority.setStyle(\"-fx-background-color: red; -fx-text-fill: white;\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        if (!(other instanceof StatisticsCard)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        StatisticsCard card \u003d (StatisticsCard) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                \u0026\u0026 statistics.equals(card.statistics);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khiangleon": 70
    }
  },
  {
    "path": "src/main/java/seedu/revision/ui/statistics/StatisticsListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.ui.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.quiz.Statistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * Panel containing the list of statistics."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "public class StatisticsListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private static final String FXML \u003d \"StatisticsListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StatisticsListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private ListView\u003cStatistics\u003e statisticsListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public StatisticsListPanel(ObservableList\u003cStatistics\u003e statisticsList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        statisticsListView.setItems(statisticsList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        statisticsListView.setCellFactory(listView -\u003e new StatisticsListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Statistics} using a {@code StatisticsCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    class StatisticsListViewCell extends ListCell\u003cStatistics\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        protected void updateItem(Statistics statistics, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            super.updateItem(statistics, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (empty || statistics \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                setGraphic(new StatisticsCard(statistics, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khiangleon": 48
    }
  },
  {
    "path": "src/main/resources/view/AnswerableListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cLabel fx:id\u003d\"question\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "      \u003cLabel fx:id\u003d\"questionType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$questionType\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"categories\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "      \u003cLabel fx:id\u003d\"difficulty\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$difficulty\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"answerPane\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 5,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/AnswerableListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "  \u003cListView fx:id\u003d\"answerableListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/AnswerableListPanelWithAnswers.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            fx:controller\u003d\"$CONTROLLER_NAME$\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ShaunNgTX": 10
    }
  },
  {
    "path": "src/main/resources/view/AnswersGridPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003cGridPane fx:id\u003d\"cardPane\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "          xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "          alignment\u003d\"center\" \u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"ALWAYS\" minHeight\u003d\"10.0\" percentHeight\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"ALWAYS\" minHeight\u003d\"10.0\" percentHeight\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cLabel styleClass\u003d\"option-label\" fx:id\u003d\"option1\" text\u003d\"\\$option1\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "               GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cLabel styleClass\u003d\"option-label\" fx:id\u003d\"option2\" text\u003d\"\\$option2\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "               GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cLabel styleClass\u003d\"option-label\" fx:id\u003d\"option3\" text\u003d\"\\$option3\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "               GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cLabel styleClass\u003d\"option-label\" fx:id\u003d\"option4\" text\u003d\"\\$option4\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "               GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 10,
      "jxofficial": 41
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "\u003cStackPane fx:id\u003d\"commandBox\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "ShaunNgTX": 3
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background: #ffa45c;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".option-label {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-max-height: Infinity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-max-width: Infinity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-font-family: \"Lucida Bright\",  \"Times New Roman\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-font-style: normal;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-font-size: 15;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: #ffba5a;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-padding: 10;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-border-color: #fbf3f3;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-border-width: 3;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "#option1 {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: #b9b9b2;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "#option2 {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: #b9b9b2;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "#option3 {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: #b9b9b2;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "#option4 {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: #b9b9b2;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".progress-bar {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-accent: #ff6464;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 36,
      "-": 18
    }
  },
  {
    "path": "src/main/resources/view/GraphListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 31
    }
  },
  {
    "path": "src/main/resources/view/GraphListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    \u003cListView fx:id\u003d\"graphListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/LevelLabel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003cStackPane fx:id\u003d\"innerLevelPlaceholder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "  \u003cLabel fx:id\u003d\"levelLabel\" styleClass\u003d\"level-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 9
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "         title\u003d\"CS2103 Revision Tool\" minWidth\u003d\"850\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    \u003cImage url\u003d\"@/images/idea.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cURL value\u003d\"@OrangeTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"SOMETIMES\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cVBox fx:id\u003d\"answerableList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          \u003cStackPane fx:id\u003d\"answerableListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 7,
      "-": 52
    }
  },
  {
    "path": "src/main/resources/view/McqAnswersGridPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003cGridPane fx:id\u003d\"cardPane\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "          xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          alignment\u003d\"CENTER_LEFT\" \u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"ALWAYS\" minHeight\u003d\"10.0\" percentHeight\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"ALWAYS\" minHeight\u003d\"10.0\" percentHeight\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cLabel styleClass\u003d\"option-label\" fx:id\u003d\"option1\" text\u003d\"\\$option1\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "               GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cLabel styleClass\u003d\"option-label\" fx:id\u003d\"option2\" text\u003d\"\\$option2\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "               GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cLabel styleClass\u003d\"option-label\" fx:id\u003d\"option3\" text\u003d\"\\$option3\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "               GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cLabel styleClass\u003d\"option-label\" fx:id\u003d\"option4\" text\u003d\"\\$option4\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "               GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 11,
      "jxofficial": 42
    }
  },
  {
    "path": "src/main/resources/view/OrangeTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: derive(#ffa45c, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    background-color: #ffa45c; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-text-fill: #5d5d5a;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-text-fill: #5d5d5a;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-base: #ffa45c;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-control-inner-background: #ffa45c;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: #ffa45c;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-text-fill: #5d5d5a;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: derive(#ffa45c, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: derive(#ffa45c, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: derive(#ffa45c, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: #ffcdab;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: #fff4e3;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: #ffa45c;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-border-color: #ff7e67;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-text-fill: #5d5d5a;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     -fx-background-color: derive(#ffa45c, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     -fx-background-color: derive(#ffa45c, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     -fx-border-color: derive(#ffa45c, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: derive(#ffa45c, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-text-fill: #5d5d5a;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-text-fill: #5d5d5a;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: derive(#ffa45c, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-border-color: derive(#ffa45c, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-text-fill: #5d5d5a;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: derive(#ffa45c, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-border-color: derive(#ffa45c, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: derive(#ffa45c, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: derive(#ffa45c, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-text-fill: #5d5d5a;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: derive(#ffa45c, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-text-fill: #5d5d5a;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: #ffa45c;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "  -fx-background-color: #5d5d5a;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "  -fx-text-fill: #ffa45c;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-border-color: #5d5d5a, #5d5d5a;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: #ffa45c;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-text-fill: #5d5d5a;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: #ffa45c;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".dialog-pane \u003e .button-bar \u003e .container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: derive(#878784, 20%);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".dialog-pane .button {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: derive(#ffa45c, 25%);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-fill: #5d5d5a;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-text-fill: #5d5d5a;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: derive(#ffa45c, 20%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: derive(#ffa45c, 50%);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".commandTextField {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: transparent #ffa45c transparent #ffa45c;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-border-color: #ffa45c #ffa45c #ffffff #ffa45c;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-text-fill: #5d5d5a;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "#filterField, #answerableListPanel, #answerableWebpage {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: transparent, #ffa45c, transparent, #ffa45c;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "#categories {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "#categories .label {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-max-width: 200;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-wrap-text: true;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: #ea5455;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "#answerPane {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-hgap: 10;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-vgap: 10;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "#answerPane .label {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-min-height: 30;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-max-width: 180;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-wrap-text: true;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-start-margin: 40;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: #ff7e67;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-font-size: 15;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".alert.warning.dialog-pane {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: derive(#878784, 20%);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".alert.error.dialog-pane {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: derive(#878784, 20%);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-graphic: url(\"/images/tongue.png\");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".alert.confirmation.dialog-pane {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: derive(#878784, 20%);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-graphic: url(\"/images/happy.png\");"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".alert.information.dialog-pane {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: derive(#878784, 20%);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-graphic: url(\"/images/thumbs-up.png\");"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ".level-display {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-text-alignment: center;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "#innerLevelPlaceholder {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-color: #ff8264;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    -fx-background-radius: 50;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 111,
      "-": 299
    }
  },
  {
    "path": "src/main/resources/view/ProgressIndicatorBar.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003cProgressBar fx:id\u003d\"bar\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                 xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    \u003c/ProgressBar\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 6,
      "jxofficial": 1
    }
  },
  {
    "path": "src/main/resources/view/SaqAnswersGridPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003cGridPane fx:id\u003d\"cardPane\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          alignment\u003d\"CENTER\" \u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 8
    }
  },
  {
    "path": "src/main/resources/view/ScoreProgressAndTimerGridPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003cGridPane styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "          xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"ALWAYS\" percentWidth\u003d\"80.0\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"ALWAYS\" percentWidth\u003d\"20.0\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"ALWAYS\" percentHeight\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cStackPane fx:id\u003d\"pane1\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003cProgressBar fx:id\u003d\"bar\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cStackPane fx:id\u003d\"pane2\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003cLabel fx:id\u003d\"timerLabel\" text\u003d\"\\$timerLabel\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    \u003cInsets left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 34
    }
  },
  {
    "path": "src/main/resources/view/StartQuizWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "         title\u003d\"Quiz Mode\" minWidth\u003d\"800\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    \u003cImage url\u003d\"@/images/idea.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cURL value\u003d\"@OrangeTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"levelPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                   minHeight\u003d\"40\" prefHeight\u003d\"40\" maxHeight\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"SOMETIMES\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                   minHeight\u003d\"150\" prefHeight\u003d\"150\" maxHeight\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cVBox fx:id\u003d\"answerableList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          \u003cStackPane fx:id\u003d\"answerableListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"scoreProgressAndTimerPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                   minHeight\u003d\"30\" prefHeight\u003d\"30\" maxHeight\u003d\"30\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 73
    }
  },
  {
    "path": "src/main/resources/view/StatisticsListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        \u003cLabel fx:id\u003d\"total\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "      \u003cLabel fx:id\u003d\"difficulty1\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$difficulty\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "      \u003cLabel fx:id\u003d\"difficulty2\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$difficulty\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "      \u003cLabel fx:id\u003d\"difficulty3\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$difficulty\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "      \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$difficulty\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 39
    }
  },
  {
    "path": "src/main/resources/view/StatisticsListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    \u003cListView fx:id\u003d\"statisticsListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 8
    }
  },
  {
    "path": "src/main/resources/view/TfAnswersGridPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.effect.DropShadow?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003cGridPane fx:id\u003d\"cardPane\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "          xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "          alignment\u003d\"CENTER\" \u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cRowConstraints vgrow\u003d\"ALWAYS\" minHeight\u003d\"10.0\" percentHeight\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cLabel styleClass\u003d\"option-label\" style\u003d\"-fx-font-size: 25\" fx:id\u003d\"option1\" text\u003d\"\\$option1\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003cLabel styleClass\u003d\"option-label\" style\u003d\"-fx-font-size: 25\" fx:id\u003d\"option2\" text\u003d\"\\$option2\" wrapText\u003d\"true\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "               GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \u003cDropShadow/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 8,
      "jxofficial": 29
    }
  },
  {
    "path": "src/main/resources/view/Timer.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003cLabel fx:id\u003d\"timerLabel\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        \u003cInsets left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "\u003c/Label\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "jxofficial": 8
    }
  },
  {
    "path": "src/test/java/guitests/GuiRobot.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package guitests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.function.BooleanSupplier;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import guitests.guihandles.exceptions.StageNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Robot used to simulate user actions on the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Extends {@link FxRobot} by adding some customized functionality and workarounds."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class GuiRobot extends FxRobot {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 5000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final boolean isHeadlessMode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public GuiRobot() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * unnecessary delays."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void pauseForHuman() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (isHeadlessMode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Pauses execution for certain tasks that require buffer time."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void pause() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if tests are run in headless mode."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isHeadlessMode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return isHeadlessMode;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * milliseconds."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void waitForEvent(BooleanSupplier event) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Waits for {@code event} to be true."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param timeOut in milliseconds"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void waitForEvent(BooleanSupplier event, int timeOut) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        int timePassed \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final int retryInterval \u003d 50;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        while (!event.getAsBoolean()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            sleep(retryInterval);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            timePassed +\u003d retryInterval;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (timePassed \u003e\u003d timeOut) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                throw new EventTimeoutException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        pauseForHuman();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if the window with {@code stageTitle} is currently open."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isWindowShown(String stageTitle) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return getNumberOfWindowsShown(stageTitle) \u003e\u003d 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the number of windows with {@code stageTitle} that are currently open."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public int getNumberOfWindowsShown(String stageTitle) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return (int) listTargetWindows().stream()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the first stage, ordered by proximity to the current target window, with the stage title."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * The order that the windows are searched are as follows (proximity): current target window,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * children of the target window, rest of the windows."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws StageNotFoundException if the stage is not found."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Stage getStage(String stageTitle) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .filter(Stage.class::isInstance) // checks that the window is of type Stage"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .map(Stage.class::cast)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return targetStage.orElseThrow(StageNotFoundException::new);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Represents an error which occurs when a timeout occurs when waiting for an event."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private class EventTimeoutException extends RuntimeException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 126
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/AlertDialogHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.ui.UiManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A handle for the {@code AlertDialog} of the UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class AlertDialogHandle extends StageHandle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final DialogPane dialogPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AlertDialogHandle(Stage stage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        dialogPane \u003d getChildNode(\"#\" + UiManager.ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the text of the header in the {@code AlertDialog}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getHeaderText() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return dialogPane.getHeaderText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the text of the content in the {@code AlertDialog}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getContentText() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return dialogPane.getContentText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 32
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/AnswerableCardHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Provides a handle to a answerable card in the answerable list panel."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class AnswerableCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String QUESTION_TYPE_FIELD_ID \u003d \"#questionType\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String QUESTION_FIELD_ID \u003d \"#question\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String DIFFICULTY_FIELD_ID \u003d \"#difficulty\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String ANSWERS_FIELD_ID \u003d \"#answerPane\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String CATEGORIES_FIELD_ID \u003d \"#categories\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final Label questionTypeLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final Label questionLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final Label difficultyLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final List\u003cLabel\u003e answerLabels;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final List\u003cLabel\u003e categoryLabels;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AnswerableCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        questionTypeLabel \u003d getChildNode(QUESTION_TYPE_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        questionLabel \u003d getChildNode(QUESTION_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        difficultyLabel \u003d getChildNode(DIFFICULTY_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Region answersContainer \u003d getChildNode(ANSWERS_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerLabels \u003d answersContainer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Region categoriesContainer \u003d getChildNode(CATEGORIES_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        categoryLabels \u003d categoriesContainer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getQuestionType() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return questionTypeLabel.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return questionLabel.getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getDifficulty() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return difficultyLabel.getText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public List\u003cString\u003e getCombinedAnswerList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answerLabels"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public List\u003cString\u003e getCategories() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return categoryLabels"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if this handle contains {@code answerable}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean equals(Answerable answerable) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return getQuestion().equals(answerable.getQuestion().question)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 getDifficulty().equals(answerable.getDifficulty().difficulty)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 getCombinedAnswerList().equals(answerable.getCombinedAnswerList().stream()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                        .map(a -\u003e a.answer)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                        .sorted()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                        .collect(Collectors.toList()))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 getCategories().equals(answerable.getCategories().stream()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                        .map(cat -\u003e cat.category)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                        .sorted()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 95
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/AnswerableListPanelHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Provides a handle for {@code AnswerableListPanel} containing the list of {@code AnswerableCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class AnswerableListPanelHandle extends NodeHandle\u003cListView\u003cAnswerable\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String ANSWERABLE_LIST_VIEW_ID \u003d \"#answerableListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Optional\u003cAnswerable\u003e lastRememberedSelectedAnswerableCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AnswerableListPanelHandle(ListView\u003cAnswerable\u003e answerableListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(answerableListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns a handle to the selected {@code AnswerableCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AnswerableCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        List\u003cAnswerable\u003e selectedAnswerableList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (selectedAnswerableList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new AssertionError(\"Answerable list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .map(AnswerableCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedAnswerableList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        List\u003cAnswerable\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Navigates the listview to display {@code answerable}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void navigateToCard(Answerable answerable) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (!getRootNode().getItems().contains(answerable)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new IllegalArgumentException(\"Answerable does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            getRootNode().scrollTo(answerable);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Selects the {@code AnswerableCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the answerable card handle of a answerable associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AnswerableCardHandle getAnswerableCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .map(AnswerableCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .filter(handle -\u003e handle.equals(getAnswerable(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Answerable getAnswerable(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Remembers the selected {@code AnswerableCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void rememberSelectedAnswerableCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        List\u003cAnswerable\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            lastRememberedSelectedAnswerableCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            lastRememberedSelectedAnswerableCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if the selected {@code AnswerableCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * {@code rememberSelectedAnswerableCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isSelectedAnswerableCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        List\u003cAnswerable\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return lastRememberedSelectedAnswerableCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return !lastRememberedSelectedAnswerableCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    || !lastRememberedSelectedAnswerableCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 159
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CommandBoxHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A handle to the {@code CommandBox} in the GUI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String COMMAND_INPUT_FIELD_CLASS \u003d \".commandTextField\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandBoxHandle(TextField commandBoxNode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(commandBoxNode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the text in the command box."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Enters the given command in the Command Box and presses enter."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void run(String command) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().setText(command));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the list of style classes present in the command box."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ObservableList\u003cString\u003e getStyleClass() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return getRootNode().getStyleClass();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 42
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/HelpWindowHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A handle to the {@code HelpWindow} of the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class HelpWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String HELP_WINDOW_TITLE \u003d \"Help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public HelpWindowHandle(Stage helpWindowStage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(helpWindowStage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if a help window is currently present in the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static boolean isWindowPresent() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new GuiRobot().isWindowShown(HELP_WINDOW_TITLE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 24
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/LevelLabelHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A handler for the {@code LevelLabel} of the UI"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class LevelLabelHandle extends NodeHandle\u003cLabel\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String LEVEL_LABEL_ID \u003d \"#levelLabel\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public LevelLabelHandle(Label levelLabelNode) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(levelLabelNode);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the text in the level label."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 22
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainMenuHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Provides a handle to the main menu of the app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class MainMenuHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MENU_BAR_ID \u003d \"#menuBar\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public MainMenuHandle(Node mainMenuNode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(mainMenuNode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Opens the {@code HelpWindow} using the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void openHelpWindowUsingMenu() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        clickOnMenuItemsSequentially(\"Help\", \"F1\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Opens the {@code HelpWindow} by pressing the shortcut key associated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * with the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void openHelpWindowUsingAccelerator() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.push(KeyCode.F1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Clicks on {@code menuItems} in order."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void clickOnMenuItemsSequentially(String... menuItems) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Arrays.stream(menuItems).forEach(guiRobot::clickOn);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 39
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/NodeHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Provides access to a node in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public abstract class NodeHandle\u003cT extends Node\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final T rootNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected NodeHandle(T rootNode) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.rootNode \u003d requireNonNull(rootNode);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected T getRootNode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return rootNode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected \u003cQ extends Node\u003e Q getChildNode(String query) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Optional\u003cQ\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Clicks on the root node (i.e. itself)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void click() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.clickOn(rootNode);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 44
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ProgressIndicatorBarHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A handler for the {@code ProgressIndicatorBar} of the UI"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class ProgressIndicatorBarHandle extends NodeHandle\u003cProgressBar\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String PROGRESS_BAR_ID \u003d \"#bar\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ProgressIndicatorBarHandle(ProgressBar progressBarNode) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(progressBarNode);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the progress of the progress bar."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public double getProgress() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return getRootNode().getProgress();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 23
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ResultDisplayHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A handler for the {@code ResultDisplay} of the UI"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class ResultDisplayHandle extends NodeHandle\u003cTextArea\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String RESULT_DISPLAY_ID \u003d \"#resultDisplay\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ResultDisplayHandle(TextArea resultDisplayNode) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(resultDisplayNode);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the text in the result display."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 22
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StageHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Provides access to a stage in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public abstract class StageHandle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public StageHandle(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.stage \u003d requireNonNull(stage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Closes {@code stage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.interact(stage::close);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(stage.isShowing());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Focuses on this {@code stage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String windowTitle \u003d stage.getTitle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        logger.info(\"Focusing on\" + windowTitle);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.interact(stage::requestFocus);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        logger.info(\"Finishing focus on\" + windowTitle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if currently focusing on this stage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return stage.isFocused();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code stage}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(String query) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 63
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StartQuizWindowHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class StartQuizWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final AnswerableListPanelHandle answerableListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public StartQuizWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerableListPanel \u003d new AnswerableListPanelHandle("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                getChildNode(AnswerableListPanelHandle.ANSWERABLE_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_CLASS));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AnswerableListPanelHandle getAnswerableListPanel() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answerableListPanel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 47
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatusBarFooterHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.Labeled;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A handle for the {@code StatusBarFooter} at the footer of the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final Labeled syncStatusNode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final Labeled saveLocationNode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private String lastRememberedSyncStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private String lastRememberedSaveLocation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public StatusBarFooterHandle(Node statusBarFooterNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(statusBarFooterNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the text of the sync status portion of the status bar."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getSyncStatus() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return syncStatusNode.getText();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the text of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getSaveLocation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return saveLocationNode.getText();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Remembers the content of the sync status portion of the status bar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void rememberSyncStatus() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        lastRememberedSyncStatus \u003d getSyncStatus();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if the current content of the sync status is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * {@code rememberSyncStatus()} call."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isSyncStatusChanged() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return !lastRememberedSyncStatus.equals(getSyncStatus());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Remembers the content of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void rememberSaveLocation() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        lastRememberedSaveLocation \u003d getSaveLocation();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * recent {@code rememberSaveLocation()} call."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean isSaveLocationChanged() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return !lastRememberedSaveLocation.equals(getSaveLocation());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 71
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TimerHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A handler for the {@code ProgressIndicatorBar} of the UI"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class TimerHandle extends NodeHandle\u003cLabel\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String TIMER_LABEL_ID \u003d \"#timerLabel\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public TimerHandle(Label timerLabel) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(timerLabel);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the text of the timer label."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 23
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/exceptions/NodeNotFoundException.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package guitests.guihandles.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Signals that the node cannot be found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class NodeNotFoundException extends NoSuchElementException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 9
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/exceptions/StageNotFoundException.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package guitests.guihandles.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Signals that the stage cannot be found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class StageNotFoundException extends NoSuchElementException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 9
    }
  },
  {
    "path": "src/test/java/seedu/revision/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/revision/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/revision/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/revision/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final Index fifthAnswerableIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(fifthAnswerableIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(fifthAnswerableIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(fifthAnswerableIndex.equals(fifthAnswerableIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(fifthAnswerableIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(fifthAnswerableIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(fifthAnswerableIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 9,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/revision/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/idea.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/revision/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/revision/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/revision/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/revision/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/revision/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_ANSWERABLE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.CATEGORY_DESC_UML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.CORRECT_ANSWER_DESC_BROWNFIELD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.DIFFICULTY_DESC_ALPHA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.MCQ_WRONG_ANSWER_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.QUESTION_DESC_ALPHA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.QUESTION_TYPE_MCQ;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_A;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.History;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.ReadOnlyRevisionTool;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.storage.JsonHistoryStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.storage.JsonRevisionToolStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.storage.Storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.stubs.StorageStub;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.McqBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Storage storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        logic \u003d new LogicManager(model, storageStub);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_ANSWERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        // Setup LogicManager with JsonRevisionToolIoExceptionThrowingStub"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        JsonRevisionToolStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                new JsonRevisionToolIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        JsonHistoryStorage historyStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                new JsonHistoryStorage((temporaryFolder.resolve(\"ioExceptionHistory.json\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, historyStorage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + QUESTION_TYPE_MCQ + QUESTION_DESC_ALPHA"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + CORRECT_ANSWER_DESC_BROWNFIELD + CATEGORY_DESC_UML + MCQ_WRONG_ANSWER_DESC + DIFFICULTY_DESC_ALPHA;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable expectedAnswerable \u003d new McqBuilder(MCQ_A).withCategories(\"UML\").build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedModel.addAnswerable(expectedAnswerable);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void getFilteredAnswerableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredAnswerableList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRevisionTool(), new UserPrefs(), new History());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private static class JsonRevisionToolIoExceptionThrowingStub extends JsonRevisionToolStorage {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        private JsonRevisionToolIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        public void saveRevisionTool(ReadOnlyRevisionTool revisionTool, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 29,
      "jxofficial": 2,
      "khiangleon": 9,
      "-": 119,
      "ShaunNgTX": 9
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.getTypicalMcqs;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.History;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.McqBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        model \u003d new ModelManager(getTypicalMcqs(), new UserPrefs(), new History());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_newAnswerable_success() throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable validAnswerable \u003d new McqBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRevisionTool(), new UserPrefs(), new History());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedModel.addAnswerable(validAnswerable);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertCommandSuccess(new AddCommand(validAnswerable), model,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validAnswerable), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void execute_duplicateAnswerable_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        Answerable answerableInList \u003d model.getRevisionTool().getAnswerableList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertCommandFailure(new AddCommand(answerableInList), model, AddCommand.MESSAGE_DUPLICATE_ANSWERABLE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 14,
      "jxofficial": 3,
      "khiangleon": 3,
      "-": 26,
      "ShaunNgTX": 2
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.stubs.ModelStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.stubs.ModelStubAcceptingAnswerableAdded;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.stubs.ModelStubWithAnswerable;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.McqBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void constructor_nullAnswerable_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void execute_answerableAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ModelStubAcceptingAnswerableAdded modelStub \u003d new ModelStubAcceptingAnswerableAdded();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable validAnswerable \u003d new McqBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validAnswerable).execute(modelStub);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validAnswerable), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(Arrays.asList(validAnswerable), modelStub.getAnswerablesAdded());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void execute_duplicateAnswerable_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable validAnswerable \u003d new McqBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validAnswerable);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithAnswerable(validAnswerable);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_ANSWERABLE, () -\u003e addCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .execute(modelStub));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable alice \u003d new McqBuilder().withQuestion(\"Alice\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable bob \u003d new McqBuilder().withQuestion(\"Bob\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different answerable -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 22,
      "jxofficial": 2,
      "khiangleon": 2,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.getTypicalMcqs;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.History;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.RevisionTool;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_emptyAddressBook_success() throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMcqs(), new UserPrefs(), new History());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalMcqs(), new UserPrefs(), new History());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        expectedModel.setRevisionTool(new RevisionTool());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 5,
      "jxofficial": 4,
      "khiangleon": 4,
      "-": 20,
      "ShaunNgTX": 2
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResultBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        CommandResult commandResult \u003d new CommandResultBuilder().withFeedBack(\"feedback\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResultBuilder().withFeedBack(\"feedback\").build()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResultBuilder().withFeedBack(\"feedback\").build()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResultBuilder().withFeedBack(\"different\").build()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different withHelp value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResultBuilder().withFeedBack(\"feedback\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .withHelp(true).build()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResultBuilder().withFeedBack(\"feedback\").withExit(true).build()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        CommandResult commandResult \u003d new CommandResultBuilder().withFeedBack(\"feedback\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResultBuilder().withFeedBack(\"feedback\").build().hashCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResultBuilder().withFeedBack(\"different\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .build().hashCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different withHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResultBuilder().withFeedBack(\"feedback\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .withHelp(true).build().hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResultBuilder().withFeedBack(\"feedback\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .withExit(true).build().hashCode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 19,
      "jxofficial": 2,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CORRECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_QUESTION_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_WRONG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResultBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.RevisionTool;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.testutil.builder.EditAnswerableDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final String VALID_MCQ_QUESTION_1 \u003d \"What type of project is AB3?\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final String VALID_MCQ_QUESTION_2 \u003d \"Which of the following is not true?\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final String VALID_TF_QUESTION_1 \u003d \"As per the textbook, \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            + \"PR reviews is one of the two ways of reviewing code\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final String VALID_TF_QUESTION_2 \u003d \"Linters are a subset of dynamic (not static) analysis tools\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final String VALID_SAQ_QUESTION_1 \u003d \"What does Boundary Value Analysis suggests?\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final String VALID_QUESTION_TYPE_MCQ \u003d \"mcq\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALID_DIFFICULTY_ALPHA \u003d \"1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALID_DIFFICULTY_BETA \u003d \"3\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALID_CATEGORY_GREENFIELD \u003d \"greenfield\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String VALID_CATEGORY_UML \u003d \"UML\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String QUESTION_TYPE_MCQ \u003d \" \" + PREFIX_QUESTION_TYPE + \"mcq\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final String QUESTION_DESC_ALPHA \u003d \" \" + PREFIX_QUESTION + VALID_MCQ_QUESTION_1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final String QUESTION_DESC_BETA \u003d \" \" + PREFIX_QUESTION + VALID_MCQ_QUESTION_2;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String CORRECT_ANSWER_DESC_BROWNFIELD \u003d \" \" + PREFIX_CORRECT + \"Brownfield\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String MCQ_WRONG_ANSWER_DESC \u003d \" \" + PREFIX_WRONG + \"Greenfield \" + PREFIX_WRONG + \"Blackfield \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            + PREFIX_WRONG + \"Whitefield\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final String QUESTION_TYPE_DESC \u003d \" \" + PREFIX_QUESTION_TYPE + VALID_QUESTION_TYPE_MCQ;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String DIFFICULTY_DESC_ALPHA \u003d \" \" + PREFIX_DIFFICULTY + VALID_DIFFICULTY_ALPHA;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String DIFFICULTY_DESC_BETA \u003d \" \" + PREFIX_DIFFICULTY + VALID_DIFFICULTY_BETA;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String CATEGORY_DESC_UML \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_UML;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String CATEGORY_DESC_GREENFIELD \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_GREENFIELD;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    // empty string not allowed for questions"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static final String INVALID_QUESTION_DESC \u003d \" \" + PREFIX_QUESTION + \"\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    // \u0027a\u0027 not allowed in difficulty"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static final String INVALID_DIFFICULTY_DESC \u003d \" \" + PREFIX_DIFFICULTY + \"911a\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    // category cannot just be whitespace"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static final String INVALID_CATEGORY_DESC \u003d \" \" + PREFIX_CATEGORY + \"\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final EditCommand.EditAnswerableDescriptor DESC_ALPHA;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final EditCommand.EditAnswerableDescriptor DESC_BETA;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final CommandResultBuilder COMMAND_RESULT_BUILDER_CORRECT_HELP_FALSE_EXIT_FALSE \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            new CommandResultBuilder().withCorrect(true)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withHelp(false).withExit(false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final CommandResultBuilder COMMAND_RESULT_BUILDER_WRONG_HELP_FALSE_EXIT_FALSE \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            new CommandResultBuilder().withCorrect(false)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withHelp(false).withExit(false);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Answer correctAnswer \u003d new Answer(\"CORRECT\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private static final ArrayList\u003cAnswer\u003e defaultCorrectAnswerList \u003d new ArrayList\u003c\u003e(Arrays.asList(correctAnswer));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Answer wrongAnswer \u003d new Answer(\"WRONG\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private static final ArrayList\u003cAnswer\u003e defaultWrongAnswerList \u003d new ArrayList\u003c\u003e(Arrays.asList(wrongAnswer));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        DESC_ALPHA \u003d new EditAnswerableDescriptorBuilder().withQuestion(VALID_MCQ_QUESTION_1)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withCorrectAnswerList(defaultCorrectAnswerList).withWrongAnswerList(defaultWrongAnswerList)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_ALPHA).withCategories(VALID_CATEGORY_UML).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        DESC_BETA \u003d new EditAnswerableDescriptorBuilder().withQuestion(VALID_MCQ_QUESTION_2)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withCorrectAnswerList(defaultCorrectAnswerList).withWrongAnswerList(defaultWrongAnswerList)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_BETA)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withCategories(VALID_CATEGORY_GREENFIELD, VALID_CATEGORY_UML).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", e);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            Model expectedModel) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResultBuilder().withFeedBack(expectedMessage).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * - the revision tool, filtered answerable list and selected answerable in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        RevisionTool expectedAddressBook \u003d new RevisionTool(actualModel.getRevisionTool());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        List\u003cAnswerable\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredAnswerableList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getRevisionTool());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredAnswerableList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the answerable at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * {@code model}\u0027s revision tool."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static void showAnswerableAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredAnswerableList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable answerable \u003d model.getFilteredAnswerableList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final String[] splitName \u003d answerable.getQuestion().question.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        model.updateFilteredAnswerableList(new QuestionContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(1, model.getFilteredAnswerableList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 47,
      "jxofficial": 29,
      "khiangleon": 15,
      "-": 63,
      "ShaunNgTX": 3
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.showAnswerableAtIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalIndexes.INDEX_FIRST_ANSWERABLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalIndexes.INDEX_SECOND_ANSWERABLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.getTypicalMcqs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.History;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMcqs(), new UserPrefs(), new History());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cAnswerable\u003e answerablesToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerablesToDelete.add(model.getFilteredAnswerableList().get(INDEX_FIRST_ANSWERABLE.getZeroBased()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cIndex\u003e indexToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        indexToDelete.add(INDEX_FIRST_ANSWERABLE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(indexToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                String.format(DeleteCommand.MESSAGE_DELETE_ANSWERABLE_SUCCESS, answerablesToDelete.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getRevisionTool(), new UserPrefs(), new History());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedModel.deleteAnswerable(model.getFilteredAnswerableList().get(INDEX_FIRST_ANSWERABLE.getZeroBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAnswerableList().size() + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cIndex\u003e indexToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        indexToDelete.add(outOfBoundIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(indexToDelete);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ANSWERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        showAnswerableAtIndex(model, INDEX_FIRST_ANSWERABLE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable answerableToDelete \u003d model.getFilteredAnswerableList().get(INDEX_FIRST_ANSWERABLE.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cIndex\u003e indexToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        indexToDelete.add(INDEX_FIRST_ANSWERABLE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(indexToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ANSWERABLE_SUCCESS, answerableToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getRevisionTool(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedModel.deleteAnswerable(answerableToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        showNoAnswerable(expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        showAnswerableAtIndex(model, INDEX_FIRST_ANSWERABLE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ANSWERABLE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of revision tool list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRevisionTool().getAnswerableList().size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cIndex\u003e indexToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        indexToDelete.add(outOfBoundIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(indexToDelete);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ANSWERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cIndex\u003e firstDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cIndex\u003e secondDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        firstDelete.add(INDEX_FIRST_ANSWERABLE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        secondDelete.add(INDEX_SECOND_ANSWERABLE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(firstDelete);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(secondDelete);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(firstDelete);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different answerable -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void showNoAnswerable(Model model) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        model.updateFilteredAnswerableList(p -\u003e false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(model.getFilteredAnswerableList().isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 58,
      "jxofficial": 3,
      "khiangleon": 3,
      "-": 52,
      "ShaunNgTX": 2
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/EditAnswerableDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.DESC_ALPHA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.DESC_BETA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_GREENFIELD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_DIFFICULTY_BETA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_MCQ_QUESTION_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand.EditAnswerableDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.testutil.builder.EditAnswerableDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class EditAnswerableDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditCommand.EditAnswerableDescriptor descriptorWithSameValues \u003d new EditAnswerableDescriptor(DESC_ALPHA);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(DESC_ALPHA.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(DESC_ALPHA.equals(DESC_ALPHA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(DESC_ALPHA.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(DESC_ALPHA.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(DESC_ALPHA.equals(DESC_BETA));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        EditCommand.EditAnswerableDescriptor editedAmy \u003d new EditAnswerableDescriptorBuilder(DESC_ALPHA)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .withQuestion(VALID_MCQ_QUESTION_2).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(DESC_ALPHA.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different difficulty -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        editedAmy \u003d new EditAnswerableDescriptorBuilder(DESC_ALPHA).withDifficulty(VALID_DIFFICULTY_BETA).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(DESC_ALPHA.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different categories -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        editedAmy \u003d new EditAnswerableDescriptorBuilder(DESC_ALPHA).withCategories(VALID_CATEGORY_GREENFIELD).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(DESC_ALPHA.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 18,
      "jxofficial": 5,
      "khiangleon": 2,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.DESC_ALPHA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.DESC_BETA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_GREENFIELD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_DIFFICULTY_BETA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_MCQ_QUESTION_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.showAnswerableAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalIndexes.INDEX_FIRST_ANSWERABLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalIndexes.INDEX_SECOND_ANSWERABLE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_INVALID_CORRECT_ANSWER_LIST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.getTypicalMcqs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand.EditAnswerableDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.History;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.RevisionTool;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Mcq;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.McqBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.testutil.builder.AnswerableBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.testutil.builder.EditAnswerableDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMcqs(), new UserPrefs(), new History());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable editedAnswerable \u003d new McqBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditAnswerableDescriptor descriptor \u003d new EditAnswerableDescriptorBuilder(editedAnswerable).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ANSWERABLE, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ANSWERABLE_SUCCESS, editedAnswerable);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RevisionTool(model.getRevisionTool()),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                new UserPrefs(), new History());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedModel.setAnswerable(model.getFilteredAnswerableList().get(0), editedAnswerable);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Index indexLastAnswerable \u003d Index.fromOneBased(model.getFilteredAnswerableList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable lastAnswerable \u003d model.getFilteredAnswerableList().get(indexLastAnswerable.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        AnswerableBuilder answerableInList \u003d new McqBuilder(lastAnswerable);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Answerable editedAnswerable \u003d answerableInList.withQuestion(VALID_MCQ_QUESTION_2)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_BETA)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .withCategories(VALID_CATEGORY_GREENFIELD).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        EditAnswerableDescriptor descriptor \u003d new EditAnswerableDescriptorBuilder().withQuestion(VALID_MCQ_QUESTION_2)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_BETA).withCategories(VALID_CATEGORY_GREENFIELD).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastAnswerable, descriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ANSWERABLE_SUCCESS, editedAnswerable);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RevisionTool(model.getRevisionTool()),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                new UserPrefs(), new History());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedModel.setAnswerable(lastAnswerable, editedAnswerable);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ANSWERABLE, new EditAnswerableDescriptor());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable editedAnswerable \u003d model.getFilteredAnswerableList().get(INDEX_FIRST_ANSWERABLE.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ANSWERABLE_SUCCESS, editedAnswerable);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RevisionTool(model.getRevisionTool()),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                new UserPrefs(), new History());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_filteredList_success() throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        showAnswerableAtIndex(model, INDEX_FIRST_ANSWERABLE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        Answerable answerableInFilteredList \u003d model.getFilteredAnswerableList()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .get(INDEX_FIRST_ANSWERABLE.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable editedAnswerable \u003d new McqBuilder(answerableInFilteredList)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .withQuestion(VALID_MCQ_QUESTION_2).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ANSWERABLE,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                new EditAnswerableDescriptorBuilder().withQuestion(VALID_MCQ_QUESTION_2).build());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_ANSWERABLE_SUCCESS, editedAnswerable);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new RevisionTool(model.getRevisionTool()),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                new UserPrefs(), new History());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedModel.setAnswerable(model.getFilteredAnswerableList().get(0), editedAnswerable);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void parse_multipleCorrectAnswer_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditAnswerableDescriptor descriptor \u003d new EditAnswerableDescriptorBuilder()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .withCorrectAnswerList(MCQ_INVALID_CORRECT_ANSWER_LIST).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_ANSWERABLE, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertCommandFailure(editCommand, model, Mcq.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void execute_duplicateAnswerableUnfilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable firstAnswerable \u003d model.getFilteredAnswerableList().get(INDEX_FIRST_ANSWERABLE.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditAnswerableDescriptor descriptor \u003d new EditAnswerableDescriptorBuilder(firstAnswerable).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_ANSWERABLE, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_ANSWERABLE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void execute_duplicateAnswerableFilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        showAnswerableAtIndex(model, INDEX_FIRST_ANSWERABLE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // edit answerable in filtered list into a duplicate in revision tool"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        Answerable answerableInList \u003d model.getRevisionTool().getAnswerableList()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .get(INDEX_SECOND_ANSWERABLE.getZeroBased());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_ANSWERABLE,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                new EditAnswerableDescriptorBuilder(answerableInList).build());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_ANSWERABLE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void execute_invalidAnswerableIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAnswerableList().size() + 1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        EditAnswerableDescriptor descriptor \u003d new EditAnswerableDescriptorBuilder()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .withQuestion(VALID_MCQ_QUESTION_2).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_ANSWERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * but smaller than size of revision tool"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void execute_invalidAnswerableIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        showAnswerableAtIndex(model, INDEX_FIRST_ANSWERABLE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ANSWERABLE;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of revision tool list"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getRevisionTool().getAnswerableList().size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                new EditAnswerableDescriptorBuilder().withQuestion(VALID_MCQ_QUESTION_2).build());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_ANSWERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_ANSWERABLE, DESC_ALPHA);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditAnswerableDescriptor copyDescriptor \u003d new EditAnswerableDescriptor(DESC_ALPHA);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_ANSWERABLE, copyDescriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_ANSWERABLE, DESC_ALPHA)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_ANSWERABLE, DESC_BETA)));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 73,
      "jxofficial": 14,
      "khiangleon": 12,
      "-": 88,
      "ShaunNgTX": 11
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.main.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResultBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_exit_success() throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResultBuilder().withFeedBack(MESSAGE_EXIT_ACKNOWLEDGEMENT)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .withExit(true).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 7,
      "jxofficial": 3,
      "khiangleon": 2,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_ANSWERABLES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_E;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_F;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_G;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.getTypicalMcqs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.History;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMcqs(), new UserPrefs(), new History());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalMcqs(), new UserPrefs(), new History());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        QuestionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                new QuestionContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        QuestionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                new QuestionContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different answerable -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_zeroKeywords_noAnswerableFound() throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ANSWERABLES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedModel.updateFilteredAnswerableList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredAnswerableList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_multipleKeywords_multipleAnswerablesFound() throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ANSWERABLES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedModel.updateFilteredAnswerableList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertEquals(Arrays.asList(MCQ_E, MCQ_F, MCQ_G), model.getFilteredAnswerableList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses {@code userInput} into a {@code QuestionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private QuestionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new QuestionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 22,
      "jxofficial": 8,
      "khiangleon": 4,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.main.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResultBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_help_success() throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResultBuilder().withFeedBack(SHOWING_HELP_MESSAGE)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .withHelp(true).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 7,
      "jxofficial": 3,
      "khiangleon": 2,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/HistoryCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.main.HistoryCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResultBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.main.HistoryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.quiz.Statistics;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private Model actualModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private Statistics statistics \u003d new Statistics(\"25/25,10/10,8/8,7/7\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_historyEmptyModel_success() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResultBuilder()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withFeedBack(\"You have not attempted any quizzes yet!\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_historyActualModel_success() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.actualModel.addStatistics(statistics);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResultBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withFeedBack(String.format(MESSAGE_SUCCESS + actualModel.getStatisticsList()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                        + \"\\nYou have attempted \" + actualModel.getStatisticsList().size()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                        + \" quizzes so far.\")).withHistory(true).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), actualModel, expectedCommandResult, actualModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 39
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.getTypicalMcqs;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.History;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.CategoryPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.DifficultyPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    //TODO: Make into actual stub"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private static CategoryPredicate categoryPredicateStub \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            new CategoryPredicate(new Category(\"CATEGORY\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private static DifficultyPredicate difficultyPredicateStub \u003d new DifficultyPredicate(new Difficulty(\"1\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        model \u003d new ModelManager(getTypicalMcqs(), new UserPrefs(), new History());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getRevisionTool(), new UserPrefs(), new History());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertCommandSuccess(new ListCommand(categoryPredicateStub, difficultyPredicateStub),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        showAnswerableAtIndex(model, INDEX_FIRST_ANSWERABLE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertCommandSuccess(new ListCommand(categoryPredicateStub, difficultyPredicateStub),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 9,
      "jxofficial": 2,
      "khiangleon": 15,
      "-": 23,
      "ShaunNgTX": 1
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/RestoreCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static seedu.revision.logic.commands.main.RestoreCommand.SHOWING_CONFIRMATION_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResultBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.RestoreCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class RestoreCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void execute_restore_success() throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResultBuilder().withFeedBack(SHOWING_CONFIRMATION_MESSAGE)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                .withRestore(true).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertCommandSuccess(new RestoreCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "ShaunNgTX": 23
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/StartCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResultBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.StartCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.quiz.ArcadeMode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.quiz.CustomMode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.quiz.Mode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.quiz.NormalMode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class StartCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private Mode modeNormal \u003d new NormalMode();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private Mode modeArcade \u003d new ArcadeMode();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private Mode modeCustom \u003d new CustomMode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void execute_startNormal_success() throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResultBuilder().withFeedBack("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                String.format(Messages.MESSAGE_ANSWERABLES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                model.getFilteredAnswerableList().size())).withStart(true).withMode(modeNormal).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertCommandSuccess(new StartCommand(modeNormal), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void execute_startArcade_success() throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResultBuilder().withFeedBack("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                String.format(Messages.MESSAGE_ANSWERABLES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                        model.getFilteredAnswerableList().size())).withStart(true).withMode(modeArcade).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertCommandSuccess(new StartCommand(modeArcade), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void execute_startCustom_success() throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResultBuilder().withFeedBack("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                String.format(Messages.MESSAGE_ANSWERABLES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                        model.getFilteredAnswerableList().size())).withStart(true).withMode(modeCustom).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertCommandSuccess(new StartCommand(modeCustom), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 4,
      "ShaunNgTX": 48
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/StatsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.main.StatsCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResultBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.commands.main.StatsCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.quiz.Statistics;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "public class StatsCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private Model actualModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private Statistics statistics \u003d new Statistics(\"25/25,10/10,8/8,7/7\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_statsEmptyModel_success() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResultBuilder()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withFeedBack(\"You have not attempted any quizzes yet!\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertCommandSuccess(new StatsCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void execute_statsActualModel_success() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.actualModel.addStatistics(statistics);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResultBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withFeedBack(MESSAGE_SUCCESS).withStats(true).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertCommandSuccess(new StatsCommand(), actualModel, expectedCommandResult, actualModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 38
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/quiz/McqInputCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "package seedu.revision.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.COMMAND_RESULT_BUILDER_CORRECT_HELP_FALSE_EXIT_FALSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_A_COMMAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class McqInputCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void execute_mcqCorrectAnswer_feedbackCorrect() throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String rightOption \u003d getRightOption();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String rightOptionUppercase \u003d rightOption.toUpperCase();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Command command \u003d new McqInputCommand(rightOption, MCQ_A);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Command commandUpperCase \u003d new McqInputCommand(rightOptionUppercase, MCQ_A);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(COMMAND_RESULT_BUILDER_CORRECT_HELP_FALSE_EXIT_FALSE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            assertCommandSuccess(command, model,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                    expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            assertCommandSuccess(commandUpperCase, model,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                    expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            throw new ParseException(McqInputCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void execute_mcqWrongAnswer_feedbackWrong() throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        ArrayList\u003cString\u003e wrongOptionsList \u003d getWrongOptionsList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String firstWrongOption \u003d wrongOptionsList.get(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Command command \u003d new McqInputCommand(firstWrongOption, MCQ_A);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Command commandUppercase \u003d new McqInputCommand(firstWrongOption.toUpperCase(), MCQ_A);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(COMMAND_RESULT_BUILDER_CORRECT_HELP_FALSE_EXIT_FALSE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            assertCommandSuccess(command, model,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            assertCommandSuccess(commandUppercase, model,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                    expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            throw new ParseException(McqInputCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Command commandCopy \u003d new McqInputCommand(\"a\", MCQ_A);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(MCQ_A_COMMAND.equals(commandCopy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertTrue(commandCopy.equals(commandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertFalse(commandCopy.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertFalse(commandCopy.equals(10));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertFalse(commandCopy.equals(\"TestString\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private String getRightOption() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Answer correctAnswer \u003d MCQ_A.getCorrectAnswerList().get(0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        int index \u003d MCQ_A.getCombinedAnswerList().indexOf(correctAnswer);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String rightOption;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        switch (index) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            rightOption \u003d \"a\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            rightOption \u003d \"b\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            rightOption \u003d \"c\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            rightOption \u003d \"d\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            rightOption \u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        requireNonNull(rightOption);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return rightOption;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private ArrayList\u003cString\u003e getWrongOptionsList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String correctOption \u003d getRightOption();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        ArrayList\u003cString\u003e wrongOptionsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        wrongOptionsList.add(\"a\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        wrongOptionsList.add(\"b\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        wrongOptionsList.add(\"c\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        wrongOptionsList.add(\"d\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        wrongOptionsList.remove(correctOption);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertEquals(3, wrongOptionsList.size());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return wrongOptionsList;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 66,
      "ShaunNgTX": 55
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/quiz/SaqInputCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "package seedu.revision.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.COMMAND_RESULT_BUILDER_CORRECT_HELP_FALSE_EXIT_FALSE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.COMMAND_RESULT_BUILDER_WRONG_HELP_FALSE_EXIT_FALSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalSaqs.SAQ_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalSaqs.SAQ_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalSaqs.SAQ_B_COMMAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class SaqInputCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void execute_saqMatchingAnswer_correct() throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Command commandResult \u003d new SaqInputCommand("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                \"Unit Testing\", SAQ_A);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(COMMAND_RESULT_BUILDER_CORRECT_HELP_FALSE_EXIT_FALSE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            assertCommandSuccess(commandResult, model,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throw new ParseException(TfInputCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void execute_saqRandomAnswer_wrong() throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Command commandResult \u003d new SaqInputCommand(\"I don\u0027t know\", SAQ_A);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(COMMAND_RESULT_BUILDER_WRONG_HELP_FALSE_EXIT_FALSE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            assertCommandSuccess(commandResult, model,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throw new ParseException(TfInputCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Command commandCopy \u003d new SaqInputCommand(\"UML Diagram\", SAQ_B);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertEquals(commandCopy, SAQ_B_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertEquals(commandCopy, commandCopy);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(commandCopy.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(commandCopy.equals(10));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(commandCopy.equals(\"TestString\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 63,
      "ShaunNgTX": 4
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/commands/quiz/TfInputCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "package seedu.revision.logic.commands.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.COMMAND_RESULT_BUILDER_CORRECT_HELP_FALSE_EXIT_FALSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.COMMAND_RESULT_BUILDER_WRONG_HELP_FALSE_EXIT_FALSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalTrueFalse.TF_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalTrueFalse.TF_A_COMMAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class TfInputCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void execute_tfAnswerTrueCaseInsensitive_correct() throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Command commandNormal \u003d new TfInputCommand(\"True\", TF_A);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Command commandUpperCase \u003d new TfInputCommand(\"TRUE\", TF_A);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Command commandLowerCase \u003d new TfInputCommand(\"true\", TF_A);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Command commandRandomCase \u003d new TfInputCommand(\"tRuE\", TF_A);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(COMMAND_RESULT_BUILDER_CORRECT_HELP_FALSE_EXIT_FALSE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            assertCommandSuccess(commandNormal, model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            assertCommandSuccess(commandUpperCase, model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            assertCommandSuccess(commandLowerCase, model,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            assertCommandSuccess(commandRandomCase, model,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throw new ParseException(TfInputCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void execute_tfAnswerFalseCaseInsensitve_wrong() throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Command commandNormal \u003d new TfInputCommand(\"False\", TF_A);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Command commandUpperCase \u003d new TfInputCommand(\"FALSE\", TF_A);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Command commandLowerCase \u003d new TfInputCommand(\"false\", TF_A);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Command commandRandomCase \u003d new TfInputCommand(\"faLSE\", TF_A);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(COMMAND_RESULT_BUILDER_WRONG_HELP_FALSE_EXIT_FALSE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            assertCommandSuccess(commandNormal, model,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            assertCommandSuccess(commandUpperCase, model,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            assertCommandSuccess(commandLowerCase, model,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            assertCommandSuccess(commandRandomCase, model,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            throw new ParseException(TfInputCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Command commandCopy \u003d new TfInputCommand(\"True\", TF_A);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertEquals(TF_A_COMMAND, commandCopy);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(commandCopy.equals(commandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(commandCopy.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(commandCopy.equals(10));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(commandCopy.equals(\"TestString\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 80,
      "ShaunNgTX": 4
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.CATEGORY_DESC_GREENFIELD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.CATEGORY_DESC_UML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.CORRECT_ANSWER_DESC_BROWNFIELD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.DIFFICULTY_DESC_ALPHA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.DIFFICULTY_DESC_BETA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.INVALID_DIFFICULTY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.MCQ_WRONG_ANSWER_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.QUESTION_DESC_ALPHA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.QUESTION_DESC_BETA;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.QUESTION_TYPE_MCQ;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_GREENFIELD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_UML;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_DIFFICULTY_BETA;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_MCQ_QUESTION_2;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_B;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.AddCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.main.AddCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.McqBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable expectedAnswerable \u003d new McqBuilder(MCQ_B).withCategories(VALID_CATEGORY_UML).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String userInput \u003d (PREAMBLE_WHITESPACE + QUESTION_TYPE_MCQ + QUESTION_DESC_BETA + DIFFICULTY_DESC_BETA"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + CORRECT_ANSWER_DESC_BROWNFIELD + MCQ_WRONG_ANSWER_DESC + CATEGORY_DESC_UML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + QUESTION_TYPE_MCQ + QUESTION_DESC_BETA"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + DIFFICULTY_DESC_BETA + CORRECT_ANSWER_DESC_BROWNFIELD + MCQ_WRONG_ANSWER_DESC + CATEGORY_DESC_UML,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                new AddCommand(expectedAnswerable));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        // multiple question - last question accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseSuccess(parser, QUESTION_TYPE_MCQ + QUESTION_DESC_ALPHA + QUESTION_DESC_BETA"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + DIFFICULTY_DESC_BETA + CORRECT_ANSWER_DESC_BROWNFIELD + MCQ_WRONG_ANSWER_DESC + CATEGORY_DESC_UML,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                new AddCommand(expectedAnswerable));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // multiple difficulty - last difficulty accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseSuccess(parser, QUESTION_TYPE_MCQ + QUESTION_DESC_BETA + DIFFICULTY_DESC_ALPHA"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + DIFFICULTY_DESC_BETA + CORRECT_ANSWER_DESC_BROWNFIELD + MCQ_WRONG_ANSWER_DESC + CATEGORY_DESC_UML,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                new AddCommand(expectedAnswerable));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // multiple categories - all accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable expectedAnswerableMultipleTags \u003d new McqBuilder(MCQ_B).withCategories(VALID_CATEGORY_UML,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                VALID_CATEGORY_GREENFIELD).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseSuccess(parser, QUESTION_TYPE_MCQ + QUESTION_DESC_BETA + DIFFICULTY_DESC_BETA"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + CORRECT_ANSWER_DESC_BROWNFIELD + MCQ_WRONG_ANSWER_DESC + CATEGORY_DESC_GREENFIELD + CATEGORY_DESC_UML,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                new AddCommand(expectedAnswerableMultipleTags));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        // missing question prefix"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertParseFailure(parser, VALID_MCQ_QUESTION_2 + DIFFICULTY_DESC_BETA, expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // missing difficulty prefix"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseFailure(parser, QUESTION_DESC_BETA + VALID_DIFFICULTY_BETA, expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertParseFailure(parser, VALID_MCQ_QUESTION_2 + VALID_DIFFICULTY_BETA, expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseFailure(parser, QUESTION_TYPE_MCQ + INVALID_QUESTION_DESC + CORRECT_ANSWER_DESC_BROWNFIELD"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                + MCQ_WRONG_ANSWER_DESC + DIFFICULTY_DESC_BETA + CATEGORY_DESC_GREENFIELD + CATEGORY_DESC_UML,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // invalid difficulty"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseFailure(parser, QUESTION_TYPE_MCQ + QUESTION_DESC_BETA + CORRECT_ANSWER_DESC_BROWNFIELD"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + MCQ_WRONG_ANSWER_DESC + INVALID_DIFFICULTY_DESC + CATEGORY_DESC_GREENFIELD"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + CATEGORY_DESC_UML, Difficulty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + QUESTION_TYPE_MCQ + QUESTION_DESC_BETA"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + DIFFICULTY_DESC_BETA + CORRECT_ANSWER_DESC_BROWNFIELD + MCQ_WRONG_ANSWER_DESC"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + CATEGORY_DESC_GREENFIELD + CATEGORY_DESC_UML, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 43,
      "neoshh": 2,
      "jxofficial": 5,
      "khiangleon": 14,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String argsString \u003d \"  some random string /cat category with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 148
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/ClearCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.main.ClearCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.main.ParserManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class ClearCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private ClearCommandParser parser \u003d new ClearCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final ParserManager parserManager \u003d new ParserManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void parse_validArgs_returnsClearCommand() throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(parserManager.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                ClearCommandParser.MESSAGE_ADDITIONAL_COMMAND_BEHIND));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "ShaunNgTX": 26
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parserManager} is successful and the command created"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static void assertQuizParseSuccess(QuizParser parserManager, String userInput,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                                              Answerable answerable, Command expectedCommand) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            Command command \u003d parserManager.parse(userInput, answerable);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parserManager} is unsuccessful and the error message"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static void assertParseFailure(Parser parserManager, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            parserManager.parse(userInput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static void assertQuizParseFailure(QuizParser parser, String userInput,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                                              Answerable answerable, String expectedMessage) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            parser.parse(userInput, answerable);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 35,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalIndexes.INDEX_FIRST_ANSWERABLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.main.DeleteCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cIndex\u003e indexToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        indexToDelete.add(INDEX_FIRST_ANSWERABLE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(indexToDelete));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 9,
      "jxofficial": 2,
      "khiangleon": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.CATEGORY_DESC_GREENFIELD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.CATEGORY_DESC_UML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.CORRECT_ANSWER_DESC_BROWNFIELD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.DIFFICULTY_DESC_ALPHA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.DIFFICULTY_DESC_BETA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.INVALID_DIFFICULTY_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.INVALID_QUESTION_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.MCQ_WRONG_ANSWER_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.QUESTION_DESC_ALPHA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.QUESTION_TYPE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_GREENFIELD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_UML;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_DIFFICULTY_ALPHA;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_DIFFICULTY_BETA;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_MCQ_QUESTION_1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalIndexes.INDEX_FIRST_ANSWERABLE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalIndexes.INDEX_SECOND_ANSWERABLE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalIndexes.INDEX_THIRD_ANSWERABLE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand.EditAnswerableDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.main.EditCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.testutil.builder.EditAnswerableDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String CATEGORY_EMPTY \u003d \" \" + PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertParseFailure(parser, VALID_MCQ_QUESTION_1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseFailure(parser, \"-5\" + QUESTION_DESC_ALPHA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseFailure(parser, \"0\" + QUESTION_DESC_ALPHA, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        // invalid question"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUESTION_DESC, Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        // invalid difficulty"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DIFFICULTY_DESC, Difficulty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CATEGORY_DESC, Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // invalid difficultty"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DIFFICULTY_DESC, Difficulty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        // valid difficulty followed by invalid difficulty. The test case for invalid difficulty"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        // followed by valid difficulty is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertParseFailure(parser, \"1\" + DIFFICULTY_DESC_BETA + INVALID_DIFFICULTY_DESC,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                Difficulty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // while parsing {@code PREFIX_CATEGORY} alone will reset the categories of the {@code Answerable} being edited,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // parsing it together with a valid category results in error"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_DESC_UML + CATEGORY_DESC_GREENFIELD + CATEGORY_EMPTY,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_DESC_UML + CATEGORY_EMPTY + CATEGORY_DESC_GREENFIELD,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertParseFailure(parser, \"1\" + CATEGORY_EMPTY + CATEGORY_DESC_UML + CATEGORY_DESC_GREENFIELD,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_QUESTION_DESC + CORRECT_ANSWER_DESC_BROWNFIELD"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                + MCQ_WRONG_ANSWER_DESC + VALID_DIFFICULTY_ALPHA, Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // editing question type is not allowed"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertParseFailure(parser, \"1\" + QUESTION_TYPE_DESC + QUESTION_DESC_ALPHA,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                EditCommand.MESSAGE_CANNOT_EDIT_TYPE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ANSWERABLE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DIFFICULTY_DESC_BETA + CATEGORY_DESC_GREENFIELD"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + QUESTION_DESC_ALPHA + CATEGORY_DESC_UML;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        EditCommand.EditAnswerableDescriptor descriptor \u003d new EditAnswerableDescriptorBuilder()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .withQuestion(VALID_MCQ_QUESTION_1).withDifficulty(VALID_DIFFICULTY_BETA)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withCategories(VALID_CATEGORY_GREENFIELD, VALID_CATEGORY_UML).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ANSWERABLE;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DIFFICULTY_DESC_BETA;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        EditAnswerableDescriptor descriptor \u003d new EditAnswerableDescriptorBuilder()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_BETA).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ANSWERABLE;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + QUESTION_DESC_ALPHA;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        EditAnswerableDescriptor descriptor \u003d new EditAnswerableDescriptorBuilder()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .withQuestion(VALID_MCQ_QUESTION_1).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // difficulty"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DIFFICULTY_DESC_ALPHA;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor \u003d new EditAnswerableDescriptorBuilder().withDifficulty(VALID_DIFFICULTY_ALPHA).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_UML;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor \u003d new EditAnswerableDescriptorBuilder().withCategories(VALID_CATEGORY_UML).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ANSWERABLE;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DIFFICULTY_DESC_ALPHA + CATEGORY_DESC_UML"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + DIFFICULTY_DESC_ALPHA + CATEGORY_DESC_UML + DIFFICULTY_DESC_BETA"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + CATEGORY_DESC_GREENFIELD;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        EditAnswerableDescriptor descriptor \u003d new EditAnswerableDescriptorBuilder()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_BETA)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .withCategories(VALID_CATEGORY_UML, VALID_CATEGORY_GREENFIELD).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ANSWERABLE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DIFFICULTY_DESC + DIFFICULTY_DESC_BETA;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        EditCommand.EditAnswerableDescriptor descriptor \u003d new EditAnswerableDescriptorBuilder()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .withDifficulty(VALID_DIFFICULTY_BETA).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_DIFFICULTY_DESC + DIFFICULTY_DESC_BETA;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor \u003d new EditAnswerableDescriptorBuilder().withDifficulty(VALID_DIFFICULTY_BETA).build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 54,
      "jxofficial": 9,
      "khiangleon": 34,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.main.FindCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                new FindCommand(new QuestionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 6,
      "jxofficial": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/HelpCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.main.HelpCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.main.ParserManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class HelpCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private HelpCommandParser parser \u003d new HelpCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final ParserManager parserManager \u003d new ParserManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void parse_validArgs_returnsClearCommand() throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(parserManager.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                HelpCommandParser.MESSAGE_ADDITIONAL_COMMAND_BEHIND));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "ShaunNgTX": 26
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/HistoryCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.HistoryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.main.HistoryCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.main.ParserManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class HistoryCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private HistoryCommandParser parser \u003d new HistoryCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final ParserManager parserManager \u003d new ParserManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void parse_validArgs_returnsHistoryCommand() throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(parserManager.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                HistoryCommandParser.MESSAGE_ADDITIONAL_COMMAND_BEHIND));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "ShaunNgTX": 26
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/McqInputCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertQuizParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertQuizParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_A_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.quiz.McqInputCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.quiz.McqInputCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class McqInputCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private QuizParser\u003cMcqInputCommand\u003e parser \u003d new McqInputCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void parse_validInput_returnsMcqInputCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertQuizParseSuccess(parser, \"a\", MCQ_A, MCQ_A_COMMAND);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void parse_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertQuizParseFailure(parser, \"z\", MCQ_A,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, McqInputCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 28
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/ParserManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalIndexes.INDEX_FIRST_ANSWERABLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_C;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.RestoreCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.StartCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.StatsCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.quiz.McqInputCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.main.ParserManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.AnswerableUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.McqBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.testutil.builder.EditAnswerableDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class ParserManagerTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final ParserManager parser \u003d new ParserManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable answerable \u003d new McqBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AnswerableUtil.getAddCommand(answerable));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(new AddCommand(answerable), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ANSWERABLE.getOneBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ArrayList\u003cIndex\u003e indexToDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        indexToDelete.add(INDEX_FIRST_ANSWERABLE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(new DeleteCommand(indexToDelete), command);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Answerable answerable \u003d new McqBuilder().build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        EditCommand.EditAnswerableDescriptor descriptor \u003d new EditAnswerableDescriptorBuilder(answerable).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                + INDEX_FIRST_ANSWERABLE.getOneBased() + \" \" + AnswerableUtil"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .getEditAnswerableDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_ANSWERABLE, descriptor), command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(new FindCommand(new QuestionContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void parseCommand_restore() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertTrue(parser.parseCommand(RestoreCommand.COMMAND_WORD) instanceof RestoreCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void parseCommand_stats() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertTrue(parser.parseCommand(StatsCommand.COMMAND_WORD) instanceof StatsCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" diff/1\") instanceof ListCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void parseCommand_start() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(parser.parseCommand(StartCommand.COMMAND_WORD + \" mode/normal\") instanceof StartCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(parser.parseCommand(StartCommand.COMMAND_WORD + \" mode/custom\") instanceof StartCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(parser.parseCommand(StartCommand.COMMAND_WORD + \" mode/arcade\") instanceof StartCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void parseCommand_mcqInput() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(parser.parseCommand(\"A\", MCQ_C) instanceof McqInputCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(parser.parseCommand(\"d\", MCQ_C) instanceof McqInputCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    //TODO: Add TrueFalse and SAQ"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void parseCommand_unknownQuizCommand_throwsParseException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            McqInputCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"unknownCommand\", MCQ_C));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 47,
      "jxofficial": 13,
      "khiangleon": 2,
      "-": 65,
      "ShaunNgTX": 20
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalIndexes.INDEX_FIRST_ANSWERABLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String INVALID_QUESTION \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String INVALID_DIFFICULTY \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String VALID_QUESTION \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String VALID_DIFFICULTY \u003d \"1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static final String VALID_CATEGORY_1 \u003d \"OOP\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static final String VALID_CATEGORY_2 \u003d \"git\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(INDEX_FIRST_ANSWERABLE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(INDEX_FIRST_ANSWERABLE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void parseQuestion_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseQuestion((String) null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void parseQuestion_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseQuestion(INVALID_QUESTION));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void parseQuestion_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Question expectedQuestion \u003d new Question(VALID_QUESTION);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedQuestion, ParserUtil.parseQuestion(VALID_QUESTION));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void parseQuestion_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String questionWithWhitespace \u003d WHITESPACE + VALID_QUESTION + WHITESPACE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Question expectedQuestion \u003d new Question(VALID_QUESTION);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedQuestion, ParserUtil.parseQuestion(questionWithWhitespace));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void parseDifficulty_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDifficulty((String) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void parseDifficulty_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDifficulty(INVALID_DIFFICULTY));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void parseDifficulty_validValueWithoutWhitespace_returnsDifficulty() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Difficulty expectedDifficulty \u003d new Difficulty(VALID_DIFFICULTY);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedDifficulty, ParserUtil.parseDifficulty(VALID_DIFFICULTY));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void parseDifficulty_validValueWithWhitespace_returnsTrimmedDifficulty() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String difficultyWithWhitespace \u003d WHITESPACE + VALID_DIFFICULTY + WHITESPACE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Difficulty expectedDifficulty \u003d new Difficulty(VALID_DIFFICULTY);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedDifficulty, ParserUtil.parseDifficulty(difficultyWithWhitespace));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void parseCategory_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategory(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void parseCategory_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCategory(INVALID_CATEGORY));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void parseCategory_validValueWithoutWhitespace_returnsCategory() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY_1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(VALID_CATEGORY_1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void parseCategory_validValueWithWhitespace_returnsTrimmedCategory() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String categoryWithWhitespace \u003d VALID_CATEGORY_1 + WHITESPACE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY_1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(categoryWithWhitespace));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void parseCategories_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategory(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void parseCategories_collectionWithInvalidCategories_throwsParseException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .parseCategories(Arrays.asList(VALID_CATEGORY_1, INVALID_CATEGORY)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void parseCategories_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(ParserUtil.parseCategories(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void parseCategories_collectionWithValidCategoriess_returnsCategorySet() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Set\u003cCategory\u003e actualCategorySet \u003d ParserUtil.parseCategories(Arrays.asList(VALID_CATEGORY_1, VALID_CATEGORY_2));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        Set\u003cCategory\u003e expectedCategorySet \u003d new HashSet\u003cCategory\u003e("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            Arrays.asList(new Category(VALID_CATEGORY_1), new Category(VALID_CATEGORY_2)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertEquals(expectedCategorySet, actualCategorySet);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 36,
      "jxofficial": 21,
      "khiangleon": 5,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/RestoreCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.RestoreCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.main.ClearCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.main.ParserManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.main.RestoreCommandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class RestoreCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private RestoreCommandParser parser \u003d new RestoreCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final ParserManager parserManager \u003d new ParserManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void parse_validArgs_returnsClearCommand() throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(parserManager.parseCommand(RestoreCommand.COMMAND_WORD) instanceof RestoreCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                ClearCommandParser.MESSAGE_ADDITIONAL_COMMAND_BEHIND));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "ShaunNgTX": 27
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/SaqInputCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertQuizParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertQuizParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalSaqs.SAQ_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalSaqs.SAQ_B_COMMAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.quiz.SaqInputCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.quiz.SaqInputCommandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class SaqInputCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private QuizParser\u003cSaqInputCommand\u003e parser \u003d new SaqInputCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void parse_validInput_returnsMcqInputCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertQuizParseSuccess(parser, \"UML Diagram\", SAQ_B, SAQ_B_COMMAND);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void parse_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertQuizParseFailure(parser, \" \", MCQ_A,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SaqInputCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 29
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/StatsCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.main.StatsCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.main.ParserManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.parser.main.StatsCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class StatsCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private StatsCommandParser parser \u003d new StatsCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final ParserManager parserManager \u003d new ParserManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void parse_validArgs_returnsStatsCommand() throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(parserManager.parseCommand(StatsCommand.COMMAND_WORD) instanceof StatsCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                StatsCommandParser.MESSAGE_ADDITIONAL_COMMAND_BEHIND));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "ShaunNgTX": 26
    }
  },
  {
    "path": "src/test/java/seedu/revision/logic/parser/TfInputCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertQuizParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.parser.CommandParserTestUtil.assertQuizParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalTrueFalse.TF_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalTrueFalse.TF_A_COMMAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.quiz.TfInputCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.parser.quiz.TfInputCommandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class TfInputCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private QuizParser\u003cTfInputCommand\u003e parser \u003d new TfInputCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void parse_validInput_returnsTfInputCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertQuizParseSuccess(parser, \"True\", TF_A, TF_A_COMMAND);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void parse_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertQuizParseFailure(parser, \"not true\", MCQ_A,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, TfInputCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 29
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/HistoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.testutil.TypicalHistory.getTypicalHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "public class HistoryTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private final History history \u003d new History();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertEquals(Collections.emptyList(), history.getStatisticsList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e history.resetData(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void resetData_withValidReadOnlyHistory_replacesData() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        History newData \u003d getTypicalHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        history.resetData(newData);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertEquals(newData, history);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void getStatisticsList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e history.getStatisticsList().remove(0));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khiangleon": 40
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.model.Model.PREDICATE_SHOW_ALL_ANSWERABLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_C;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_D;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.testutil.builder.RevisionToolBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertEquals(new RevisionTool(), new RevisionTool(modelManager.getRevisionTool()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        userPrefs.setRevisionToolFilePath(Paths.get(\"revision/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        userPrefs.setRevisionToolFilePath(Paths.get(\"new/revision/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setRevisionToolFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Path path \u003d Paths.get(\"revision/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        modelManager.setRevisionToolFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertEquals(path, modelManager.getRevisionToolFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void hasAnswerable_nullAnswerable_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasAnswerable(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void hasAnswerable_answerableNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(modelManager.hasAnswerable(MCQ_C));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void hasAnswerable_answerableInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        modelManager.addAnswerable(MCQ_C);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(modelManager.hasAnswerable(MCQ_C));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void getFilteredAnswerableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredAnswerableList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        RevisionTool revisionTool \u003d new RevisionToolBuilder().withAnswerable(MCQ_C)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .withAnswerable(MCQ_D).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        RevisionTool differentRevisionTool \u003d new RevisionTool();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        History history \u003d new History();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        modelManager \u003d new ModelManager(revisionTool, userPrefs, history);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(revisionTool, userPrefs, history);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different revision tool -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentRevisionTool, userPrefs, history)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String[] keywords \u003d MCQ_C.getQuestion().question.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        modelManager.updateFilteredAnswerableList(new QuestionContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(revisionTool, userPrefs, history)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        modelManager.updateFilteredAnswerableList(PREDICATE_SHOW_ALL_ANSWERABLE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        differentUserPrefs.setRevisionToolFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(revisionTool, differentUserPrefs, history)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 15,
      "jxofficial": 9,
      "khiangleon": 1,
      "-": 96,
      "ShaunNgTX": 13
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/RevisionToolTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_GREENFIELD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_C;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.getTypicalMcqs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.exceptions.DuplicateAnswerableException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.McqBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class RevisionToolTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private final RevisionTool revisionTool \u003d new RevisionTool();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertEquals(Collections.emptyList(), revisionTool.getAnswerableList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e revisionTool.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void resetData_withValidReadOnlyRevisionTool_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        RevisionTool newData \u003d getTypicalMcqs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        revisionTool.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertEquals(newData, revisionTool);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void resetData_withDuplicateAnswerable_throwsDuplicateAnswerableException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // Two answerables with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Answerable editedAlice \u003d new McqBuilder(MCQ_C).withCategories(VALID_CATEGORY_GREENFIELD)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        List\u003cAnswerable\u003e newAnswerables \u003d Arrays.asList(MCQ_C, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        RevisionToolStub newData \u003d new RevisionToolStub(newAnswerables);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertThrows(DuplicateAnswerableException.class, () -\u003e revisionTool.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void hasAnswerable_nullAnswerable_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e revisionTool.hasAnswerable(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void hasAnswerable_answerableNotInRevisionTool_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(revisionTool.hasAnswerable(MCQ_C));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public void hasAnswerable_answerableInRevisionTool_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        revisionTool.addAnswerable(MCQ_C);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(revisionTool.hasAnswerable(MCQ_C));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void getAnswerableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e revisionTool.getAnswerableList().remove(0));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * A stub ReadOnlyRevisionTool whose answerables list can violate interface constraints."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private static class RevisionToolStub implements ReadOnlyRevisionTool {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        private final ObservableList\u003cAnswerable\u003e answerables \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        RevisionToolStub(Collection\u003cAnswerable\u003e answerables) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            this.answerables.setAll(answerables);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        public ObservableList\u003cAnswerable\u003e getAnswerableList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            return answerables;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 14,
      "jxofficial": 8,
      "-": 55,
      "ShaunNgTX": 16
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setRevisionToolFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 2,
      "-": 18,
      "ShaunNgTX": 1
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/answerable/AnswerCheckerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "neoshh"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "neoshh"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "neoshh"
        },
        "content": "class AnswerCheckerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    void checkTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        boolean result \u003d AnswerChecker.check(\"10\", new Saq(new Question(\"How many fingers does a \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                + \"person have?\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"ten\"))),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                new Difficulty(\"1\"), getCategorySet(\"random\")));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        assertTrue(result);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        result \u003d AnswerChecker.check(\"uml\", new Saq(new Question(\"What diagram is used to represent \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                + \"a software system?\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"UML diagram\"))),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                new Difficulty(\"1\"), getCategorySet(\"random\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        assertTrue(result);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        result \u003d AnswerChecker.check(\"regression test\", new Saq(new Question(\"Name one functional \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                + \"testing used in software engineering.\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"Unit Testing\"), new Answer(\"Integration Testing\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                        new Answer(\"System Testing\"), new Answer(\"Sanity Testing\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                        new Answer(\"Smoke Testing\"), new Answer(\"Interface Testing\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                        new Answer(\"Regression Testing\"), new Answer(\"Acceptance Testing\"))),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                new Difficulty(\"2\"), getCategorySet(\"Software Testing\")));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        assertTrue(result);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        result \u003d AnswerChecker.check(\"13\", new Saq(new Question(\"How many fingers does a person have?\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"ten\"))),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                new Difficulty(\"1\"), getCategorySet(\"random\")));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        assertFalse(result);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        result \u003d AnswerChecker.check(\"block diagram\", new Saq(new Question(\"What diagram is used to \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                + \"represent a software system?\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"UML diagram\"))),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                new Difficulty(\"1\"), getCategorySet(\"random\")));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        assertFalse(result);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        result \u003d AnswerChecker.check(\"bug testing\", new Saq(new Question(\"Name one functional testing \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                + \"used in software engineering.\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"Unit Testing\"), new Answer(\"Integration Testing\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                        new Answer(\"System Testing\"), new Answer(\"Sanity Testing\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                        new Answer(\"Smoke Testing\"), new Answer(\"Interface Testing\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                        new Answer(\"Regression Testing\"), new Answer(\"Acceptance Testing\"))),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                new Difficulty(\"2\"), getCategorySet(\"Software Testing\")));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        assertFalse(result);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "neoshh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     * Returns a category set containing the list of strings given."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "neoshh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    public static Set\u003cCategory\u003e getCategorySet(String... strings) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "neoshh"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                .map(Category::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "neoshh"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "neoshh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "neoshh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "neoshh": 70
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/answerable/AnswerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class AnswerTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Question(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void constructor_invalidAnswer_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String invalidAnswer \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Answer(invalidAnswer));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void isValidAnswer() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Boundary Value Analysis. EPs: [0],[1-150],[151, INT_MAX]. Not possible to have negative number of characters."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // null question"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Answer.isValidAnswer(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Boundary Value: Empty strings and whitespace characters"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Boundary Value: 150 characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"123456789 123456789 123456789 123456789 123456789 123456789 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"123456789 \")); //150 characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Boundary Value: 151 characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Answer.isValidAnswer(\"123456789 123456789 123456789 123456789 123456789 123456789 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"123456789 1\")); //151 characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // other valid questions"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"greenfield\")); // alphabets"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"week 2\")); // alphanumeric characters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"What is the Capital of Singapore?\")); // with capital letters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(Answer.isValidAnswer(\"With a question mark?\")); // with question mark"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 47
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/answerable/DifficultyTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class DifficultyTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Difficulty(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void constructor_invalidDifficulty_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String invalidDifficulty \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Difficulty(invalidDifficulty));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void isValidDifficulty() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // null difficulty"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Difficulty.isValidDifficulty(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // invalid difficulty"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Difficulty.isValidDifficulty(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Difficulty.isValidDifficulty(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Difficulty.isValidDifficulty(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Difficulty.isValidDifficulty(\"difficulty\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Difficulty.isValidDifficulty(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Difficulty.isValidDifficulty(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Boundary Value Analysis. EPs: [INT_MIN, 0], [1-3], [4, INT_MAX]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Difficulty.isValidDifficulty(\"0\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Difficulty.isValidDifficulty(\"4\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(Difficulty.isValidDifficulty(\"1\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(Difficulty.isValidDifficulty(\"3\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 41
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/answerable/McqTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_GREENFIELD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_DIFFICULTY_BETA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_MCQ_QUESTION_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_C;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_CORRECT_ANSWER_A;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_VALID_CORRECT_ANSWER_LIST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_VALID_WRONG_ANSWER_LIST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_WRONG_ANSWER_A;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.McqBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class McqTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new McqBuilder().withQuestion(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void isValidMcq() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Boundary Value Analysis. EPs:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // Number of Correct answers: [0], [1]* [2, INT_MAX]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // Number of Wrong answers: [0-2], [3]*, [4, INT_MAX]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // * represents the valid input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Valid Mcq"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Mcq validMcq \u003d new McqBuilder().withCorrectAnswerList(MCQ_VALID_CORRECT_ANSWER_LIST)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .withWrongAnswerList(MCQ_VALID_WRONG_ANSWER_LIST).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(Mcq.isValidMcq(validMcq));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Invalid Mcqs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Boundary Value 0 Correct Answers i.e. Empty List"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Mcq mcqWithNoCorrectAnswers \u003d new McqBuilder().withCorrectAnswerList(new ArrayList\u003c\u003e())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .withWrongAnswerList(MCQ_VALID_WRONG_ANSWER_LIST).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Mcq.isValidMcq(mcqWithNoCorrectAnswers));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Boundary Value 2 Correct Answers i.e. Empty List"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Mcq mcqWithTwoCorrectAnswers \u003d new McqBuilder().withCorrectAnswerList(new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                Arrays.asList(new Answer(\"one\"), new Answer(\"two\"))))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .withWrongAnswerList(MCQ_VALID_WRONG_ANSWER_LIST).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Mcq.isValidMcq(mcqWithTwoCorrectAnswers));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Boundary Value 2 wrong answers"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Mcq mcqWithTwoWrongAnswers \u003d new McqBuilder().withCorrectAnswerList(MCQ_VALID_CORRECT_ANSWER_LIST)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .withWrongAnswerList(new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"one\"), new Answer(\"two\")))).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Mcq.isValidMcq(mcqWithTwoWrongAnswers));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Boundary Value 4 wrong answers"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Mcq mcqWithFourWrongAnswers \u003d new McqBuilder().withCorrectAnswerList(MCQ_VALID_CORRECT_ANSWER_LIST)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .withWrongAnswerList(new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                        new Answer(\"one\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                        new Answer(\"two\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                        new Answer(\"three\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                        new Answer(\"four\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                ))).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Mcq.isValidMcq(mcqWithFourWrongAnswers));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Null Value"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Mcq.isValidMcq(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Mcq mcq \u003d new McqBuilder().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e mcq.getCategories().remove(0));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void isCorrect() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(MCQ_C.isAnswerCorrect(MCQ_CORRECT_ANSWER_A));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(MCQ_C.isAnswerCorrect(MCQ_WRONG_ANSWER_A));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e MCQ_C.isAnswerCorrect(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    //Concrete method implemented by abstract alass Answerable."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void isSameAnswerable() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(MCQ_C.isSameAnswerable(MCQ_C));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(MCQ_C.isSameAnswerable(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Answerable editedAnswerable \u003d new McqBuilder(MCQ_C).withQuestion(VALID_MCQ_QUESTION_2).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(MCQ_C.isSameAnswerable(editedAnswerable));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // same question, same difficulty, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        editedAnswerable \u003d new McqBuilder(MCQ_C).withCategories(VALID_CATEGORY_GREENFIELD).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(MCQ_C.isSameAnswerable(editedAnswerable));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // same question, same difficulty, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        editedAnswerable \u003d new McqBuilder(MCQ_C).withCategories(VALID_CATEGORY_GREENFIELD).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(MCQ_C.isSameAnswerable(editedAnswerable));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Answerable answerableCopy \u003d new McqBuilder(MCQ_C).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(MCQ_C.equals(answerableCopy));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(MCQ_C.equals(MCQ_C));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(MCQ_C.equals(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(MCQ_C.equals(5));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different answerable -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(MCQ_C.equals(MCQ_B));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Answerable editedAnswerable \u003d new McqBuilder(MCQ_C).withQuestion(VALID_MCQ_QUESTION_2).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(MCQ_C.equals(editedAnswerable));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different difficulty -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        editedAnswerable \u003d new McqBuilder(MCQ_C).withDifficulty(VALID_DIFFICULTY_BETA).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(MCQ_C.equals(editedAnswerable));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different categories -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        editedAnswerable \u003d new McqBuilder(MCQ_C).withCategories(VALID_CATEGORY_GREENFIELD).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(MCQ_C.equals(editedAnswerable));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 76,
      "jxofficial": 25,
      "khiangleon": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/answerable/QuestionContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.predicates.QuestionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.McqBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class QuestionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        QuestionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                new QuestionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        QuestionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                new QuestionContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        QuestionContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                new QuestionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // different answerable -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                new QuestionContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(predicate.test(new McqBuilder().withQuestion(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(predicate.test(new McqBuilder().withQuestion(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(predicate.test(new McqBuilder().withQuestion(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(predicate.test(new McqBuilder().withQuestion(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void test_questionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        QuestionContainsKeywordsPredicate predicate \u003d new QuestionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(predicate.test(new McqBuilder().withQuestion(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(predicate.test(new McqBuilder().withQuestion(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // Keywords match difficulty, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        predicate \u003d new QuestionContainsKeywordsPredicate(Arrays.asList(\"12345\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(predicate.test(new McqBuilder().withQuestion(\"Alice\").withDifficulty(\"1\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 71,
      "khiangleon": 8
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/answerable/QuestionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class QuestionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Question(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void constructor_invalidQuestion_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String invalidQuestion \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Question(invalidQuestion));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void isValidQuestion() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Boundary Value Analysis. EPs: [0],[1-300],[301, INT_MAX]. Not possible to have negative number of characters."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // null question"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Question.isValidQuestion(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Boundary Value: Empty strings and whitespace characters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Question.isValidQuestion(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Question.isValidQuestion(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Boundary Value: 300 characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"123456789 123456789 123456789 123456789 123456789 123456789 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"123456789 123456789 123456789 123456789 \"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Boundary Value: 301 characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(Question.isValidQuestion(\"123456789 123456789 123456789 123456789 123456789 123456789 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                + \"123456789 123456789 123456789 123456789 1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // other valid questions"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"greenfield\")); // alphabets"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"week 2\")); // alphanumeric characters"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"What is the Capital of Singapore?\")); // with capital letters"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(Question.isValidQuestion(\"With a question mark?\")); // with question mark"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 50
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/answerable/SaqTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_GREENFIELD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_DIFFICULTY_BETA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_SAQ_QUESTION_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalSaqs.SAQ_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalSaqs.SAQ_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalSaqs.SAQ_CORRECT_ANSWER_LIST_A;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.testutil.builder.SaqBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class SaqTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SaqBuilder().withQuestion(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void isValidSaq() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        //Boundary Value Analysis. EPs:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // Number of Correct answers: [0], [1, INT_MAX]*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // Number of Wrong answers: [0]*, [1, INT_MAX] no way to create am Saq object with non-zero wrong answers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // * represents the valid input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        //Valid Saq with multiple answers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Saq validSaq \u003d new SaqBuilder().withCorrectAnswerList(SAQ_CORRECT_ANSWER_LIST_A).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(Saq.isValidSaq(validSaq));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        //Invalid Saqs"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        //Boundary Value 0 Correct Answers i.e. Empty List"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Saq saqWithNoCorrectAnswers \u003d new SaqBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .withCorrectAnswerList(new ArrayList\u003c\u003e()).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(Saq.isValidSaq(saqWithNoCorrectAnswers));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        //Null Value"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Saq.isValidSaq(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Saq saq \u003d new SaqBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e saq.getCategories().remove(0));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void isAnswerCorrect() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(SAQ_A.isAnswerCorrect(new Answer(\"Unit Testing\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(SAQ_A.isAnswerCorrect(new Answer(\"Definitely wrong\")));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e SAQ_A.isAnswerCorrect(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    //Concrete method implemented by abstract class Answerable."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void isSameAnswerable() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(SAQ_B.isSameAnswerable(SAQ_B));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(SAQ_B.isSameAnswerable(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Answerable editedAnswerable \u003d new SaqBuilder(SAQ_B).withQuestion(VALID_SAQ_QUESTION_1).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(SAQ_B.isSameAnswerable(editedAnswerable));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // same question, same difficulty, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        editedAnswerable \u003d new SaqBuilder(SAQ_B).withCategories(VALID_CATEGORY_GREENFIELD).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(SAQ_B.isSameAnswerable(editedAnswerable));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // same question, different difficulty, same attributes -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        editedAnswerable \u003d new SaqBuilder(SAQ_B).withDifficulty(VALID_DIFFICULTY_BETA).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(SAQ_B.isSameAnswerable(editedAnswerable));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Answerable answerableCopy \u003d new SaqBuilder(SAQ_B).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(SAQ_B.equals(answerableCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(SAQ_B.equals(SAQ_B));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(SAQ_B.equals(5));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // different answerable -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(SAQ_B.equals(SAQ_A));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Answerable editedAnswerable \u003d new SaqBuilder(SAQ_B).withQuestion(VALID_SAQ_QUESTION_1).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(SAQ_B.equals(editedAnswerable));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // different difficulty -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        editedAnswerable \u003d new SaqBuilder(SAQ_B).withDifficulty(VALID_DIFFICULTY_BETA).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(SAQ_B.equals(editedAnswerable));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // different categories -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        editedAnswerable \u003d new SaqBuilder(SAQ_B).withCategories(VALID_CATEGORY_GREENFIELD).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(SAQ_B.equals(editedAnswerable));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 110
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/answerable/TrueFalseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_GREENFIELD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_DIFFICULTY_BETA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_TF_QUESTION_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_TF_QUESTION_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalTrueFalse.TF_A;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalTrueFalse.TF_ANSWER_FALSE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalTrueFalse.TF_ANSWER_TRUE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalTrueFalse.TF_B;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalTrueFalse.TF_C;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalTrueFalse.TF_TRUE_ANSWER_LIST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.testutil.builder.TrueFalseBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class TrueFalseTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TrueFalseBuilder().withQuestion(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void isValidTrueFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        //Boundary Value Analysis. EPs:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // Number of Correct answers: [0], [1]* [2, INT_MAX]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // Number of Wrong answers: [0]*, [1, INT_MAX] no way to create a TrueFalse object with non-zero wrong answers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // * represents the valid input."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        //Valid TrueFalse question"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        TrueFalse validTrueFalse \u003d new TrueFalseBuilder().withCorrectAnswerList(TF_TRUE_ANSWER_LIST).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(TrueFalse.isValidTrueFalse(validTrueFalse));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        //Invalid TrueFalse questions"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        //Boundary Value 0 Correct Answers i.e. Empty List"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        TrueFalse trueFalseWithNoCorrectAnswers \u003d new TrueFalseBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .withCorrectAnswerList(new ArrayList\u003c\u003e()).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(TrueFalse.isValidTrueFalse(trueFalseWithNoCorrectAnswers));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        //Boundary Value 2 Correct Answers"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        TrueFalse trueFalseWithTwoTruesAsCorrectAnswers \u003d new TrueFalseBuilder()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .withCorrectAnswerList(new ArrayList\u003c\u003e(Arrays.asList(TF_ANSWER_TRUE, TF_ANSWER_TRUE)))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(TrueFalse.isValidTrueFalse(trueFalseWithTwoTruesAsCorrectAnswers));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        //Null Value"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TrueFalse.isValidTrueFalse(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        TrueFalse trueFalse \u003d new TrueFalseBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e trueFalse.getCategories().remove(0));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void isAnswerCorrect() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(TF_A.isAnswerCorrect(TF_ANSWER_TRUE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(TF_A.isAnswerCorrect(TF_ANSWER_FALSE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TF_A.isAnswerCorrect(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    //Concrete method implemented by abstract class Answerable."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void isSameAnswerable() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(TF_B.isSameAnswerable(TF_B));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(TF_B.isSameAnswerable(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Answerable editedAnswerable \u003d new TrueFalseBuilder(TF_B).withQuestion(VALID_TF_QUESTION_1).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(TF_B.isSameAnswerable(editedAnswerable));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // same question, same difficulty, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        editedAnswerable \u003d new TrueFalseBuilder(TF_B).withCategories(VALID_CATEGORY_GREENFIELD).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(TF_B.isSameAnswerable(editedAnswerable));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // same question, different difficulty, same attributes -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        editedAnswerable \u003d new TrueFalseBuilder(TF_B).withDifficulty(VALID_DIFFICULTY_BETA).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(TF_B.isSameAnswerable(editedAnswerable));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Answerable answerableCopy \u003d new TrueFalseBuilder(TF_C).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(TF_C.equals(answerableCopy));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(TF_C.equals(TF_C));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(TF_C.equals(5));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // different answerable -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(TF_C.equals(TF_B));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // different question -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Answerable editedAnswerable \u003d new TrueFalseBuilder(TF_C).withQuestion(VALID_TF_QUESTION_2).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(TF_C.equals(editedAnswerable));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // different difficulty -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        editedAnswerable \u003d new TrueFalseBuilder(TF_C).withDifficulty(VALID_DIFFICULTY_BETA).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(TF_C.equals(editedAnswerable));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // different categories -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        editedAnswerable \u003d new TrueFalseBuilder(TF_C).withCategories(VALID_CATEGORY_GREENFIELD).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(TF_C.equals(editedAnswerable));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 121
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/answerable/UniqueAnswerableListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.answerable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_GREENFIELD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_C;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.exceptions.AnswerableNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.answerable.exceptions.DuplicateAnswerableException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.McqBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class UniqueAnswerableListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final UniqueAnswerableList uniqueAnswerableList \u003d new UniqueAnswerableList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void contains_nullAnswerable_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAnswerableList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertFalse(uniqueAnswerableList.contains(MCQ_C));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        uniqueAnswerableList.add(MCQ_C);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(uniqueAnswerableList.contains(MCQ_C));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        uniqueAnswerableList.add(MCQ_C);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Answerable editedAlice \u003d new McqBuilder(MCQ_C).withCategories(VALID_CATEGORY_GREENFIELD)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertTrue(uniqueAnswerableList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void add_nullAnswerable_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAnswerableList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void add_duplicateAnswerable_throwsDuplicateAnswerableException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        uniqueAnswerableList.add(MCQ_C);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(DuplicateAnswerableException.class, () -\u003e uniqueAnswerableList.add(MCQ_C));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerable_nullTargetAnswerable_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAnswerableList.setAnswerable(null, MCQ_C));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerable_nullEditedAnswerable_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAnswerableList.setAnswerable(MCQ_C, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerable_targetAnswerableNotInList_throwsAnswerableNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertThrows(AnswerableNotFoundException.class, () -\u003e uniqueAnswerableList"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                .setAnswerable(MCQ_C, MCQ_C));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerable_editedAnswerableIsSameAnswerable_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        uniqueAnswerableList.add(MCQ_C);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        uniqueAnswerableList.setAnswerable(MCQ_C, MCQ_C);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        UniqueAnswerableList expectedUniqueAnswerableList \u003d new UniqueAnswerableList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        expectedUniqueAnswerableList.add(MCQ_C);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedUniqueAnswerableList, uniqueAnswerableList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerable_editedAnswerableHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        uniqueAnswerableList.add(MCQ_C);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        Answerable editedAlice \u003d new McqBuilder(MCQ_C).withCategories(VALID_CATEGORY_GREENFIELD)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        uniqueAnswerableList.setAnswerable(MCQ_C, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        UniqueAnswerableList expectedUniqueAnswerableList \u003d new UniqueAnswerableList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedUniqueAnswerableList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedUniqueAnswerableList, uniqueAnswerableList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerable_editedAnswerableHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        uniqueAnswerableList.add(MCQ_C);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        uniqueAnswerableList.setAnswerable(MCQ_C, MCQ_B);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        UniqueAnswerableList expectedUniqueAnswerableList \u003d new UniqueAnswerableList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedUniqueAnswerableList.add(MCQ_B);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedUniqueAnswerableList, uniqueAnswerableList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerable_editedAnswerableHasNonUniqueIdentity_throwsDuplicateAnswerableException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        uniqueAnswerableList.add(MCQ_C);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uniqueAnswerableList.add(MCQ_B);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(DuplicateAnswerableException.class, () -\u003e uniqueAnswerableList.setAnswerable(MCQ_C, MCQ_B));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void remove_nullAnswerable_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAnswerableList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void remove_personDoesNotExist_throwsAnswerableNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(AnswerableNotFoundException.class, () -\u003e uniqueAnswerableList.remove(MCQ_C));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void remove_existingAnswerable_removesAnswerable() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        uniqueAnswerableList.add(MCQ_C);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        uniqueAnswerableList.remove(MCQ_C);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        UniqueAnswerableList expectedUniqueAnswerableList \u003d new UniqueAnswerableList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedUniqueAnswerableList, uniqueAnswerableList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerables_nullUniqueAnswerableList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAnswerableList"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .setAnswerables((UniqueAnswerableList) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerables_uniqueAnswerableList_replacesOwnListWithProvidedUniqueAnswerableList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        uniqueAnswerableList.add(MCQ_C);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        UniqueAnswerableList expectedUniqueAnswerableList \u003d new UniqueAnswerableList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedUniqueAnswerableList.add(MCQ_B);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uniqueAnswerableList.setAnswerables(expectedUniqueAnswerableList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedUniqueAnswerableList, uniqueAnswerableList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerables_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAnswerableList.setAnswerables((List\u003cAnswerable\u003e) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerables_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        uniqueAnswerableList.add(MCQ_C);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        List\u003cAnswerable\u003e answerableList \u003d Collections.singletonList(MCQ_B);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uniqueAnswerableList.setAnswerables(answerableList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        UniqueAnswerableList expectedUniqueAnswerableList \u003d new UniqueAnswerableList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        expectedUniqueAnswerableList.add(MCQ_B);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedUniqueAnswerableList, uniqueAnswerableList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerables_listWithDuplicateAnswerables_throwsDuplicateAnswerableException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        List\u003cAnswerable\u003e listWithDuplicateAnswerables \u003d Arrays.asList(MCQ_C, MCQ_C);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertThrows(DuplicateAnswerableException.class, () -\u003e uniqueAnswerableList"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                .setAnswerables(listWithDuplicateAnswerables));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            -\u003e uniqueAnswerableList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 139,
      "jxofficial": 27,
      "khiangleon": 6
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/category/CategoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.model.category;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class CategoryTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Category(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void constructor_invalidCategoryName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        String invalidCategoryName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Category(invalidCategoryName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public void isValidCategoryName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        // null Category name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Category.isValidCategory(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "jxofficial": 23
    }
  },
  {
    "path": "src/test/java/seedu/revision/model/quiz/StatisticsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.model.quiz;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "public class StatisticsTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Statistics(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void constructor_invalidStatistics_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        String invalidStatistics \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Statistics(invalidStatistics));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public void isValidStatistics() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        // null statistics"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Statistics.isValidStatistics(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        // invalid statistics"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(\"91\")); // one number"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(\"Statistics\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertFalse(Statistics.isValidStatistics(\"25/25,a/a,b/b,c/c\")); // alphabets in scores"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        // valid statistics"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        assertTrue(Statistics.isValidStatistics(\"25/25,10/10,8/8,7/7\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khiangleon": 41
    }
  },
  {
    "path": "src/test/java/seedu/revision/storage/JsonAdaptedAnswerableTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.storage.JsonAdaptedAnswerable.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_D;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class JsonAdaptedAnswerableTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String INVALID_QUESTION \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String INVALID_DIFFICULTY \u003d \"+651234\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String VALID_QUESTION_TYPE \u003d \"MCQ\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static final String VALID_QUESTION \u003d MCQ_D.getQuestion().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static final List\u003cJsonAdaptedAnswer\u003e VALID_CORRECT_ANSWER \u003d MCQ_D.getCorrectAnswerList().stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            .map(JsonAdaptedAnswer::new)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static final List\u003cJsonAdaptedAnswer\u003e VALID_WRONG_ANSWER \u003d MCQ_D.getWrongAnswerList().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            .map(JsonAdaptedAnswer::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static final String VALID_DIFFICULTY \u003d MCQ_D.getDifficulty().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static final List\u003cJsonAdaptedCategory\u003e VALID_CATEGORIES \u003d MCQ_D.getCategories().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .map(JsonAdaptedCategory::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        JsonAdaptedAnswerable answerable \u003d new JsonAdaptedAnswerable(MCQ_D);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertEquals(MCQ_D, answerable.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        JsonAdaptedAnswerable person \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                new JsonAdaptedAnswerable(VALID_QUESTION_TYPE, INVALID_QUESTION, VALID_CORRECT_ANSWER,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                        VALID_WRONG_ANSWER, VALID_DIFFICULTY, VALID_CATEGORIES);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String expectedMessage \u003d Question.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        JsonAdaptedAnswerable person \u003d new JsonAdaptedAnswerable(VALID_QUESTION_TYPE, null, VALID_CORRECT_ANSWER,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                VALID_WRONG_ANSWER, VALID_DIFFICULTY, VALID_CATEGORIES);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Question.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void toModelType_invalidDifficulty_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        JsonAdaptedAnswerable person \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                new JsonAdaptedAnswerable(VALID_QUESTION_TYPE, VALID_QUESTION, VALID_CORRECT_ANSWER, VALID_WRONG_ANSWER,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                        INVALID_DIFFICULTY, VALID_CATEGORIES);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        String expectedMessage \u003d Difficulty.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void toModelType_nullDifficulty_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        JsonAdaptedAnswerable person \u003d new JsonAdaptedAnswerable(VALID_QUESTION_TYPE, VALID_QUESTION,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                VALID_CORRECT_ANSWER, VALID_WRONG_ANSWER, null, VALID_CATEGORIES);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Difficulty.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        List\u003cJsonAdaptedCategory\u003e invalidCategories \u003d new ArrayList\u003c\u003e(VALID_CATEGORIES);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        invalidCategories.add(new JsonAdaptedCategory(INVALID_CATEGORY));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        JsonAdaptedAnswerable person \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                new JsonAdaptedAnswerable(VALID_QUESTION_TYPE, VALID_QUESTION, VALID_CORRECT_ANSWER, VALID_WRONG_ANSWER,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                VALID_DIFFICULTY, invalidCategories);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 30,
      "jxofficial": 9,
      "khiangleon": 6,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/revision/storage/JsonRevisionToolStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.H_ANSWERABLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.I_ANSWERABLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_C;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.getTypicalMcqs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.ReadOnlyRevisionTool;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.RevisionTool;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class JsonRevisionToolStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonRevisionToolStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void readRevisionTool_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readRevisionTool(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private java.util.Optional\u003cReadOnlyRevisionTool\u003e readRevisionTool(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return new JsonRevisionToolStorage(Paths.get(filePath)).readRevisionTool(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertFalse(readRevisionTool(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRevisionTool(\"notJsonFormatTestBank.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void readRevisionTool_invalidAnswerableRevisionTool_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRevisionTool(\"invalidAnswerableTestBank.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void readRevisionTool_invalidAndValidAnswerableRevisionTool_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRevisionTool(\"invalidAndValidAnswerableTestBank.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void readAndSaveRevisionTool_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        RevisionTool original \u003d getTypicalMcqs();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        JsonRevisionToolStorage jsonRevisionToolStorage \u003d new JsonRevisionToolStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        jsonRevisionToolStorage.saveRevisionTool(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        ReadOnlyRevisionTool readBack \u003d jsonRevisionToolStorage.readRevisionTool(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertEquals(original, new RevisionTool(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        original.addAnswerable(H_ANSWERABLE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        jsonRevisionToolStorage.saveRevisionTool(original, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        readBack \u003d jsonRevisionToolStorage.readRevisionTool(filePath).get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        original.removeAnswerable(MCQ_C);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        jsonRevisionToolStorage.saveRevisionTool(original, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        readBack \u003d jsonRevisionToolStorage.readRevisionTool(filePath).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertEquals(original, new RevisionTool(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        original.addAnswerable(I_ANSWERABLE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        jsonRevisionToolStorage.saveRevisionTool(original); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        readBack \u003d jsonRevisionToolStorage.readRevisionTool().get(); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertEquals(original, new RevisionTool(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void saveRevisionTool_nullRevisionTool_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveRevisionTool(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Saves {@code revisionTool} at the specified {@code filePath}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void saveRevisionTool(ReadOnlyRevisionTool revisionTool, String filePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "            new JsonRevisionToolStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    .saveRevisionTool(revisionTool, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void saveRevisionTool_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveRevisionTool(new RevisionTool(), null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 31,
      "jxofficial": 6,
      "-": 66,
      "ShaunNgTX": 9
    }
  },
  {
    "path": "src/test/java/seedu/revision/storage/JsonSerializableRevisionToolTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.RevisionTool;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.testutil.TypicalMcqs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class JsonSerializableRevisionToolTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableRevisionToolTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Path TYPICAL_ANSWERABLES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalAnswerableTestBank.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Path INVALID_ANSWERABLE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidAnswerableTestBank.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Path DUPLICATE_ANSWERABLE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateAnswerableTestBank.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void toModelType_typicalAnswerablesFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        JsonSerializableRevisionTool dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ANSWERABLES_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                JsonSerializableRevisionTool.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        RevisionTool addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        RevisionTool typicalAnswerablesAddressBook \u003d TypicalMcqs.getTypicalMcqs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(addressBookFromFile, typicalAnswerablesAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void toModelType_invalidAnswerableFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        JsonSerializableRevisionTool dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ANSWERABLE_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                JsonSerializableRevisionTool.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void toModelType_duplicateAnswerables_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        JsonSerializableRevisionTool dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ANSWERABLE_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "                JsonSerializableRevisionTool.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableRevisionTool.MESSAGE_DUPLICATE_ANSWERABLE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 12,
      "jxofficial": 1,
      "khiangleon": 2,
      "-": 23,
      "ShaunNgTX": 11
    }
  },
  {
    "path": "src/test/java/seedu/revision/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        userPrefs.setRevisionToolFilePath(Paths.get(\"revisiontool.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 5,
      "-": 117,
      "ShaunNgTX": 1
    }
  },
  {
    "path": "src/test/java/seedu/revision/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.getTypicalMcqs;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.ReadOnlyRevisionTool;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.RevisionTool;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        JsonRevisionToolStorage revisionToolStorage \u003d new JsonRevisionToolStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        JsonHistoryStorage historyStorage \u003d new JsonHistoryStorage(getTempFilePath(\"hist\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        storageManager \u003d new StorageManager(revisionToolStorage, userPrefsStorage, historyStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "         * {@link JsonRevisionToolStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonRevisionToolStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        RevisionTool original \u003d getTypicalMcqs();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        storageManager.saveRevisionTool(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        ReadOnlyRevisionTool retrieved \u003d storageManager.readRevisionTool().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertEquals(original, new RevisionTool(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        assertNotNull(storageManager.getRevisionToolFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "jxofficial": 2,
      "khiangleon": 1,
      "-": 53,
      "ShaunNgTX": 10
    }
  },
  {
    "path": "src/test/java/seedu/revision/stubs/HistoryStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.quiz.Statistics;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.quiz.StatisticsList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Wraps all data of statistics."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class HistoryStub implements ReadOnlyHistory {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final StatisticsList statistics;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        statistics \u003d new StatisticsList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public HistoryStub() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Creates a quiz history using the Statistics in the {@code toBeCopied}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public HistoryStub(ReadOnlyHistory toBeCopied) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Replaces the contents of the statistics list with {@code statistics}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setStatistics(List\u003cStatistics\u003e statistics) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.statistics.setStatistics(statistics);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Resets the existing data of this {@code History} with {@code newData}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void resetData(ReadOnlyHistory newData) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        setStatistics(newData.getStatisticsList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Adds a statistics to the history."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void addStatistics(Statistics s) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        statistics.add(s);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return statistics.asUnmodifiableObservableList().size() + \" quiz attempts in total\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the total number of quiz attempts shown from history."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return total number of statistics"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return statistics.asUnmodifiableObservableList().size();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns an unmodifiable view of the list of statistics."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ObservableList\u003cStatistics\u003e getStatisticsList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return statistics.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                || (other instanceof HistoryStub // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                \u0026\u0026 statistics.equals(((HistoryStub) other).statistics));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return statistics.hashCode();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 96
    }
  },
  {
    "path": "src/test/java/seedu/revision/stubs/ModelStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyRevisionTool;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.quiz.Statistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Path getRevisionToolFilePath() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Path getHistoryFilePath() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setRevisionToolFilePath(Path revisionToolFilePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setHistoryFilePath(Path historyFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void addAnswerable(Answerable answerable) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void addStatistics(Statistics statistics) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setRevisionTool(ReadOnlyRevisionTool newData) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setHistory(ReadOnlyHistory newData) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ReadOnlyRevisionTool getRevisionTool() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ReadOnlyHistory getHistory() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean hasAnswerable(Answerable answerable) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void deleteAnswerable(Answerable target) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setAnswerable(Answerable target, Answerable editedAnswerable) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ObservableList\u003cAnswerable\u003e getFilteredAnswerableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ObservableList\u003cStatistics\u003e getStatisticsList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void updateFilteredAnswerableList(Predicate\u003cAnswerable\u003e predicate) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void removeFiltersFromAnswerableList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 123
    }
  },
  {
    "path": "src/test/java/seedu/revision/stubs/ModelStubAcceptingAnswerableAdded.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyRevisionTool;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.RevisionTool;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A Model stub that always accept the answerable being added."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class ModelStubAcceptingAnswerableAdded extends ModelStub {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    final ArrayList\u003cAnswerable\u003e answerablesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean hasAnswerable(Answerable answerable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(answerable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answerablesAdded.stream().anyMatch(answerable::isSameAnswerable);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void addAnswerable(Answerable answerable) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(answerable);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerablesAdded.add(answerable);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ReadOnlyRevisionTool getRevisionTool() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new RevisionTool();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ArrayList\u003cAnswerable\u003e getAnswerablesAdded() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return answerablesAdded;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 38
    }
  },
  {
    "path": "src/test/java/seedu/revision/stubs/ModelStubWithAnswerable.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A Model stub that contains a single answerable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class ModelStubWithAnswerable extends ModelStub {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private final Answerable answerable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public ModelStubWithAnswerable(Answerable answerable) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(answerable);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.answerable \u003d answerable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public boolean hasAnswerable(Answerable answerable) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        requireNonNull(answerable);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this.answerable.isSameAnswerable(answerable);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 24
    }
  },
  {
    "path": "src/test/java/seedu/revision/stubs/StorageStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.stubs;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyRevisionTool;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/** Storage stub used for dependency injection.**/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class StorageStub implements Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Initialises the storage stub.**/"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public StorageStub() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //do nothing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Path getRevisionToolFilePath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Optional\u003cReadOnlyRevisionTool\u003e readRevisionTool() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Optional\u003cReadOnlyRevisionTool\u003e readRevisionTool(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void saveRevisionTool(ReadOnlyRevisionTool revisionTool) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //do nothing"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void saveRevisionTool(ReadOnlyRevisionTool revisionTool, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //do nothing"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Path getHistoryFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readHistory() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readHistory(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void saveHistory(ReadOnlyHistory history) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //do nothing"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void saveHistory(ReadOnlyHistory history, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //do nothing"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 86
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/AnswerableUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_CORRECT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_DIFFICULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_QUESTION_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.parser.CliSyntax.PREFIX_WRONG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Mcq;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A utility class for Answerable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class AnswerableUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns an add command string for adding the {@code answerable}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String getAddCommand(Answerable answerable) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getAnswerableDetails(answerable);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the part of command string for the given {@code answerable}\u0027s details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String getAnswerableDetails(Answerable answerable) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (answerable instanceof Mcq) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            sb.append(PREFIX_QUESTION_TYPE + \"mcq\" + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            answerable.getWrongAnswerList().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                s -\u003e sb.append(PREFIX_WRONG + s.toString() + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            sb.append(PREFIX_QUESTION_TYPE + \"saq\" + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        sb.append(PREFIX_QUESTION + answerable.getQuestion().question + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        sb.append(PREFIX_DIFFICULTY + answerable.getDifficulty().difficulty + \" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerable.getCorrectAnswerList().stream().forEach("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            s -\u003e sb.append(PREFIX_CORRECT + s.toString() + \" \")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        answerable.getCategories().stream().forEach("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            s -\u003e sb.append(PREFIX_CATEGORY + s.category + \" \")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the part of command string for the given {@code EditAnswerableDescriptor}\u0027s details."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static String getEditAnswerableDescriptorDetails(EditCommand.EditAnswerableDescriptor descriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        descriptor.getQuestion().ifPresent(question -\u003e sb.append(PREFIX_QUESTION)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(question.question).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        descriptor.getDifficulty().ifPresent(difficulty -\u003e sb.append(PREFIX_DIFFICULTY)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .append(difficulty.difficulty).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (descriptor.getCategories().isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            Set\u003cCategory\u003e tags \u003d descriptor.getCategories().get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                sb.append(PREFIX_CATEGORY + \" \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_CATEGORY).append(s.category).append(\" \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (descriptor.getCorrectAnswerList().isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            ArrayList\u003cAnswer\u003e correctAnswerList \u003d descriptor.getCorrectAnswerList().get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (correctAnswerList.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                sb.append(PREFIX_CORRECT + \" \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                correctAnswerList.forEach(s -\u003e sb.append(PREFIX_CORRECT + s.toString() + \" \"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (descriptor.getWrongAnswerList().isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            ArrayList\u003cAnswer\u003e wrongAnswerList \u003d descriptor.getWrongAnswerList().get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            if (wrongAnswerList.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                sb.append(PREFIX_WRONG + \" \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "                wrongAnswerList.forEach(s -\u003e sb.append(PREFIX_WRONG + s.toString() + \" \"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 48,
      "jxofficial": 2,
      "khiangleon": 12,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/McqBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Mcq;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.testutil.builder.AnswerableBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/** Builder class to create {@code Mcq} objects. **/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class McqBuilder extends AnswerableBuilder\u003cMcq\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public McqBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        wrongAnswerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        wrongAnswerList.add(new Answer(\"Wrong answer B\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        wrongAnswerList.add(new Answer(\"Wrong answer C\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        wrongAnswerList.add(new Answer(\"Wrong answer D\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public McqBuilder(Answerable answerableToCopy) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        super(answerableToCopy);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(answerableToCopy instanceof Mcq);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        wrongAnswerList \u003d new ArrayList\u003c\u003e(answerableToCopy.getWrongAnswerList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the Wrong Answer Set of the {@code Answerable} that we are building."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param wrongAnswerList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return McqBuilder object with the updated wrong answer list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public McqBuilder withWrongAnswerList(ArrayList\u003cAnswer\u003e wrongAnswerList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.wrongAnswerList \u003d wrongAnswerList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /** Builds an {@code Mcq} object with the updated parameters.**/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public Mcq build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return new Mcq(question, correctAnswerList, wrongAnswerList, difficulty, categories);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 38,
      "jxofficial": 5,
      "ShaunNgTX": 1
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the middle index of the answerable in the {@code model}\u0027s answerable list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return Index.fromOneBased(model.getFilteredAnswerableList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the last index of the answerable in the {@code model}\u0027s answerable list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return Index.fromOneBased(model.getFilteredAnswerableList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns the answerable in the {@code model}\u0027s answerable list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static Answerable getAnswerable(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return model.getFilteredAnswerableList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/TypicalHistory.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "package seedu.revision.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.History;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.quiz.Statistics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " * A utility class containing a list of {@code Statistics} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khiangleon"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "public class TypicalHistory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static final Statistics STATISTICSA \u003d new Statistics(\"25/25,10/10,8/8,7/7\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static final Statistics STATISTICSB \u003d new Statistics(\"23/25,9/10,8/8,6/7\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static final Statistics STATISTICSC \u003d new Statistics(\"10/25,5/10,3/8,2/7\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    private TypicalHistory() {} // prevents instantiation"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Returns a {@code History} with all the typical statistics."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static History getTypicalHistory() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        History history \u003d new History();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        for (Statistics statistics : getTypicalStatistics()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "            history.addStatistics(statistics);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return history;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khiangleon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public static List\u003cStatistics\u003e getTypicalStatistics() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(STATISTICSA, STATISTICSB, STATISTICSC));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khiangleon": 35
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Index INDEX_FIRST_ANSWERABLE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Index INDEX_SECOND_ANSWERABLE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Index INDEX_THIRD_ANSWERABLE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 5,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/TypicalMcqs.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_GREENFIELD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_CATEGORY_UML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_DIFFICULTY_ALPHA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_DIFFICULTY_BETA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_MCQ_QUESTION_1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.logic.commands.CommandTestUtil.VALID_MCQ_QUESTION_2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.logic.commands.quiz.McqInputCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.RevisionTool;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A utility class containing a list of {@code Answerable} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class TypicalMcqs {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Answer MCQ_CORRECT_ANSWER_A \u003d new Answer(\"Brownfield\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Answer MCQ_CORRECT_ANSWER_B \u003d new Answer(\"Greyfield\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Answer MCQ_WRONG_ANSWER_A \u003d new Answer(\"Greenfield\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Answer MCQ_WRONG_ANSWER_B \u003d new Answer(\"Blackfield\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Answer MCQ_WRONG_ANSWER_C \u003d new Answer(\"Whitefield\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final ArrayList\u003cAnswer\u003e MCQ_VALID_CORRECT_ANSWER_LIST \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            Arrays.asList(MCQ_CORRECT_ANSWER_A));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final ArrayList\u003cAnswer\u003e MCQ_INVALID_CORRECT_ANSWER_LIST \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            Arrays.asList(MCQ_CORRECT_ANSWER_A, MCQ_CORRECT_ANSWER_B));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final ArrayList\u003cAnswer\u003e MCQ_VALID_WRONG_ANSWER_LIST \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            Arrays.asList(MCQ_WRONG_ANSWER_A, MCQ_WRONG_ANSWER_B, MCQ_WRONG_ANSWER_C));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Answerable H_ANSWERABLE \u003d new McqBuilder().withQuestion(\"Hoon Meier\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            .withDifficulty(\"1\").withCorrectAnswerList(MCQ_VALID_CORRECT_ANSWER_LIST)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            .withWrongAnswerList(MCQ_VALID_WRONG_ANSWER_LIST).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final Answerable I_ANSWERABLE \u003d new McqBuilder().withQuestion(\"Ida Mueller\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            .withDifficulty(\"1\").withCorrectAnswerList(MCQ_VALID_CORRECT_ANSWER_LIST)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            .withWrongAnswerList(MCQ_VALID_WRONG_ANSWER_LIST).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Answerable MCQ_A \u003d new McqBuilder().withQuestion(VALID_MCQ_QUESTION_1)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            .withDifficulty(VALID_DIFFICULTY_ALPHA).withCorrectAnswerList(MCQ_VALID_CORRECT_ANSWER_LIST)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withWrongAnswerList(MCQ_VALID_WRONG_ANSWER_LIST).withCategories(VALID_CATEGORY_GREENFIELD).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Answerable MCQ_B \u003d new McqBuilder().withQuestion(VALID_MCQ_QUESTION_2)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            .withDifficulty(VALID_DIFFICULTY_BETA).withCorrectAnswerList(MCQ_VALID_CORRECT_ANSWER_LIST)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            .withWrongAnswerList(MCQ_VALID_WRONG_ANSWER_LIST)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            .withCategories(VALID_CATEGORY_GREENFIELD, VALID_CATEGORY_UML).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Answerable MCQ_C \u003d new McqBuilder().withQuestion(\"What type of project is AB3?\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withCorrectAnswerList(MCQ_VALID_CORRECT_ANSWER_LIST).withWrongAnswerList(MCQ_VALID_WRONG_ANSWER_LIST)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withDifficulty(\"1\").withCategories(\"LSP\", \"SOLID\", \"Week 9\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Answerable MCQ_D \u003d new McqBuilder().withQuestion(\"Brownfield or Greenfield?\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withCorrectAnswerList(MCQ_VALID_CORRECT_ANSWER_LIST).withWrongAnswerList(MCQ_VALID_WRONG_ANSWER_LIST)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withDifficulty(\"1\").withCategories(\"field\", \"introduction\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Answerable MCQ_E \u003d new McqBuilder().withQuestion(\"Carl Kurz\").withDifficulty(\"1\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withCorrectAnswerList(MCQ_VALID_CORRECT_ANSWER_LIST).withWrongAnswerList(MCQ_VALID_WRONG_ANSWER_LIST)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Answerable MCQ_F \u003d new McqBuilder().withQuestion(\"Elle Meyer\").withDifficulty(\"1\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withCorrectAnswerList(MCQ_VALID_CORRECT_ANSWER_LIST).withWrongAnswerList(MCQ_VALID_WRONG_ANSWER_LIST)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Answerable MCQ_G \u003d new McqBuilder().withQuestion(\"Fiona Kunz\").withDifficulty(\"1\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withCorrectAnswerList(MCQ_VALID_CORRECT_ANSWER_LIST).withWrongAnswerList(MCQ_VALID_WRONG_ANSWER_LIST)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final McqInputCommand MCQ_A_COMMAND \u003d new McqInputCommand(\"a\", MCQ_A);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private TypicalMcqs() {} // prevents instantiation"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Returns an {@code RevisionTool} with all the typical answerables."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static RevisionTool getTypicalMcqs() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        RevisionTool mcqRevisionTool \u003d new RevisionTool();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        for (Answerable answerable : getTypicalMcqsList()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            mcqRevisionTool.addAnswerable(answerable);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return mcqRevisionTool;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private static List\u003cAnswerable\u003e getTypicalMcqsList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(MCQ_C, MCQ_D, MCQ_E,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                MCQ_F, MCQ_G));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 29,
      "jxofficial": 37,
      "khiangleon": 2,
      "-": 22,
      "ShaunNgTX": 3
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/TypicalSaqs.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.quiz.SaqInputCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.RevisionTool;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.testutil.builder.SaqBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * A utility class containing a list of {@code Answerable} objects to be used in tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class TypicalSaqs {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Answer SAQ_CORRECT_ANSWER_A \u003d new Answer(\"Unit Testing\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Answer SAQ_CORRECT_ANSWER_B \u003d new Answer(\"Integration Testing\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Answer SAQ_CORRECT_ANSWER_C \u003d new Answer(\"System Testing\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Answer SAQ_CORRECT_ANSWER_D \u003d new Answer(\"Interface Testing\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Answer SAQ_CORRECT_ANSWER_E \u003d new Answer(\"Acceptance Testing\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Answer SAQ_CORRECT_ANSWER_F \u003d new Answer(\"UML Diagram\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final ArrayList\u003cAnswer\u003e SAQ_CORRECT_ANSWER_LIST_A \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            Arrays.asList(SAQ_CORRECT_ANSWER_A, SAQ_CORRECT_ANSWER_B,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                    SAQ_CORRECT_ANSWER_C, SAQ_CORRECT_ANSWER_D, SAQ_CORRECT_ANSWER_E));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final ArrayList\u003cAnswer\u003e SAQ_CORRECT_ANSWER_LIST_B \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            Arrays.asList(SAQ_CORRECT_ANSWER_F));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Answerable SAQ_A \u003d new SaqBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withQuestion(\"Name one functional testing used in software engineering.\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withDifficulty(\"2\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withCorrectAnswerList(SAQ_CORRECT_ANSWER_LIST_A)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Answerable SAQ_B \u003d new SaqBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withQuestion(\"What diagram is used to represent a software system?\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withCorrectAnswerList(SAQ_CORRECT_ANSWER_LIST_B)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withDifficulty(\"1\").withCategories(\"diagrams\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final SaqInputCommand SAQ_B_COMMAND \u003d new SaqInputCommand(\"UML Diagram\", SAQ_B);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    // prevents instantiation"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private TypicalSaqs() {}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Returns an {@code RevisionTool} with all the typical answerables."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static RevisionTool getTypicalSaqs() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        RevisionTool saqRevisionTool \u003d new RevisionTool();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        for (Answerable answerable : getTypicalSaqsList()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            saqRevisionTool.addAnswerable(answerable);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return saqRevisionTool;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static List\u003cAnswerable\u003e getTypicalSaqsList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SAQ_A, SAQ_B));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 63
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/TypicalTrueFalse.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.quiz.TfInputCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.RevisionTool;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.testutil.builder.TrueFalseBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " * A utility class containing a list of {@code Answerable} objects to be used in tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class TypicalTrueFalse {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Answer TF_ANSWER_TRUE \u003d new Answer(\"True\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Answer TF_ANSWER_FALSE \u003d new Answer(\"False\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final ArrayList\u003cAnswer\u003e TF_TRUE_ANSWER_LIST \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            Arrays.asList(TF_ANSWER_TRUE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final ArrayList\u003cAnswer\u003e TF_FALSE_ANSWER_LIST \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            Arrays.asList(TF_ANSWER_FALSE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Answerable TF_A \u003d new TrueFalseBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withQuestion(\"OODMs represents the class structure of the problem domain.\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withDifficulty(\"2\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withCorrectAnswerList(TF_TRUE_ANSWER_LIST)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Answerable TF_B \u003d new TrueFalseBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withQuestion(\"As per the textbook, a log file is like the auto-pilot system of an airplane.?\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withCorrectAnswerList(TF_FALSE_ANSWER_LIST)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withDifficulty(\"1\").withCategories(\"logging\", \"Week 5\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Answerable TF_C \u003d new TrueFalseBuilder().withQuestion("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            \"Greenfield projects are harder than brownfield projects\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withCorrectAnswerList(TF_FALSE_ANSWER_LIST)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withDifficulty(\"1\").withCategories(\"greenfield\", \"brownfield\", \"week 1\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final Answerable TF_D \u003d new TrueFalseBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withQuestion(\"XP can be divided into twelve simple rules.\").withDifficulty(\"3\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .withCorrectAnswerList(TF_FALSE_ANSWER_LIST)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final TfInputCommand TF_A_COMMAND \u003d new TfInputCommand(\"True\", TF_A);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    private TypicalTrueFalse() {} // prevents instantiation"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Returns an {@code RevisionTool} with all the typical answerables."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static RevisionTool getTypicalTrueFalseQuestions() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        RevisionTool trueFalseRevisionTool \u003d new RevisionTool();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        for (Answerable answerable : getTypicalTrueFalseQuestionsAsList()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "            trueFalseRevisionTool.addAnswerable(answerable);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return trueFalseRevisionTool;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static List\u003cAnswerable\u003e getTypicalTrueFalseQuestionsAsList() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(TF_A, TF_B, TF_C,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "                TF_D));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 66
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/builder/AnswerableBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.testutil.builder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * @author wilfredbtan"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A utility class to help with building Answerable objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public abstract class AnswerableBuilder\u003cT extends Answerable\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public static final String DEFAULT_QUESTION \u003d \"Is this a question?\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String DEFAULT_DIFFICULTY \u003d \"1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"CATEGORY\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected Question question;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected ArrayList\u003cAnswer\u003e correctAnswerList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected ArrayList\u003cAnswer\u003e wrongAnswerList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected Difficulty difficulty;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected Set\u003cCategory\u003e categories;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AnswerableBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        question \u003d new Question(DEFAULT_QUESTION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        difficulty \u003d new Difficulty(DEFAULT_DIFFICULTY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        correctAnswerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        correctAnswerList.add(new Answer(\"CORRECT\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        categories \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        categories.add(new Category(DEFAULT_CATEGORY));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Initializes the AnswerableBuilder with the data of {@code answerableToCopy}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AnswerableBuilder(Answerable answerableToCopy) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        question \u003d answerableToCopy.getQuestion();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        correctAnswerList \u003d new ArrayList\u003c\u003e(answerableToCopy.getCorrectAnswerList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        difficulty \u003d answerableToCopy.getDifficulty();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        categories \u003d new HashSet\u003c\u003e(answerableToCopy.getCategories());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the {@code Question} of the {@code Answerable} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AnswerableBuilder\u003cT\u003e withQuestion(String question) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.question \u003d new Question(question);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the Correct Answer Set of the {@code Answerable} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AnswerableBuilder\u003cT\u003e withCorrectAnswerList(ArrayList\u003cAnswer\u003e correctAnswerList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        this.correctAnswerList \u003d correctAnswerList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the Wrong Answer Set of the {@code Answerable} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public abstract AnswerableBuilder\u003cT\u003e withWrongAnswerList(ArrayList\u003cAnswer\u003e wrongAnswerList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * Parses the {@code categories} into a {@code Set\u003cCategory\u003e} and set it to the {@code Answerable}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AnswerableBuilder\u003cT\u003e withCategories(String ... categories) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.categories \u003d SampleDataUtil.getCategorySet(categories);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the {@code Difficulty} of the {@code Answerable} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public AnswerableBuilder\u003cT\u003e withDifficulty(String difficulty) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.difficulty \u003d new Difficulty(difficulty);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns a subclass of  answerable."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @return the subclass of answerable."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public abstract T build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 80,
      "jxofficial": 4,
      "khiangleon": 8
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/builder/EditAnswerableDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.testutil.builder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.logic.commands.main.EditCommand.EditAnswerableDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A utility class to help with building EditAnswerableDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class EditAnswerableDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private EditAnswerableDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public EditAnswerableDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor \u003d new EditCommand.EditAnswerableDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public EditAnswerableDescriptorBuilder(EditCommand.EditAnswerableDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        this.descriptor \u003d new EditAnswerableDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Returns an {@code EditAnswerableDescriptor} with fields containing {@code answerable}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public EditAnswerableDescriptorBuilder(Answerable answerable) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor \u003d new EditCommand.EditAnswerableDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor.setQuestion(answerable.getQuestion());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor.setCorrectAnswerList(answerable.getCorrectAnswerList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor.setWrongAnswerList(answerable.getWrongAnswerList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor.setDifficulty(answerable.getDifficulty());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor.setCategories(answerable.getCategories());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the {@code Question} of the {@code EditAnswerableDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public EditAnswerableDescriptorBuilder withQuestion(String question) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor.setQuestion(new Question(question));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the Correct Answer Set of the {@code EditAnswerableDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public EditAnswerableDescriptorBuilder withCorrectAnswerList(ArrayList\u003cAnswer\u003e correctAnswerList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        descriptor.setCorrectAnswerList(correctAnswerList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the Wrong Answer Set of the {@code EditAnswerableDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "    public EditAnswerableDescriptorBuilder withWrongAnswerList(ArrayList\u003cAnswer\u003e wrongAnswerList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khiangleon"
        },
        "content": "        descriptor.setWrongAnswerList(wrongAnswerList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Sets the {@code Difficulty} of the {@code EditAnswerableDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public EditAnswerableDescriptorBuilder withDifficulty(String difficulty) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor.setDifficulty(new Difficulty(difficulty));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cCategory\u003e} and set it to the {@code EditAnswerableDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public EditAnswerableDescriptorBuilder withCategories(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Set\u003cCategory\u003e tagSet \u003d Stream.of(tags).map(Category::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        descriptor.setCategories(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public EditCommand.EditAnswerableDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 76,
      "jxofficial": 4,
      "khiangleon": 7
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/builder/RevisionToolBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.testutil.builder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.RevisionTool;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * A utility class to help with building Revision Tool objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " *     {@code RevisionTool ab \u003d new RevisionToolBuilder().withAnswerable(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "public class RevisionToolBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    private RevisionTool revisionTool;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public RevisionToolBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        revisionTool \u003d new RevisionTool();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public RevisionToolBuilder(RevisionTool revisionTool) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        this.revisionTool \u003d revisionTool;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     * Adds a new {@code Answerable} to the {@code RevisionTool} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public RevisionToolBuilder withAnswerable(Answerable answerable) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        revisionTool.addAnswerable(answerable);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    public RevisionTool build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        return revisionTool;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 1,
      "ShaunNgTX": 33
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/builder/SaqBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.testutil.builder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Saq;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/** Factory class to create {@code Saq} objects. **/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class SaqBuilder extends AnswerableBuilder\u003cSaq\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public SaqBuilder() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        correctAnswerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        correctAnswerList.add(new Answer(\"Yes, this is a question\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        correctAnswerList.add(new Answer(\"Correct\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        correctAnswerList.add(new Answer(\"True\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        correctAnswerList.add(new Answer(\"Definitely a question\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.withCorrectAnswerList(correctAnswerList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public SaqBuilder(Answerable answerableToCopy) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(answerableToCopy);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertTrue(answerableToCopy instanceof Saq);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        wrongAnswerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Does nothing with the wrong answerList, because Saq does not have a wrong answer list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param wrongAnswerList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return SaqBuilder object with an empty wrong answer list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public SaqBuilder withWrongAnswerList(ArrayList\u003cAnswer\u003e wrongAnswerList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.wrongAnswerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /** Builds a {@code TrueFalse} object with the updated parameters.**/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public Saq build() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return new Saq(question, correctAnswerList, difficulty, categories);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jxofficial": 44
    }
  },
  {
    "path": "src/test/java/seedu/revision/testutil/builder/TrueFalseBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "package seedu.revision.testutil.builder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import seedu.revision.model.answerable.TrueFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "/** Factory class to create {@code TrueFalse} objects. **/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "public class TrueFalseBuilder extends AnswerableBuilder\u003cTrueFalse\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public TrueFalseBuilder() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        correctAnswerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        correctAnswerList.add(new Answer(\"True\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.withCorrectAnswerList(correctAnswerList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public TrueFalseBuilder(Answerable answerableToCopy) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        super(answerableToCopy);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        wrongAnswerList \u003d new ArrayList\u003c\u003e(answerableToCopy.getWrongAnswerList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * Does nothing with the wrongAnswerList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @param wrongAnswerList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     * @return TrueFalseBuilder object with an empty wrong answer list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public TrueFalseBuilder withWrongAnswerList(ArrayList\u003cAnswer\u003e wrongAnswerList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        this.wrongAnswerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jxofficial"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    /** Builds a {@code TrueFalse} object with the updated parameters.**/"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    public TrueFalse build() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        return new TrueFalse(question, correctAnswerList, difficulty, categories);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jxofficial": 40
    }
  },
  {
    "path": "src/test/java/seedu/revision/ui/AutoCompleteTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//import java.util.LinkedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//import java.util.SortedSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//import java.util.TreeSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//import javafx.scene.control.ContextMenu;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//import javafx.scene.control.CustomMenuItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//import seedu.revision.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//public class AutoCompleteTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//    private static final SortedSet\u003cString\u003e entriesStub \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//    //private Label testLabel \u003d new Label(\"test\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//    //private CustomMenuItem testItem \u003d new CustomMenuItem(testLabel, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//    //private ContextMenu popUpTest \u003d new ContextMenu();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//    //private LinkedList\u003cString\u003e searchResult \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//    private AutoComplete autocomplete;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//    public void execute_autoCompleteGetEntries_success() throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//        autocomplete \u003d new AutoComplete();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//        entriesStub.add(\"add type/ q/ y/ x/ cat/ diff/ \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//        entriesStub.add(\"clear\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//        entriesStub.add(\"delete\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//        entriesStub.add(\"edit\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//        entriesStub.add(\"exit\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//        entriesStub.add(\"find\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//        entriesStub.add(\"list\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//        entriesStub.add(\"list diff/\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//        entriesStub.add(\"list cat/\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//        entriesStub.add(\"help\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//        entriesStub.add(\"restore\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//        entriesStub.add(\"start mode/\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//        entriesStub.add(\"start mode/normal\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//        entriesStub.add(\"start mode/arcade\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//        entriesStub.add(\"start mode/custom\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//        entriesStub.add(\"history\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//        assertEquals((AutoComplete.getEntries()), entriesStub);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ShaunNgTX": 55
    }
  },
  {
    "path": "src/test/java/seedu/revision/ui/CommandBoxTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.testfx.api.FxAssert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.testfx.matcher.control.TextInputControlMatchers;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResultBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String COMMAND_SUCCESS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String COMMAND_INVALID \u003d \"invalid command\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static void runHeadless() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        System.setProperty(\"testfx.robot\", \"glass\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        System.setProperty(\"testfx.headless\", \"true\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        System.setProperty(\"prism.order\", \"sw\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        System.setProperty(\"prism.text\", \"t2k\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Will be called with {@code @Before} semantics, i. e. before each test method."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            if (commandText.equals(COMMAND_SUCCESS)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                return new CommandResultBuilder().withFeedBack(\"Command successful\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_CLASS));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uiPartExtension.setUiPart(commandBox);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBox.getAutoCompleteField().getStyleClass());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Checks the initial state of the command box."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void commandBox_noInput_shouldBeEmpty() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        FxAssert.verifyThat(commandBox.getAutoCompleteField(), TextInputControlMatchers.hasText(\"\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Tests a valid input. Should be empty after \"ENTER\" is keyed in."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void commandBox_typeEnterAfterValidInput_shouldBeEmpty() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Tests an invalid input. Should be empty after \"ENTER\" is keyed in."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void commandBox_typeEnterAfterInValidInput_shouldNotAccept() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Tests an invalid input after a valid input. Should not be empty and should show error style class."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Tests an that style class returns to default after entering an invalid input and typing again afterwards."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.clickOn(\".commandTextField\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.write(COMMAND_INVALID);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(COMMAND_INVALID, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.clickOn(\".commandTextField\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.write(COMMAND_SUCCESS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ShaunNgTX"
        },
        "content": "        guiRobot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 128,
      "ShaunNgTX": 1
    }
  },
  {
    "path": "src/test/java/seedu/revision/ui/GuiUnitTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.extension.RegisterExtension;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.ui.testutil.UiPartExtension;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A GUI unit test class for RevisionTool."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    // TODO: Remove this workaround after using JavaFX version 13 or above"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    // This is a workaround to solve headless test failure on Windows OS"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    // Refer to https://github.com/javafxports/openjdk-jfx/issues/66 for more details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        if (System.getProperty(\"os.name\").toLowerCase().startsWith(\"win\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            System.loadLibrary(\"WindowsCodecs\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @RegisterExtension"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public final UiPartExtension uiPartExtension \u003d new UiPartExtension();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 40
    }
  },
  {
    "path": "src/test/java/seedu/revision/ui/LevelLabelTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import guitests.guihandles.LevelLabelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "class LevelLabelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final int VALID_LEVEL_1 \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final int VALID_LEVEL_2 \u003d 2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final int VALID_LEVEL_3 \u003d 3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final int INVALID_LEVEL_0 \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final int INVALID_LEVEL_4 \u003d 4;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LevelLabel levelLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private LevelLabelHandle levelLabelHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static void runHeadless() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        System.setProperty(\"testfx.robot\", \"glass\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        System.setProperty(\"testfx.headless\", \"true\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        System.setProperty(\"prism.order\", \"sw\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        System.setProperty(\"prism.text\", \"t2k\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        levelLabel \u003d new LevelLabel(VALID_LEVEL_1); //set to default level 1"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        levelLabelHandle \u003d new LevelLabelHandle(getChildNode(levelLabel.getRoot(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                LevelLabelHandle.LEVEL_LABEL_ID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        levelLabel.getLevelLabel().setStyle(\"-fx-min-width: 300\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uiPartExtension.setUiPart(levelLabel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Tests that the {@code LevelLabel} updates correctly when valid levels are passed to it."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void levelLabel_updateLevel_shouldShowNextLevel() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.pause();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(\"Level 1\", levelLabelHandle.getText()); //default level 1"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        levelLabel.updateLevelLabel(VALID_LEVEL_2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.pause();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(\"Level 2\", levelLabelHandle.getText()); //update to level 2"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        levelLabel.updateLevelLabel(VALID_LEVEL_3);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.pause();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(\"Level 3\", levelLabelHandle.getText()); //update to level 3"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Tests that the {@code LevelLabel} throws an assertion error when invalid levels are passed to it."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void levelLabel_updateInvalidLevel_shouldThrowAssertionError() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Invalid Boundary values 0, 4"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e levelLabel.updateLevelLabel(INVALID_LEVEL_0));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e levelLabel.updateLevelLabel(INVALID_LEVEL_4));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 67
    }
  },
  {
    "path": "src/test/java/seedu/revision/ui/ResultDisplayTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.testfx.api.FxAssert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.testfx.matcher.control.TextInputControlMatchers;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "class ResultDisplayTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"success!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Will be called with {@code @Before} semantics, i. e. before each test method."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param stage - Will be injected by the test runner."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void start(Stage stage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        resultDisplay.getResultDisplay().setId(\"myLabel\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        stage.setScene(new Scene(new StackPane(resultDisplay.getResultDisplay()))); // arbitrary height"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Result display should be empty by default."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param robot - Will be injected by the test runner."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void resultDisplay_defaultDisplay_shouldDisplayEmptyText(FxRobot robot) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        FxAssert.verifyThat(resultDisplay.getResultDisplay(), TextInputControlMatchers.hasText(\"\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Set Feedback to user should show success message."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param robot - Will be injected by the test runner."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setFeedbackToUser_successMessage_shouldDisplayMessage(FxRobot robot) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        resultDisplay.setFeedbackToUser(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        FxAssert.verifyThat(resultDisplay.getResultDisplay(), TextInputControlMatchers.hasText(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 53
    }
  },
  {
    "path": "src/test/java/seedu/revision/ui/StartQuizWindowTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "import static seedu.revision.testutil.TypicalMcqs.MCQ_C;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.RevisionTool;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Difficulty;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Question;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Saq;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.TrueFalse;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.category.Category;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.quiz.Mode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.quiz.NormalMode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.storage.Storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.stubs.HistoryStub;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.stubs.StorageStub;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * @author wilfredbtan"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class StartQuizWindowTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final TrueFalse TRUE_FALSE_STUB \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            new TrueFalse(new Question(\"The term Design Patterns was popularized by a book whose authors are \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"also known as the ‘Three Amigos’.\"), new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"false\"))),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new Difficulty(\"2\"), new HashSet\u003c\u003e(Arrays.asList(new Category(\"Design Patterns\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new Category(\"Week 9\"))));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Saq SAQ_STUB \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            new Saq(new Question(\"The term Design Patterns was popularized by a book whose authors are \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    + \"also known as the ‘Three Amigos’.\"), new ArrayList\u003c\u003e(Arrays.asList(new Answer(\"false\"))),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new Difficulty(\"3\"), new HashSet\u003c\u003e(Arrays.asList(new Category(\"Design Patterns\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                    new Category(\"Week 9\"))));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String COMMAND_EXIT \u003d \"exit\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String ANSWER_VALID_MCQ \u003d \"A\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String ANSWER_VALID_TRUEFALSE \u003d \"True\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String ANSWER_VALID_SAQ \u003d \"Short Answer\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String ANSWER_INVALID \u003d \"invalid answer\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final Mode normalMode \u003d new NormalMode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private StartQuizWindow startQuizWindow;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static void runHeadless() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        System.setProperty(\"testfx.robot\", \"glass\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        System.setProperty(\"testfx.headless\", \"true\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        System.setProperty(\"prism.order\", \"sw\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        System.setProperty(\"prism.text\", \"t2k\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Will be called with {@code @Before} semantics, i.e. before each test method."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param stage - Will be injected by the test runner."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Storage storageStub \u003d new StorageStub();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        RevisionTool testRevisionTool \u003d new RevisionTool();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        testRevisionTool.addAnswerable(MCQ_C);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        testRevisionTool.addAnswerable(TRUE_FALSE_STUB);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        testRevisionTool.addAnswerable(SAQ_STUB);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Model model \u003d new ModelManager(testRevisionTool, new UserPrefs(), new HistoryStub());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        Logic logic \u003d new LogicManager(model, storageStub);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        startQuizWindow \u003d new StartQuizWindow(stage, logic, normalMode);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        startQuizWindow.fillInnerParts();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Enters a valid answer and checks that the progress in the progress bar has increased."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param robot robot used to simulate user actions. Will be injected by the test runner."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void typeValidAnswer_shouldProgressToNextQuestion(FxRobot robot) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.clickOn(\".commandTextField\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        double previousProgress \u003d startQuizWindow.getProgressIndicatorBar().getCurrentProgress();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.write(ANSWER_VALID_MCQ);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        double currentProgress \u003d startQuizWindow.getProgressIndicatorBar().getCurrentProgress();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertNotEquals(previousProgress, currentProgress);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Enters an invalid answer and checks that the progress in the progress bar has increased."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param robot robot used to simulate user actions. Will be injected by the test runner."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void typeInvalidAnswer_shouldNotProgressToNextQuestion(FxRobot robot) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        double previousProgress \u003d startQuizWindow.getProgressIndicatorBar().getCurrentProgress();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.clickOn(\".commandTextField\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.write(ANSWER_INVALID);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        double currentProgress \u003d startQuizWindow.getProgressIndicatorBar().getCurrentProgress();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(previousProgress, currentProgress);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Enters a valid answer and checks that an alert is shown when the end of the level has been reached."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param robot robot used to simulate user actions. Will be injected by the test runner."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void typeValidAnswer_endOfLevelReached_shouldShowNextLevelAlert(FxRobot robot) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.clickOn(\".commandTextField\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.write(ANSWER_VALID_MCQ);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        int numberOfAlerts \u003d getNumberOfWindowsShown(robot, AlertDialog.NEXT_LEVEL_TITLE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jxofficial"
        },
        "content": "        assertEquals(1, numberOfAlerts);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Enters a 3 valid answers (simulating each level of the quiz) and checks that an alert is shown when the"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * end of the quiz has been reached."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param robot robot used to simulate user actions. Will be injected by the test runner."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void typeValidAnswer_endOfQuizReached_shouldShowEndAlert(FxRobot robot) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.clickOn(\".commandTextField\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.write(ANSWER_VALID_MCQ);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.type(KeyCode.ENTER); //Go to next level"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.write(ANSWER_VALID_TRUEFALSE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.type(KeyCode.ENTER); //Go to next level"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.write(ANSWER_VALID_SAQ);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(\"Level 3\", startQuizWindow.getLevelLabel().getLevelLabel().getText());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        int numberOfAlerts \u003d getNumberOfWindowsShown(robot, AlertDialog.END_QUIZ_TITLE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(1, numberOfAlerts);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Enters the exit command and checks whether the window returns to configuration mode and quiz mode is dismissed."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param robot robot used to simulate user actions. Will be injected by the test runner."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void typeExit_shouldReturnFromQuizModeToConfigurationMode(FxRobot robot) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.clickOn(\".commandTextField\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.write(COMMAND_EXIT);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        int numberOfMainWindows \u003d getNumberOfWindowsShown(robot, \"CS2103 Revision Tool\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(1, numberOfMainWindows);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        int numberOfQuizWindows \u003d getNumberOfWindowsShown(robot, \"Quiz Mode\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(0, numberOfQuizWindows);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private int getNumberOfWindowsShown(FxRobot fxRobot, String stageTitle) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        return (int) fxRobot.listTargetWindows().stream()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 175,
      "jxofficial": 3
    }
  },
  {
    "path": "src/test/java/seedu/revision/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/revision/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static seedu.revision.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/revision/ui/bar/ProgressIndicatorBarTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui.bar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import guitests.guihandles.ProgressIndicatorBarHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.beans.property.ReadOnlyDoubleWrapper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.ui.GuiUnitTest;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "class ProgressIndicatorBarTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final double TOTAL_PROGRESS \u003d 2.0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final double VALID_PROGRESS_0 \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final double VALID_PROGRESS_HALF \u003d TOTAL_PROGRESS / 2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final double VALID_PROGRESS_FULL \u003d TOTAL_PROGRESS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final double INVALID_PROGRESS_NEGATIVE \u003d -1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final double INVALID_PROGRESS_LARGER_THAN_TOTAL \u003d TOTAL_PROGRESS + 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ProgressIndicatorBarHandle progressIndicatorBarHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ProgressIndicatorBar progressIndicatorBar;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private ReadOnlyDoubleWrapper currentProgressIndex \u003d new ReadOnlyDoubleWrapper("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            this, \"currentProgressIndex\", 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static void runHeadless() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        System.setProperty(\"testfx.robot\", \"glass\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        System.setProperty(\"testfx.headless\", \"true\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        System.setProperty(\"prism.order\", \"sw\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        System.setProperty(\"prism.text\", \"t2k\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        progressIndicatorBar \u003d new ProgressIndicatorBar(currentProgressIndex, TOTAL_PROGRESS, \"%.0f/2\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        progressIndicatorBarHandle \u003d new ProgressIndicatorBarHandle(getChildNode(progressIndicatorBar.getRoot(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                ProgressIndicatorBarHandle.PROGRESS_BAR_ID));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        progressIndicatorBar.getBar().setStyle(\"-fx-min-width: 300\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        uiPartExtension.setUiPart(progressIndicatorBar);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Default progress bar should show no progress."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void progressBar_noChangeInProgress_shouldShowZeroProgress() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(VALID_PROGRESS_0, progressIndicatorBarHandle.getProgress());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Progress updated, should show change in progress."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void progressBar_progressChanged_inputShouldChange() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        currentProgressIndex.set(VALID_PROGRESS_HALF);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(0.5, progressIndicatorBarHandle.getProgress()); //half progress"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        currentProgressIndex.set(VALID_PROGRESS_FULL);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(1, progressIndicatorBarHandle.getProgress()); //full progress"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Progress updated to invalid input, should throw assertion error."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void progressBar_progressChangedToInvalidProgress_shouldNotUpdate() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Boundary values -1, current \u003e total progress"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e currentProgressIndex.set(INVALID_PROGRESS_NEGATIVE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //invalid negative progress"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e currentProgressIndex.set(INVALID_PROGRESS_LARGER_THAN_TOTAL));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 80
    }
  },
  {
    "path": "src/test/java/seedu/revision/ui/bar/TimerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui.bar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.testfx.api.FxAssert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.testfx.matcher.control.LabeledMatchers;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.logic.commands.main.CommandResultBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "class TimerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private Timer timer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Will be called with {@code @Before} semantics, i. e. before each test method."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param stage - Will be injected by the test runner."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private void start(Stage stage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        timer \u003d new Timer(3, (unused) -\u003e new CommandResultBuilder().build());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        stage.setScene(new Scene(new StackPane(timer.getTimerLabel()), 300, 100)); // arbitrary height"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Timer should count down to zero and not below zero."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param robot - Will be injected by the test runner."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void timerStartAtThree_waitFourSeconds_shouldCountToZero(FxRobot robot) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        timer.startTimer();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Delay has to be a bit longer for the robot"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.sleep(4, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        FxAssert.verifyThat(timer.getTimerLabel(), LabeledMatchers.hasText(\"0\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Timer should stop when the Timer#stopTimer is called."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param robot - Will be injected by the test runner."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void timerStopped_waitTwoSeconds_shouldNotStartCountingDown(FxRobot robot) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        timer.startTimer();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        timer.stopTimer();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.sleep(2, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Delay has to be a bit longer for the robot"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        FxAssert.verifyThat(timer.getTimerLabel(), LabeledMatchers.hasText(\"\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Timer should display the starting time when reset."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * @param robot - Will be injected by the test runner."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void timerResetAfterTwoSeconds_waitFourSeconds_shouldBeResetToThree(FxRobot robot) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        timer.startTimer();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        robot.sleep(2, TimeUnit.SECONDS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        timer.resetTimer();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        //Delay has to be a bit longer for the robot"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        FxAssert.verifyThat(timer.getTimerLabel(), LabeledMatchers.hasText(\"3\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 74
    }
  },
  {
    "path": "src/test/java/seedu/revision/ui/testutil/GuiTestAssert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import guitests.guihandles.AnswerableCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import guitests.guihandles.AnswerableListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.model.answerable.Answerable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static void assertCardEquals(AnswerableCardHandle expectedCard, AnswerableCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedCard.getQuestionType(), actualCard.getQuestionType());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedCard.getQuestion(), actualCard.getQuestion());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedCard.getDifficulty(), actualCard.getDifficulty());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedCard.getCombinedAnswerList(), actualCard.getCombinedAnswerList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedCard.getCategories(), actualCard.getCategories());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedAnswerable}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static void assertCardDisplaysAnswerable(Answerable expectedAnswerable, AnswerableCardHandle actualCard) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedAnswerable.getQuestion().question, actualCard.getQuestion());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedAnswerable.getDifficulty().difficulty, actualCard.getDifficulty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedAnswerable.getCombinedAnswerList().stream().map(a -\u003e a.answer).sorted()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .collect(Collectors.toList()), actualCard.getCombinedAnswerList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expectedAnswerable.getCategories().stream().map(cat -\u003e cat.category).sorted()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                .collect(Collectors.toList()), actualCard.getCategories());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Asserts that the list in {@code answerableListPanelHandle} displays the details of {@code answerables}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * correctly and in the correct order."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static void assertListMatching(AnswerableListPanelHandle answerableListPanelHandle,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "              Answerable... answerables) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        for (int i \u003d 0; i \u003c answerables.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            answerableListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            assertCardDisplaysAnswerable(answerables[i], answerableListPanelHandle.getAnswerableCardHandle(i));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Asserts that the list in {@code answerableListPanelHandle} displays the details of {@code answerables}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * correctly and in the correct order."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static void assertListMatching(AnswerableListPanelHandle answerableListPanelHandle,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "              List\u003cAnswerable\u003e answerables) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertListMatching(answerableListPanelHandle, answerables.toArray(new Answerable[0]));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Asserts the size of the list in {@code answerableListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static void assertListSize(AnswerableListPanelHandle answerableListPanelHandle, int size) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        int numberOfAnswerables \u003d answerableListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(size, numberOfAnswerables);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 76
    }
  },
  {
    "path": "src/test/java/seedu/revision/ui/testutil/StageExtension.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.extension.AfterEachCallback;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.extension.BeforeEachCallback;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.junit.jupiter.api.extension.ExtensionContext;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Properly sets up and tears down a JavaFx stage for our testing purposes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class StageExtension implements BeforeEachCallback, AfterEachCallback {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void beforeEach(ExtensionContext context) throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void afterEach(ExtensionContext context) throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 21
    }
  },
  {
    "path": "src/test/java/seedu/revision/ui/testutil/UiPartExtension.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "package seedu.revision.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "import seedu.revision.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "public class UiPartExtension extends StageExtension {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/OrangeTheme.css\", \"view/Extensions.css\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 29
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003c?import seedu.revision.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wilfredbtan"
        },
        "content": "\u003cfx:root type\u003d\"seedu.revision.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wilfredbtan": 1,
      "-": 5
    }
  }
]
