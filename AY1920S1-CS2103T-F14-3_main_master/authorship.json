[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d Typee"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-F14-3/main[image:https://travis-ci.org/AY1920S1-CS2103T-F14-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-F14-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-F14-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "https://ci.appveyor.com/project/lyskevin/main/branch/master[image:https://ci.appveyor.com/api/projects/status/jnpgt16m0c8ob36q/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/1794c6da3e6e420792a875b41068a7db[\"Codacy code quality\", link\u003d\"https://www.codacy.com/manual/brebeek/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dbrebeek/main\u0026utm_campaign\u003dBadge_Grade\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* This is a desktop engagement management application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* It is an appointment manager for secretaries and receptionists to better schedule and manage appointments."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "* Ever wanted a comprehensive appointment manager? Well, look no further! Typee includes a built-in calendar view, typing game, and pdf report generator!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5], https://https://commons.apache.org/proper/commons-io/[Commons-IO], https://itextpdf.com/en[iTextPdf]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* Based on the AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 1,
      "brebeek": 2,
      "lyskevin": 6,
      "-": 26
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": "mainClassName \u003d \u0027com.typee.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    implementation group: \u0027org.apache.pdfbox\u0027, name: \u0027pdfbox\u0027, version: \u00272.0.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    implementation group: \u0027com.itextpdf\u0027, name: \u0027itextpdf\u0027, version: \u00275.5.11\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027commons-io\u0027, name: \u0027commons-io\u0027, version: \u00272.6\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    archiveName \u003d \u0027typee.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "nordic96": 4,
      "-": 154
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "_{The dummy content given below serves as a placeholder to be used by future forks of the project.}_ +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Kevin Lim"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "image::lyskevin.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "{empty}[https://github.com/lyskevin[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Responsibilities: Code Quality"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Ko Gi Hun"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nordic96"
        },
        "content": "image::nordic96.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nordic96"
        },
        "content": "{empty}[http://github.com/nordic96[github]] [\u003c\u003cgihunk#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Responsibilities: In charge of `Storage`, `UI`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003d\u003d\u003d Sudharshan Madhavan"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "image::uggi121.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "{empty}[http://github.com/uggi121[github]] [\u003c\u003cSudharshanMadhavan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "\u003d\u003d\u003d Hu Yuchen"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::brebeek.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": "{empty}[http://github.com/brebeek[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Responsibilities: In charge of functionality"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d\u003d\u003d Ng Jun Hao"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "image::jun-ha0.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "{empty}[https://github.com/jun-ha0[github]][https://AY1920S1-CS2103T-F14-3.github.io/main/team/jun-ha0.html[portfolio]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Responsibilities: Typing game"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 4,
      "uggi121": 4,
      "nordic96": 5,
      "brebeek": 4,
      "lyskevin": 5,
      "-": 35
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-F14-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* *Email us* : You can also reach us at `lyskevin@gmail.com` (Kevin), `e0318604@u.nus.edu` (Gi Hun), `yuchen_hu@u.nus.edu` (Yuchen), `e0341290@u.nus.edu` (Sudharshan), `e0309667@u.nus.edu` (Jun Hao)"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Typee - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": "By: `SC09-F14-3`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "image::Typee_UML-Architecture.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ", `StartWindow`, `GameWindow`, `PlayerInformation`, `GameBody`, `MovingWords` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brebeek"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brebeek"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brebeek"
        },
        "content": "The undo/redo mechanism is facilitated by `HistoryManager`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brebeek"
        },
        "content": "It extends `EngagementList` with an undo/redo history, stored internally as an `historyList` and `versionPointer`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* `HistoryManager#saveState()` -- Saves the current engagement list state in its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* `HistoryManager#undo()` -- Restores the previous engagement list state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* `HistoryManager#redo()` -- Restores a previously undone engagement list state from its history."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brebeek"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#saveEngagementList()`, `Model#undoEngagementList()` and `Model#redoEngagementList()` respectively."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Step 1. The user launches the application for the first time. The `HistoryManager` will be initialized with the initial engagement list state, and the `versionPointer` pointing to that single engagement list state."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::UndoRedoState0.png[width\u003d\"450\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the engagement list. The `delete` command calls `Model#saveEngagementList()`, causing the modified state of the engagement list after the `delete 5` command executes to be saved in the `historyList`, and the `versionPointer` is shifted to the newly inserted engagement list state."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::UndoRedoState1.png[width\u003d\"450\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Step 3. The user executes `add d/meeting ...` to add a new engagement. The `add` command also calls `Model#saveEngagementList()`, causing another modified engagement list state to be saved into the `historyList`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::UndoRedoState2.png[width\u003d\"450\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "brebeek"
        },
        "content": "If a command fails its execution, it will not call `Model#saveEngagementList()`, so the engagement list state will not be saved into the `historyList`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoEngagementList()`, which will shift the `versionPointer` once to the left, pointing it to the previous engagement list state, and restores the engagement list to that state."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::UndoRedoState3.png[width\u003d\"450\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "brebeek"
        },
        "content": "If the `versionPointer` is at index 0, pointing to the initial engagement list state, then there are no previous engagement list states to restore. The `undo` command uses `Model#hasNoUndoableCommand()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::UndoSequenceDiagram.png[width\u003d\"750\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "brebeek"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoEngagementList()`, which shifts the `versionPointer` once to the right, pointing to the previously undone state, and restores the engagement list to that state."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "brebeek"
        },
        "content": "If the `versionPointer` is at index `historyList.size() - 1`, pointing to the latest engagement list state, then there are no undone engagement list states to restore. The `redo` command uses `Model#hasNoRedoableCommand()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Step 5. The user then decides to execute the command `sort start ascending`. Commands that do not modify the engagement list, such as `sort`, will usually not call `Model#saveEngagementList()`, `Model#undoEngagementList()` or `Model#redoEngagementList()`. Thus, the `historyList` remains unchanged."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::UndoRedoState4.png[width\u003d\"450\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#saveEngagementList()`. Since the `versionPointer` is not pointing at the end of the `historyList`, all engagement list states after the `versionPointer` will be purged. We designed it this way because it no longer makes sense to redo the `add d/meeting ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::UndoRedoState5.png[width\u003d\"450\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::CommitActivityDiagram.png[width\u003d\"190\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire engagement list."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of engagement list states."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "brebeek"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "brebeek"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `historyList` and `engagementList`."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* **Alternative 2:** Use `jdeveloper.history.HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Tab Switch Feature"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Tab switch feature is a type of Command that allows users to switch to respective windows for using different features in the system. System UI structure is generally divided into 2 parts;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation Structure"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nordic96"
        },
        "content": ".TabCommand Implementation Class Diagram"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nordic96"
        },
        "content": "image::TabCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nordic96"
        },
        "content": "1. `MainWindow` which contains necessary text input for `Command` inputs and output display for displaying the `CommandResult`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nordic96"
        },
        "content": "2. Window component, which is a type of `VBox`, that acts as a container for other different UI windows."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nordic96"
        },
        "content": "3. Tab Menu List, which displays the name of the tab/menus, which has respective separate UI windows. User has to use a specific `Command`; `TabCommand` in order to switch the window to another window."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* Upon first startup of the system, by system default, system will display the `EngagementList` window."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nordic96"
        },
        "content": "4. New Ui Model class `Tab` is implemented to contain the respective fxml controller classes in a OOP manner. Below is the class diagram for `Tab` class"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nordic96"
        },
        "content": ".Tab Class Diagram"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nordic96"
        },
        "content": "image::TabClassDiagram.png[align\u003d\"center\"]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nordic96"
        },
        "content": "From figure 9, MainWindow will have an additional method `fetchTabInformation(tabName)`. After the parser executes the `TabCommand`, it will return a CommandResult with `Tab` property."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nordic96"
        },
        "content": "The method will compare the `Tab` in `CommandResult` and once there is a matching result, the method will load the respective fxml file in the MainWindow to display the respective feature window."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Below is the basic activity diagram of fetchTabInformation method"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nordic96"
        },
        "content": ".fetchTabInformation method Activity Diagram"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nordic96"
        },
        "content": "image::fetchTabInformationActivityDiagram.png[align\u003d\"center\"]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Engagement Report Generation"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "This feature allows user to generate a pre-selected engagement in to a report and save it as a document file. The document file will be created in a .pdf format."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation Structure"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nordic96"
        },
        "content": ".PdfCommand Implementation Class Diagram"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nordic96"
        },
        "content": "image::PdfCommandClassDiagram.png[]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nordic96"
        },
        "content": "The feature will be implemented as an additional type of Command; `PdfCommand`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* Proposed syntax of the PdfCommand is as follow: `pdf i/[engagementList_index] to/[Person] from/[Person]`."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Util class `PdfUtil` will be implemented for handling all pdf document creation related methods."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nordic96"
        },
        "content": ".PdfUtil Class Diagram"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nordic96"
        },
        "content": "image::PdfUtilClassDiagram.png[align\u003d\"center\"]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfUtil class will be implemented under `util` package and it will be able to deliver few essential features"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nordic96"
        },
        "content": "that are necessary for document creation."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nordic96"
        },
        "content": "** Able to generate a full report document based on the `Engagement` as input."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nordic96"
        },
        "content": "** Use different templates for each other types of `Engagement` such as `Appointment`, `Interview` and `Meeting`. Document template will follow general email format:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Receiver, Content contained in a table, Sender and signature with address and company logo (Refer to Figure 12)."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nordic96"
        },
        "content": "To fulfill the document format, `Report` class needs to be implemented in order to model all necessary properties that has to be in the document. It 3 following properties;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nordic96"
        },
        "content": "***  `engagement`: specific engagement information to include in the document"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nordic96"
        },
        "content": "*** `to`: A `Person` who is receiving the document"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nordic96"
        },
        "content": "*** `from`: A `Person` who is either a receptionist or a secretary who is sending the document."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d UI Design"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nordic96"
        },
        "content": "`ReportWindow` will be the UI container which helps the user to interact using `PdfCommand`. UI will consist of 2 main scrollable panes; Engagement list with index numbers,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nordic96"
        },
        "content": "and the directory explorer for `reports/` as a item list."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d UI Components \u0026 Features"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Table below explains the components that are included in the `ReportWindow` with its purpose and features."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nordic96"
        },
        "content": ".Report Window UI Components"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[%header, cols\u003d4*]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nordic96"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nordic96"
        },
        "content": "|"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nordic96"
        },
        "content": "|UI Component Type"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nordic96"
        },
        "content": "|Feature"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nordic96"
        },
        "content": "|Purpose"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nordic96"
        },
        "content": "| `EngagementList`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nordic96"
        },
        "content": "| Scrollable Stack Pane"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nordic96"
        },
        "content": "| Displays the sorted engagement list"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nordic96"
        },
        "content": "| To guide user to help recognize the list index number that the user wants to generate document from."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nordic96"
        },
        "content": "| `File_Explorer`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nordic96"
        },
        "content": "| Scrollable Stack Pane"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nordic96"
        },
        "content": "|"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nordic96"
        },
        "content": "1. Displays the list of document generated previously and stored under the directory `reports/`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nordic96"
        },
        "content": "2. Each list item is clickable with a MouseClick action of opening the document."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nordic96"
        },
        "content": "| To allow user to manage documents more time efficiently."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nordic96"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Calendar Window"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "The calendar window provides a visual representation of stored engagements over a monthly period."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Users can choose to change the month being displayed and also open scrolling text windows which"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "show more detailed descriptions of the stored engagements for a particular day."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation Structure"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ".Structure of the Calendar Window"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "image::CalendarWindowClassDiagram.png[]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "The `CalendarWindow` is part of the `MainWindow`. Specifically, it is one possible `Tab` which can be"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "displayed. The `CalendarWindow` class and any of its associated UI components can be found under the `com.typee.ui.calendar` package."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ".CalendarWindow Initialization Sequence Diagram"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "image::CalendarWindowSequenceDiagram.png[]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "The controller is set after constructing the `CalendarWindow` because there were some issues with"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "using constructors containing at least one argument."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d\u003d\u003d Game Window"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ".Structure of the Game Window"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "image::GameWindowClassDiagram.png[]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ".Game Window UI Components"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "[%header, cols\u003d4*]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "|"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "|UI Component Type"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "|Feature"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "|Purpose"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "| `PlayerInformation`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "| Scrollable Stack Pane"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "| Displays the user\u0027s score and health points."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "| To inform user about the in-game progress."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "| `GameBody`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "| AnchorPane"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "| Displays the animation of the game."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "| To allow the user to view the animation of the moving words in a continuous manner."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "| `MovingWords`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "| Scrollable Stack Pane"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "| Displays the individual word."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "| To allow user to know the next word to type."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "brebeek"
        },
        "content": "\u003d\u003d\u003d Sort feature"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "brebeek"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "brebeek"
        },
        "content": "The sort mechanism is facilitated by `EngagementComparator`."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "brebeek"
        },
        "content": "The `EngagementComparator` is an enum class that implements Java Comparator\u003cEngagement\u003e and specifies the comparing logic of 8 different orders, namely `START_TIME`, `START_TIME_REVERSE`, `END_TIME`, `END_TIME_REVERSE`, `ALPHABETICAL`, `ALPHABETICAL_REVERSE`, `PRIORITY`, and `PRIORITY_REVERSE`."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Each positive sequence comparator compares two `Engagements` with the field specified within its name in ascending order, and `_REVERSE` comparators compare in descending order."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Additionaly, the `Model` interface is modified to support the following methods:"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* `Model#setComparator(Comparator\u003cEngagement\u003e)` -- Sets the designated comparator in model."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* `Model#updateSortedEngagementList()` -- Executes the sorting method with the `currentComparator` in model to sort the internal list."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* `Model#getSortedEngagementList()` -- Returns the current internal engagement list as an unmodifiable `ObservableList`."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "brebeek"
        },
        "content": "These operations are implemented in the `ModelManager` class as `ModelManager#setComparator(Comparator\u003cEngagement\u003e)`, `ModelManager#updateSortedEngagementList()` and `ModelManager#getSortedEngagementList()` respectively."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Given below is an example usage scenario and how the sort mechanism behaves at each step."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Step 1. The user launches the application for the first time. The `currentComparator` will be initialized as `null`."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::SortListState0.png[width\u003d\"450\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Step 2. The user executes `sort priority ascending` command to sort the engagement list in ascending order of priority. The `sort` command calls `Model#setComparator()`, causing the `currentComparator` in ModelManager to assume the value `EngagementComparator#PRIORITY`. The command then calls `Model#updateSortedEngagementList` to execute the sorting."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::SortListState1.png[width\u003d\"450\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "brebeek"
        },
        "content": "The following sequence diagram shows how the sort operation works:"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::SortSequenceDiagram.png[width\u003d\"750\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "brebeek"
        },
        "content": "NOTE: The lifeline for `SortCommand` and `SortCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Step 3. The user executes `add d/meeting ... p/high` to add a new engagement. The `add` command also calls `Model#updateSortedEngagementList()` with `currentComparator`, causing the execution of sorting after the new engagement is added to the list, to preserve the current ordering."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::SortListState2.png[width\u003d\"450\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "brebeek"
        },
        "content": "If the `currentComparator` assumes the initial value `null` when `Model#updateSortedEngagementList` is called, the method will simply catch the `NullPointerException` thrown by `java.object.requireNonNull` which will essentially abort the attempt to sort with an empty catch block. The initial chronological order is preserved in this case."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the engagement list or alter the order of the list, such as `list`, will usually not call `Model#setComparator(Comparator\u003cEngagement\u003e)`, or `Model#updateSortedEngagementList()`. Thus, the internal `ObservableList` remains unchanged."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::SortListState3.png[width\u003d\"450\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "brebeek"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::SortUpdateActivityDiagram.png[width\u003d\"190\", align\u003d\"center\"]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "brebeek"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "brebeek"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How sort executes"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* **Alternative 1 (current choice):** Use the `List.sort(Comparator\u003cT\u003e)` function to sort the list."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "brebeek"
        },
        "content": "** Pros: Has trivial support for features that updates the predicate of `FilteredList`, like `Find`."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "brebeek"
        },
        "content": "** Cons: There is a need to sort the list each time a command that modifies the elements of the list is executed, which may result in performance issues in case the list size is large."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* **Alternative 2:** Replace the `FilteredList` in `ModelManager` with a `SortedList`."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "brebeek"
        },
        "content": "** Pros: Sorting the list is more intuitive, and the ordering of the engagements is automatically preserved whenever a command that modifies the list elements is executed."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "brebeek"
        },
        "content": "** Cons: Features like `find` command may lose functionality and needs extra modification."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "nordic96"
        },
        "content": "//Updated by Ko Gi Hun 30/09/19"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* receptionists / secretaries in corporations."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* requires submitting large amount of structured reports or documents"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "*Value proposition*: increase productivity by managing appointments faster than a typical mouse/ GUI driven app and by"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "increasing typing speed."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`* * *` |secretary |add an appointment |organise and schedule meetings/appointments"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`* * *` |secretary |request ro edit a specific appointment |fix any misinformation that I typed wrongly"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "|`* * *` |secretary under a busy manager |find specific appointments fast |schedule appointments efficiently"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`* * *` |secretary |have the option to clear the appointment list |restart from scratch"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`* * *` |secretary |undo my previous commands |recall commands made by mistake"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`* * *` |secretary |redo recalled commands |retrieve the commands undone by mistake"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`* * *` |secretary |select and delete a specific appointment from the list |manage inactive or cancelled appointments"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`* * *` |busy secretary |able to see the appointments in calendar view |enjoy better convenience"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`* * *` |user |save and load data from a local file |keep the appointment list locally"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`* *` |secretary under a busy manager |sort all appointments |see them in the order I want"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`* *` |user |have a command to terminate the application |"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`* *` |advanced user |be able to execute compound statements |improve efficiency"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "|`*` |highly motivated secretary |have a typing warm-up |prepare myself for an important events like important meetings."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "|`*` |highly driven secretary |have a way to practice typing |improve my efficiency during work by increasing my typing"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "speed"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`*` |fast-typer |have a way to amend trivial spelling errors |improve typing efficiency"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|`*` |secretary |generate a PDF file of a selected appointment |make a distributable copy of the appointment"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "nordic96"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "nordic96"
        },
        "content": "(For all use cases below, the *System* is the `Typee` and the *Actor* is the `user`,"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "nordic96"
        },
        "content": "unless specified otherwise)"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "uggi121"
        },
        "content": "// Updated by Sudharshan"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Use case: (UC01) Add appointment"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "uggi121"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "uggi121"
        },
        "content": "1. User requests to add an appointment."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "uggi121"
        },
        "content": "2. System adds the corresponding appointment to the existing appointment list."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "uggi121"
        },
        "content": "3. System displays the updated appointment list"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "uggi121"
        },
        "content": "and notifies the user."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "uggi121"
        },
        "content": "+"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "uggi121"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "uggi121"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "uggi121"
        },
        "content": "* 1a. User supplies the necessary information."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "uggi121"
        },
        "content": "+"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "uggi121"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "uggi121"
        },
        "content": "* 1b. User supplies invalid information."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "uggi121"
        },
        "content": "** 1b1. System notifies user about the invalid information."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "uggi121"
        },
        "content": "+"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "uggi121"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "uggi121"
        },
        "content": "* 1c. Appointment clashes with an existing appointment."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "uggi121"
        },
        "content": "** 1c1. System notifies user about the conflict."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "uggi121"
        },
        "content": "+"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "uggi121"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "nordic96"
        },
        "content": "//Updated by Yu Chen"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Use case: (UC02) List appointments"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "nordic96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "nordic96"
        },
        "content": "1.  User requests to list appointments"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "brebeek"
        },
        "content": "2.  System displays the list of appointments"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "nordic96"
        },
        "content": "+"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "brebeek"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* 1a. The list of appointments is empty"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "brebeek"
        },
        "content": "+"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "brebeek"
        },
        "content": "+"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "nordic96"
        },
        "content": "//Jun Hao"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Use case: (UC03) Find appointment"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "nordic96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "nordic96"
        },
        "content": "1.  User requests to find appointments"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "nordic96"
        },
        "content": "2.  User provides fields that the user wants to use to find appointments"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "3.  System finds and displays the list of relevant appointments"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "nordic96"
        },
        "content": "+"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "nordic96"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "nordic96"
        },
        "content": "+"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Use case: (UC04) Delete appointment"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "1.  User requests to list appointments"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "2.  System displays the list of appointments"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "3.  User requests to delete a specific appointment in the list"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "uggi121"
        },
        "content": "4.  System deletes the appointment"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "** 3a1. System shows an error message."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Use case: (UC05) Exit application"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "1. User requests to exit the application"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "2. System displays exit message"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "3. System exits"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "+"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Use case: (UC06) Request help information"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: (UC07) Save updated Appointment data"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "1. User make changes in the appointment list, or a specific appointment via CRUD."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "2. System saves the updated data"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "3. System displays the updated appointment data"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "nordic96"
        },
        "content": "//updated by Ko Gi Hun 7/10/19"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Use case: (UC08) Edit selected appointment"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "nordic96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "nordic96"
        },
        "content": "1. User requests to list appointments"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "nordic96"
        },
        "content": "2. System displays the list of appointments"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "nordic96"
        },
        "content": "3. User keys in index and provide fields that the user wants to edit"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "nordic96"
        },
        "content": "4. System edits the selected appointment accordingly"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "nordic96"
        },
        "content": "+"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "nordic96"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "nordic96"
        },
        "content": "+"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* 3a. User keys in invalid index"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "nordic96"
        },
        "content": "** 3a1. System shows error message."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "nordic96"
        },
        "content": "+"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* 3b. User does not provide any field to edit."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "nordic96"
        },
        "content": "** 3b1. System shows error message."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "nordic96"
        },
        "content": "+"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Use case: (UC09) Undo previous command"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "brebeek"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "brebeek"
        },
        "content": "1.  User requests to undo command"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "brebeek"
        },
        "content": "2.  System reverts the appointment list to its previous state"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "brebeek"
        },
        "content": "+"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "brebeek"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* 2a. There is no previous command"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "brebeek"
        },
        "content": "+"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Use case: (UC10) Redo previous command"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "brebeek"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "brebeek"
        },
        "content": "1.  User requests to redo command"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "brebeek"
        },
        "content": "2.  System reverts the appointment list to its previous undone state"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "brebeek"
        },
        "content": "+"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "brebeek"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* 2a. There is no previous undone command"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "brebeek"
        },
        "content": "+"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "// Updated by Kevin"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Use case: (UC11) Switch tabs"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "1. User requests to switch to a specified tab."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "2. System switches to the appropriate tab."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "+"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* 1a. Requested tab is invalid."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "** 1a1. System shows error message."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "+"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Use case: (UC12) Calendar mode"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "1. User specifies a date to view engagements for."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "2. System shows the engagements for the specified date."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* 1a. User specifies an invalid date."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "** 1a1. System shows error message."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "+"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Use case: (UC13) Calendar mode month switching"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "1. User specifies a month to switch the display to."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "2. System updates the calendar view to display appointments for the specified month."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* 1a. User specifies an invalid month."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "** 1a1. System shows error message."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "+"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "nordic96"
        },
        "content": "//Updated by Jun Hao"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Use case: (UC14) Typing game"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "nordic96"
        },
        "content": "1.  User requests to start the typing game"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "2.  System shows typing game window which displays the specific word(s) to type."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "3.  User plays the game by typing the word(s)."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "4.  Typing game updates the User\u0027s score and health points accordingly."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Steps 2-4 are repeated for as many rounds as required until User runs out of health points."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "5.  Typing game shows the final score of the User when the game ends."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "+"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* 2a. User exits game"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "brebeek"
        },
        "content": "+"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "nordic96"
        },
        "content": "//Updated by Ko Gi Hun 30/09/19"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d\u003d\u003d Use case: (UC15) Generate appointment document in PDF format"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests for generating PDF of an engagement for a selected engagement."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "nordic96"
        },
        "content": "2. System generates a PDF file in a specific external directory"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "nordic96"
        },
        "content": "3. System shows successful message"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "+"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* 3a. User enters invalid credentials."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. System shows error message."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "+"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* 3b. System fails to generate pdf file."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "nordic96"
        },
        "content": "** 3b1. System shows error message."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "nordic96"
        },
        "content": "+"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "brebeek"
        },
        "content": "\u003d\u003d\u003d Use case: (UC16) Sort appointments"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "brebeek"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "brebeek"
        },
        "content": "1.  User requests to Sort appointments and specifies ordering method"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "brebeek"
        },
        "content": "2.  System sorts the list of appointments by the specified order"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "brebeek"
        },
        "content": "+"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "brebeek"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* 1a. User does not specify order"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "brebeek"
        },
        "content": "** 1a1. System shows error message"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "brebeek"
        },
        "content": "+"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* 1b. User specifies an invalid order"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "brebeek"
        },
        "content": "** 1b1. System shows error message"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "brebeek"
        },
        "content": "+"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ".  Should come with automated unit tests and open source code."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ".  Should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ".  Application should not exceed 100MB in size."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[[secretary]] Secretary::"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "brebeek"
        },
        "content": "A person employed by an individual or in an office to assist with correspondence, make appointments,"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "brebeek"
        },
        "content": "and carry out administrative tasks."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[[manager]] Manager::"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "The person that the secretary is assigned to work for."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[[appointment]] Appointment::"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "brebeek"
        },
        "content": "An arrangement, managed and maintained by a secretary, for the manager to meet someone at a particular time and place."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 68,
      "uggi121": 24,
      "nordic96": 171,
      "brebeek": 187,
      "lyskevin": 82,
      "-": 363
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "\u003d Typee - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F14-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": ". Run the `com.typee.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "brebeek": 3,
      "-": 81
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d Typee - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F14-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": "By: `SC09-F14-3`      Since: `Aug 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Typee is a Command Line Interface (CLI) application for managing engagements such as appointments, interviews and meetings."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": "It is designed for secretaries and receptionists who prefer to work with a CLI while still enjoying the benefits of a"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Graphical User Interface (GUI). Head over to \u003c\u003cQuick Start\u003e\u003e to see how to get the application running!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "2. Download the latest `typee.jar`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "3. Copy the file to the folder that you want to use as the home folder for your Typee application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nordic96"
        },
        "content": "4. Enter the command `java -jar typee.jar` on your terminal to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "5. Type a command in the text box and press `Enter` to execute it."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* *`list`* : lists all appointments."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "* **`tab` ** `game`: switches main window to start window of the game."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* **`add`** `d/Meeting on Monday` : adds an appointment with the description `Meeting on Monday` to the appointment manager."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **`pdf` ** `i/1 to/Jason from/Harry`: generates a document of the selected engagement of index 1, by setting the sender as `Harry` and receiver of the document as `Jason`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* **`delete`** `3` : deletes the 3rd appointment shown in the current list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* *`exit`* : exits the app."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Switch to different windows: `tab`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Switches to a different menu in the application window. +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Format: `tab [menu_name]`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* Typee application has mainly 4 major features/menus. User needs to switch to respective windows to perform different commands and features of the system."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nordic96"
        },
        "content": "** Engagement"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nordic96"
        },
        "content": "** TypingGame"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nordic96"
        },
        "content": "** Calendar"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nordic96"
        },
        "content": "** Report"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brebeek"
        },
        "content": "`tab game` is used instead of `tab typinggame` to simplify typing."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* `Engagement` window will be the default window upon start up of the application."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nordic96"
        },
        "content": ".Engagement (default) window displayed on start-up of the application."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "image::tab_1_default.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Now, if the user wants to switch to different windows, simply enter the tab command"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nordic96"
        },
        "content": "with refer to the menu name listed on the left end of the application window. For example, user enters `tab calendar`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nordic96"
        },
        "content": "switch to calendar view window."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nordic96"
        },
        "content": ".input section with tab command entered `tab calendar`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "image::tab_2.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Below is the screenshot after entering the command."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "image::tab_3.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Adding an appointment: `add`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Adds an engagement to the system. Engagement can be in different types; `Engagement`, `Meeting` and `Interview` +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add t/ENGAGEMENT_TYPE s/START_TIME[dd/mm/YYYY/HHMM] e/END_TIME[dd/mm/YYYY/HHMM] l/LOCATION a/ATTENDEES d/DESCRIPTION p/PRIORITY`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".Enters Add Engagement Command in Command Input Text field."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "image::add_1.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* `add t/Meeting s/18/10/2019/1500 e/18/10/2019/1800 l/COM-2-B1-03 a/John, Elijah, Sam d/CS2103T Discussion p/High` +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Adds an engagement with following information;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "** Engagement Type: Meeting"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "** Start Time: 18/10/2019/1500"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "** End Time: 18/10/2019/1800"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "** Location: COM-2-B1-03"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "** Attendees: John, Elijah, Sam"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "** Engagement Description: CS2103T Discussion"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "** Priority: High"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "After user enters the above command, system will save the engagement information and displays the brief engagement information as a list item on the List View."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".Engagement successfully saved in system storage."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "image::add_2.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brebeek"
        },
        "content": "\u003d\u003d\u003d Listing all appointments : `list`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Lists all appointments. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brebeek"
        },
        "content": "\u003d\u003d\u003d Sorting all appointments : `sort`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Sorts the list of all appointments in the appointment list by the order specified by user. +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Format: `sort ORDER`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Orders supported: `description ascending`, `description descending`, `start ascending`, `start descending`, `end ascending`, `end descending`, `priority ascending`, `priority descending`."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* `sort start ascending` +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Sorts the list displayed in ascending order of start time."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[.clearfix]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brebeek"
        },
        "content": "--"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brebeek"
        },
        "content": ".Engagement list before sorting"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::before-sort.png[width\u003d\"450\", float\u003d\"left\"]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[.left]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brebeek"
        },
        "content": ".Engagement list after sorting by start time in ascending order"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::after-sort.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brebeek"
        },
        "content": "--"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brebeek"
        },
        "content": "After sorting, commands that require INDEX as an input field (e.g. `delete`) will take in INDEX with regards to the new list  displayed. e.g. `delete 1` will delete the current first engagement displayed."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Deleting an appointment : `delete`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Deletes the specified appointment from the engagement list. +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* The index refers to the index number shown in the displayed appointment list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Deletes the 2nd appointment in the appointment manager."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* `find meeting` +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Deletes the 1st appointment in the results of the `find` command."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Clears all appointments from the appointment manager. +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Undoing the previous command : `undo`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Undoes the previous command, provided that it exists. +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Undo supports the following commands that modify the engagement list: `add`, `edit`, `delete` and `clear`."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* `add d/Meeting on Monday` +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Undoes the add command, i.e. the engagement with the description `Meeting on Monday` will no longer be in the appointment manager."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brebeek"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Undoes the delete command, i.e. restores the first engagement in the original displayed list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[.float-group]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[.clearfix]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "brebeek"
        },
        "content": "--"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "brebeek"
        },
        "content": ".Engagement list before the command `delete 1`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::after-sort.png[width\u003d\"450\", float\u003d\"left\"]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[.left]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "brebeek"
        },
        "content": ".Engagement list after deletion"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::deletion-before-undo.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "brebeek"
        },
        "content": "--"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "brebeek"
        },
        "content": ".Engagement list after the command `undo`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::undo-result.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "brebeek"
        },
        "content": "\u003d\u003d\u003d Redoing the previous command : `redo`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Redoes the previous `undo` command. There must be a valid undo command to redo, otherwise this command does nothing. +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "brebeek"
        },
        "content": "`undo` (reverts the `delete 1` command) +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "brebeek"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Redoes the previous undo command, i.e. the appointment deleted before `undo` will be removed again from the appointment manager."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[.clearfix]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "brebeek"
        },
        "content": "--"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "brebeek"
        },
        "content": ".Engagement list after the command `undo`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::undo-result.png[width\u003d\"450\", float\u003d\"left\"]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[.left]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "brebeek"
        },
        "content": ".Engagement list after the command `redo`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "brebeek"
        },
        "content": "image::redo-result.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "brebeek"
        },
        "content": "--"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d\u003d\u003d Changing to calendar view : `tab calendar`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Changes the current view to the calendar view, which displays engagements inside a calendar. The calendar displays the number of"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "engagements per day. More commands are provided for interaction with the calendar window."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Format: `tab calendar`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ".Calendar view for October 2019"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "image::calendar-view.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Displaying the list of engagements for a specified date (calendar view only): `calendar opendisplay`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Opens a separate window displaying the list of engagements for the specified date. Only one such window is allowed per date."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "This means that nothing will happen if this command is used with a date which already has an open engagements list window."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Format: `calendar opendisplay [date]`. The date must follow a DD/MM/YYYY format."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "If this command is used to open an engagement list window using a date from another month, the calendar\u0027s view will switch to"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "display that specified month. This command can be used to quickly switch to another month which is not immediately before or"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "after the currently displayed month."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "All engagement list windows will be closed if something is done to change the displayed calendar month"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "(e.g. using the `calendar nextmonth` command). This includes using this command as in the above paragraph."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Example: The calendar is currently displaying information for October 2019 and there are engagement list windows open for three dates"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "in the display. If `calendar opendisplay 11/11/2019` is entered into the input box, then all three engagement list windows will be closed."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "The calendar\u0027s display then switches to November 2019 and the engagement list window for 11 November 2019 is opened up."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "This command does not work if the application is in another tab (view) or the specified date is invalid."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ".Engagement list for 01/11/2019"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "image::calendar-open-display.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "After entering `calendar opendisplay 01/11/2019` into the input box while in calendar view for October 2019, the"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "above window opens up. The date 01/11/2019 is still valid because it is displayed in the calendar view for October"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "2019, albeit at the end of the grid."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Alternatively, you may click on any of the individual cells within the calendar window to open the engagement list"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "for that date."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Changing the calendar display to the next month (calendar view only): `calendar nextmonth`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Changes the calendar view to the month following the currently displayed one. This command does not work if the"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "application is in another tab."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Format: `calendar nextmonth`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ".Changing to the next month from October 2019"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "image::calendar-next-month.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Alternatively, you may click on the blue button with the right arrow next to the calendar\u0027s month title"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "to change the display to the next month."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "This command closes any open engagement windows from the current month before updating the display to the next month."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003d\u003d\u003d Changing the calendar display to the previous month (calendar view only): `calendar previousmonth`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Changes the calendar view to the month prior to the currently displayed one. This command does not work if the"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "application is in another tab."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Format: `calendar previousmonth`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ".Changing to the previous month from October 2019"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "image::calendar-previous-month.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Alternatively, you may click on the blue button with the left arrow next to the calendar\u0027s month title"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "to change the display to the previous month."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "This command closes any open engagement windows from the current month before updating the display to the previous month."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d\u003d\u003d Typing game : `tab game`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Changes the current window to the start window with a kbd:[Start] button."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ".Start window of the game"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "image::StartWindow.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Click the kbd:[Start] button to open the game in a new window."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ".Game window"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "image::GameWindow.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "There are moving words that you can type in order to score points. Once you correctly type the specified word,"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "the word disappears and the increase in points is reflected in the player information panel in the game window."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "After typing a word, remember to press kbd:[Enter] to clear the text area which is located at the bottom of the screen."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "When you fail to type the word before the moving word reaches the bottom of screen, the decrease in health points"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "is reflected in the player information panel in the game window."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "After the health points reaches zero, `GAME OVER` is displayed as shown below."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ".Sample game play when game is over"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "image::GameOver.png[width\u003d\"450\"]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Once the game is over, you can manually close the application by clicking the kbd:[x] on the top right hand corner of the window."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "If you want to play the game again, click the kbd:[Start] button shown in the Start window."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Generating a PDF file of engagement : `pdf`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Pdf Command allows user to create a document of selected engagement in a given format of document template."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Document template can be customised based on the customers\u0027s requirements, however, default document format will be in an eamil format,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nordic96"
        },
        "content": "where the user can set who the user is going to send this document to inform an engagement. +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `pdf i/[index] to/[receiver] from/[sender]` +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nordic96"
        },
        "content": "For example, if the user wants to create a document of an engagement, which has a list index of 1, which can by observed in `engagement` window."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nordic96"
        },
        "content": "User sets the sender as `John`, which is the user\u0027s name, and sets `receiver` as `Harry`. Hence, user enters `pdf i/1 to/Harry from/John` to generate the document."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "image::pdf_1.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Once user enters the command, system will display the command result in the output panel, showing \"Engagement Report successfully generated.\""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Now, if the user clicks the green refresh button on top right of the documents explorer, explorer will display the generated pdf as a list item."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ".refresh button and delete button in documents explorer."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "image::pdf_function_btns.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nordic96"
        },
        "content": ".System after clicking refresh button"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "image::pdf_2.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nordic96"
        },
        "content": "User can double click the list item to open the document file on their local computer file system. Below is the sample of generated document from our system."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nordic96"
        },
        "content": ".pdf document sample"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "image::pdf_sample.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nordic96"
        },
        "content": "If the user does not want to keep the document, instead of directing the actual directory in the local stystem, user can simply click the red `x` button, next to the refresh"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nordic96"
        },
        "content": "button to delete the selected document list item. Once system displays the popup message to confirm the user\u0027s decision, user will click the `OK` button to confirm deletion. Delete function will only available when user has pre-selected the document list item and the selected item must be a .pdf form, not directory."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Below is the screenshot after user clicks the delete button."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nordic96"
        },
        "content": ".pdf delete pop up message"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "image::pdf_delete.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Now, once system successfully deleted the selected document, system will display the status message above the documents explorer. Below is the screenshot of the system status message after deletion."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "image::pdf_delete_after.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "brebeek"
        },
        "content": "NOTE: PDF generation and deletion operations cannot be undone via `undo` command."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nordic96"
        },
        "content": "//Updated by Ko Gi Hun 30/09/19"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003d\u003d\u003d Saving and loading the data"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "The appointment manager\u0027s data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Relevant data will be loaded from the external file when the application starts."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Typee folder."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `add t/ENGAGEMENT_TYPE s/START_TIME[dd/mm/YYYY/HHMM] e/END_TIME[dd/mm/YYYY/HHMM] l/LOCATION a/ATTENDEES d/DESCRIPTION p/PRIORITY` +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add t/Meeting s/18/10/2019/1500 e/18/10/2019/1800 l/COM-2-B1-03 a/John, Elijah, Sam d/CS2103T Discussion p/High`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "* *Tab*: `tab MENU_NAME`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "** *Add Engagement* : `tab engagement`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "** *Calendar* : `tab calendar`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "** *Game* : `tab game`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "** *Report* : `tab report`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "nordic96"
        },
        "content": "* *PDF* : `pdf i/INDEX to/RECEIVER from/SENDER`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* *Sort* : `sort ORDER`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 27,
      "nordic96": 50,
      "brebeek": 67,
      "lyskevin": 102,
      "-": 138
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(engagementList)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 1,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/CalendarWindowClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package CalendarWindow \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class Tab UI_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart UI_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class CalendarWindow UI_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class CalendarTitleBar UI_COLOR_T2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class PreviousMonthButton UI_COLOR_T2"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class CalendarTitle UI_COLOR_T2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class NextMonthButton UI_COLOR_T2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class WeekdayDisplayPane UI_COLOR_T3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class Weekday UI_COLOR_T3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class DateDisplayGrid UI_COLOR_T4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class IndividualDatePane UI_COLOR_T4"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class Engagement #9D0012"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "HiddenOutside ..\u003e Tab"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Tab *-down-\u003e \"0...1\" CalendarWindow"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "CalendarWindow .up.|\u003e UiPart"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "CalendarWindow -right-\u003e Logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "CalendarWindow *-down-\u003e CalendarTitleBar"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "CalendarWindow *-down-\u003e WeekdayDisplayPane"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "CalendarWindow *-down-\u003e DateDisplayGrid"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "CalendarTitleBar *-down-\u003e PreviousMonthButton"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "CalendarTitleBar *-down-\u003e CalendarTitle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "CalendarTitleBar *-down-\u003e NextMonthButton"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "WeekdayDisplayPane *-down-\u003e \"7\" Weekday"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "DateDisplayGrid *-down-\u003e \"35\" IndividualDatePane"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "IndividualDatePane .up.|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "IndividualDatePane *-down-\u003e \"*\" Engagement"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Engagement .right.\u003e Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 52
    }
  },
  {
    "path": "docs/diagrams/CalendarWindowSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "actor User"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "box UI UI_COLOR_T1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "participant \":UI\" as UI UI_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "participant \":Tab\" as Tab UI_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "participant \":CalendarWindow\" as CalendarWindow UI_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "participant \":IndividualDatePane\" as IndividualDatePane UI_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "participant \":Logic\" as Logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "User -\u003e UI: \"tab calendar\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "activate UI"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "UI -\u003e Logic: execute(\"tab calendar\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "activate Logic"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "create Tab"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Logic -\u003e Tab"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "activate Tab"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Tab --\u003e Logic"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "deactivate Tab"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Logic --\u003e UI"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "deactivate Logic"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "UI -\u003e UI: fetchTabInformation(tabName)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "activate UI"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "create CalendarWindow"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "UI -\u003e CalendarWindow"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "activate CalendarWindow"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "CalendarWindow --\u003e UI"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "deactivate CalendarWindow"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "UI -\u003e CalendarWindow: setLogic(Logic)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "activate CalendarWindow"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "CalendarWindow --\u003e UI"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "deactivate CalendarWindow"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "UI -\u003e CalendarWindow: populateCalendar()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "activate CalendarWindow"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "loop 35 times"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    create IndividualDatePane"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    CalendarWindow -\u003e IndividualDatePane"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    activate IndividualDatePane"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    IndividualDatePane --\u003e CalendarWindow"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    deactivate IndividualDatePane"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "end"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "loop 35 times"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    CalendarWindow -\u003e IndividualDatePane: add(engagements)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    activate IndividualDatePane"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    IndividualDatePane --\u003e CalendarWindow"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    deactivate IndividualDatePane"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "end"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "CalendarWindow --\u003e UI"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "deactivate CalendarWindow"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "deactivate UI"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "UI -\u003e Tab: setController(calendarWindow)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "activate Tab"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "Tab --\u003e UI"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "deactivate Tab"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "UI --\u003e User"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "deactivate UI"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 83
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "if () then ([command saves new"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "EngagementList state])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    :Purge redunant states;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    :Save EngagementList to"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    historyList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "brebeek": 4,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/GameWindowClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package ui.game {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    class StartWindow"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    class Tab"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    class MainWindow"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    abstract class UiPart\u003cRegion\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    class GameWindow"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    class PlayerInformation"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    class GameBody"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    class MovingWord"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package game {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    class Player"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    class Words"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "UiPart \u003c- Tab"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "UiPart \u003c|-- MainWindow"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "UiPart \u003c|- StartWindow"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "UiPart \u003c|-- GameWindow"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "UiPart \u003c|-- GameBody"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "UiPart \u003c|-- PlayerInformation"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "UiPart \u003c|-- MovingWord"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "MainWindow *--\u003e Tab"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "MainWindow ..\u003e StartWindow"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "StartWindow -right--\u003e \"0...1\" GameWindow"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "GameWindow -down--\u003e \"1\" GameBody"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "GameWindow -down--\u003e \"1\" PlayerInformation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "MovingWord .down.\u003e Words"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "GameWindow .down.\u003e Player"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "GameBody .down.\u003e Player"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "GameBody .right.\u003e \"*\" MovingWord"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "PlayerInformation .down.\u003e Player"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 38
    }
  },
  {
    "path": "docs/diagrams/GenerateDocumentSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "box Logic"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "participant \":LogicManager\" as LogicManager"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "participant \":TypeeParser\" as TypeeParser"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "participant \":PdfCommandParser\" as PdfCommandParser"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "participant \"p:PdfCommand\" as PdfCommand"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "participant \":CommandResult\" as CommandResult"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "box PdfUtil"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "participant \":PdfUtil\" as PdfUtil"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[-\u003e LogicManager : execute(\"pdf i/1 to/Harry from/Ron\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nordic96"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": "LogicManager -\u003e TypeeParser : parseCommand(\"pdf i/1 to/Harry from/Ron\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nordic96"
        },
        "content": "activate TypeeParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nordic96"
        },
        "content": "create PdfCommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": "TypeeParser -\u003e PdfCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nordic96"
        },
        "content": "activate PdfCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfCommandParser --\u003e TypeeParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nordic96"
        },
        "content": "deactivate PdfCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "TypeeParser -\u003e PdfCommandParser : parse(\"i/1 to/Harry from/Ron\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nordic96"
        },
        "content": "activate PdfCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nordic96"
        },
        "content": "create PdfCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfCommandParser -\u003e PdfCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nordic96"
        },
        "content": "activate PdfCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfCommand --\u003e PdfCommandParser : p"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nordic96"
        },
        "content": "deactivate PdfCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfCommandParser --\u003e TypeeParser : p"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nordic96"
        },
        "content": "deactivate PdfCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfCommandParser -[hidden]-\u003e TypeeParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nordic96"
        },
        "content": "destroy PdfCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nordic96"
        },
        "content": "TypeeParser --\u003e LogicManager : p"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nordic96"
        },
        "content": "deactivate TypeeParser"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nordic96"
        },
        "content": "LogicManager -\u003e PdfCommand : execute()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nordic96"
        },
        "content": "activate PdfCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfCommand -\u003e PdfUtil : generateDocument(engagement)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nordic96"
        },
        "content": "activate PdfUtil"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfUtil --\u003e PdfCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nordic96"
        },
        "content": "deactivate PdfUtil"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nordic96"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nordic96"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nordic96"
        },
        "content": "CommandResult --\u003e PdfCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nordic96"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nordic96"
        },
        "content": "deactivate PdfCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nordic96"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nordic96"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "nordic96": 68
    }
  },
  {
    "path": "docs/diagrams/PdfCommandClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package ui {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class ReportWindow"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class Tab"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class MainWindow"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    abstract class UiPart\u003cRegion\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package logic.commands {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    abstract class Command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class PdfCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package logic.parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    interface Parser"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class PdfCommandParser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class TypeeParser"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class Report"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class Person"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class Engagement"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package util {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class PdfUtil"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nordic96"
        },
        "content": "UiPart \u003c|-- Tab"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "UiPart \u003c|-- MainWindow"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nordic96"
        },
        "content": "UiPart \u003c|-- ReportWindow"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nordic96"
        },
        "content": "MainWindow *--\u003e Tab"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nordic96"
        },
        "content": "MainWindow ..\u003e ReportWindow"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nordic96"
        },
        "content": "MainWindow ..\u003e TypeeParser"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Command \u003c|-- PdfCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Report --\u003e Engagement"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Report --\u003e Person"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Engagement -\u003e Person"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Parser \u003c|.. PdfCommandParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfCommand ..\u003e PdfUtil"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfCommand -\u003e Report"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nordic96"
        },
        "content": "TypeeParser ..\u003e PdfCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nordic96"
        },
        "content": "PdfCommandParser ..\u003e PdfCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "nordic96": 42
    }
  },
  {
    "path": "docs/diagrams/PdfUtilClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package util {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class PdfUtil {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        ~ generateReport(engagement: Engagement): void"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        ~ initDocument(): Document"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        ~ addHeader(document: Document): Document"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        ~ addContent(document: Document, engagement:Engagement): Document"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        ~ addParagraph(document: Document, engagement:Engagement): Document"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "nordic96": 11
    }
  },
  {
    "path": "docs/diagrams/SortSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "participant \":TypeeParser\" as TypeeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "participant \":SortCommandParser\" as SortCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "participant \"s:SortCommand\" as SortCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "participant \":ParserUtil\" as ParserUtil LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "participant \":EngagementComparator\" as EngagementComparator MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "participant \":HistoryManager\" as HistoryManager MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[-\u003e LogicManager : execute(\"sort priority ascending\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "LogicManager -\u003e TypeeParser : parseCommand(sort)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": "activate TypeeParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "create SortCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "TypeeParser -\u003e SortCommandParser : parse()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "activate SortCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": "SortCommandParser -\u003e SortCommandParser : parseOrder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "SortCommandParser -\u003e ParserUtil : parseComparator()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "activate ParserUtil"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "ParserUtil -\u003e EngagementComparator : getComparator()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "activate EngagementComparator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "EngagementComparator -\u003e ParserUtil : PRIORITY_ASCENDING"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "deactivate EngagementComparator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "ParserUtil -\u003e SortCommandParser : PRIORITY_ASCENDING"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "deactivate ParserUtil"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "create SortCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "SortCommandParser -\u003e SortCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "activate SortCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brebeek"
        },
        "content": "SortCommand --\u003e SortCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brebeek"
        },
        "content": "deactivate SortCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brebeek"
        },
        "content": "SortCommandParser --\u003e TypeeParser : s"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brebeek"
        },
        "content": "deactivate SortCommandParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brebeek"
        },
        "content": "SortCommandParser -[hidden]-\u003e TypeeParser : s"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brebeek"
        },
        "content": "destroy SortCommandParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brebeek"
        },
        "content": "TypeeParser --\u003e LogicManager : s"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brebeek"
        },
        "content": "deactivate TypeeParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brebeek"
        },
        "content": "LogicManager -\u003e SortCommand : execute()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brebeek"
        },
        "content": "activate SortCommand"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brebeek"
        },
        "content": "SortCommand -\u003e Model : setComparator()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brebeek"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Model --\u003e SortCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brebeek"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brebeek"
        },
        "content": "SortCommand -\u003e Model : updateSortedEngagementList()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brebeek"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Model -\u003e HistoryManager : sort()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brebeek"
        },
        "content": "activate HistoryManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brebeek"
        },
        "content": "HistoryManager --\u003e Model :"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brebeek"
        },
        "content": "deactivate HistoryManager"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Model --\u003e SortCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brebeek"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brebeek"
        },
        "content": "SortCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brebeek"
        },
        "content": "deactivate SortCommand"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brebeek"
        },
        "content": "SortCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brebeek"
        },
        "content": "destroy SortCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brebeek"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brebeek"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brebeek"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "brebeek": 81
    }
  },
  {
    "path": "docs/diagrams/SortUpdateActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "if () then ([command modifies"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "EngagementList])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    :Sort the list with current comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "stop"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "brebeek": 14
    }
  },
  {
    "path": "docs/diagrams/TabClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": "class Tab {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    - name: String"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    - url: String"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    - controller: UiPart\u003cRegion\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    Tab(name:String): Tab"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    Tab(name:String, url:String, controller:UiPart\u003cRegion\u003e): Tab"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    getName(): String"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    setName(name: String)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    getController(): UiPart\u003cRegion\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    setController(controller:UiPart\u003cRegion\u003e): void"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "nordic96": 13
    }
  },
  {
    "path": "docs/diagrams/TabCommandClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package ui {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class TabPanel"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class MainWindow {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        fetchTabInformation(tabName:String): Tab"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class Tab"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    abstract class UiPart\u003cRegion\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package logic.parser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class TabCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    interface Parser"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class TypeeParser"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package logic.commands {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class TabCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    abstract class Command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class CommandResult"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nordic96"
        },
        "content": "UiPart \u003c|-- Tab"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nordic96"
        },
        "content": "UiPart \u003c|-- TabPanel"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nordic96"
        },
        "content": "UiPart \u003c|-- MainWindow"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nordic96"
        },
        "content": "MainWindow *--\u003e Tab"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nordic96"
        },
        "content": "MainWindow *--\u003e TabPanel"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Parser \u003c|.. TabCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Parser \u003c|.. TypeeParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nordic96"
        },
        "content": "TypeeParser ..\u003e TabCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nordic96"
        },
        "content": "Command \u003c|-- TabCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nordic96"
        },
        "content": "TabCommandParser ..\u003e TabCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nordic96"
        },
        "content": "TabCommand ..\u003e CommandResult"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nordic96"
        },
        "content": "MainWindow ..\u003e TypeeParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nordic96"
        },
        "content": "CommandResult .. MainWindow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "nordic96": 36
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class PersonCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Class StartWindow"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Class GameWindow"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Class PlayerInformation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Class GameBody"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "Class MovingWords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "MainWindow --\u003e StartWindow"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e PersonListPanel"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -down-\u003e PersonCard"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "StartWindow -down-\u003e GameWindow"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "GameWindow -down-\u003e GameBody"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "GameWindow -down-\u003e MovingWords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "GameWindow -down-\u003e PlayerInformation"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "PersonCard --|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "HelpWindow -down---|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "StartWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "GameWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "MovingWords -down---|\u003e UiPart"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "GameBody -down---|\u003e UiPart"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "PlayerInformation -down---|\u003e UiPart"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "PersonCard ..\u003e Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "PersonListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 16,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    class State1 as \"__el0:EngagementList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    class State2 as \"__el1:EngagementList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    class State3 as \"__el2:EngagementList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "brebeek": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"delete 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    class State1 as \"__el0:EngagementList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    class State2 as \"__el1:EngagementList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    class State3 as \"__el2:EngagementList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "brebeek": 3,
      "-": 19
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "title After command \"add d/meeting...\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    class State1 as \"__el0:EngagementList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    class State2 as \"__el1:EngagementList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    class State3 as \"__el2:EngagementList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "brebeek": 4,
      "-": 16
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    class State1 as \"__el0:EngagementList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    class State2 as \"__el1:EngagementList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    class State3 as \"__el2:EngagementList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "brebeek": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "title After command \"sort start ascending\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    class State1 as \"__el0:EngagementList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    class State2 as \"__el1:EngagementList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    class State3 as \"__el2:EngagementList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "brebeek": 4,
      "-": 16
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    class State1 as \"__el0:EngagementList__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    class State2 as \"__el1:EngagementList__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    class State3 as \"__el3:EngagementList__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "note right on link: State el2 deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "brebeek": 4,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "participant \":TypeeParser\" as TypeeParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "participant \":HistoryManager\" as HistoryManager MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "LogicManager -\u003e TypeeParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "activate TypeeParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": "TypeeParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "UndoCommand --\u003e TypeeParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": "TypeeParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "deactivate TypeeParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "UndoCommand -\u003e Model : undoEngagementList()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Model -\u003e HistoryManager : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "activate HistoryManager"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "HistoryManager -\u003e HistoryManager :isUndoable()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "HistoryManager -\u003e HistoryManager :resetData(ReadOnlyEngagementList)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "HistoryManager --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "deactivate HistoryManager"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "brebeek": 15,
      "-": 38
    }
  },
  {
    "path": "docs/diagrams/fetchTabInformationActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": "(*)  --\u003e \"check tab name in the tab list\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "--\u003e \"Fetch Tab Information\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "--\u003e \"setController of matching tab name\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "--\u003e \"Return fetched tab\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "--\u003e(*)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "nordic96": 7
    }
  },
  {
    "path": "docs/stylesheets/asciidoctor.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/* Remove comment around @import statement below when using as a custom stylesheet */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/*@import \"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "audio,canvas,video{display:inline-block}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "audio:not([controls]){display:none;height:0}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "[hidden],template{display:none}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "script{display:none!important}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "body{margin:0}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "a{background:transparent}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "a:focus{outline:thin dotted}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "a:active,a:hover{outline:0}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2em;margin:.67em 0}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]{border-bottom:1px dotted}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "b,strong{font-weight:bold}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "dfn{font-style:italic}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mark{background:#ff0;color:#000}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "code,kbd,pre,samp{font-family:monospace;font-size:1em}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "pre{white-space:pre-wrap}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:80%}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "sup{top:-.5em}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "sub{bottom:-.25em}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "img{border:0}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "svg:not(:root){overflow:hidden}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "figure{margin:0}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "legend{border:0;padding:0}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "button,input{line-height:normal}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "button,select{text-transform:none}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "button,html input[type\u003d\"button\"],input[type\u003d\"reset\"],input[type\u003d\"submit\"]{-webkit-appearance:button;cursor:pointer}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "button[disabled],html input[disabled]{cursor:default}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"checkbox\"],input[type\u003d\"radio\"]{box-sizing:border-box;padding:0}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]::-webkit-search-cancel-button,input[type\u003d\"search\"]::-webkit-search-decoration{-webkit-appearance:none}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{overflow:auto;vertical-align:top}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "table{border-collapse:collapse;border-spacing:0}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "html,body{font-size:100%}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover{cursor:pointer}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,embed{max-width:100%;height:auto}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "object,embed{height:100%}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "img{-ms-interpolation-mode:bicubic}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".left{float:left!important}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".right{float:right!important}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".text-left{text-align:left!important}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".text-right{text-align:right!important}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".text-center{text-align:center!important}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".text-justify{text-align:justify!important}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".hide{display:none}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "body{-webkit-font-smoothing:antialiased}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,svg{display:inline-block;vertical-align:middle}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{height:auto;min-height:50px}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "select{width:100%}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".center{margin-left:auto;margin-right:auto}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".spread{width:100%}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "p.lead,.paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".subheader,.admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:#2156a5;text-decoration:underline;line-height:inherit}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover,a:focus{color:#1d4b8f}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "a img{border:none}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "p aside{font-size:.875em;line-height:1.35;font-style:italic}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "h1 small,h2 small,h3 small,#toctitle small,.sidebarblock\u003e.content\u003e.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.125em}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:1.6875em}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.375em}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "h4,h5{font-size:1.125em}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "h6{font-size:1em}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "em,i{font-style:italic;line-height:inherit}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "strong,b{font-weight:bold;line-height:inherit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:60%;line-height:inherit}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "code{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square{list-style-type:square}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "ul.circle{list-style-type:circle}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "ul.disc{list-style-type:disc}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "ul.no-bullet{list-style:none}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "dl dt{margin-bottom:.3125em;font-weight:bold}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "abbr{text-transform:none}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite:before{content:\"\\2014 \\0020\"}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.75em}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:2.3125em}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.6875em}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "h4{font-size:1.4375em}}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "table thead,table tfoot{background:#f7f8f7;font-weight:bold}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "body{tab-size:4}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock\u003e.content\u003e.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:after,.float-group:after{clear:both}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "*:not(pre)\u003ecode{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "pre,pre\u003ecode{line-height:1.45;color:rgba(0,0,0,.9);font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq{color:rgba(51,51,51,.8)}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "kbd{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:first-child{margin-left:0}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:last-child{margin-right:0}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".menuseq,.menu{color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before{content:\"[\";padding:0 3px 0 2px}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:after{content:\"]\";padding:0 2px 0 3px}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "p a\u003ecode:hover{color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "#header:after,#content:after,#footnotes:after,#footer:after{clear:both}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "#content{margin-top:1.25em}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "#content:before{content:none}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:only-child,body.toc2 #header\u003eh1:nth-last-child(2){border-bottom:1px solid #ddddd8;padding-bottom:8px}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details{border-bottom:1px solid #ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span:first-child{margin-left:-.125em}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span.email a{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br{display:none}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span:before{content:\"\\00a0\\2013\\00a0\"}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span.author:before{content:\"\\00a0\\22c5\\00a0\";color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span#revremark:before{content:\"\\00a0|\\00a0\"}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber{text-transform:capitalize}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber:after{content:\"\\00a0\"}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "#content\u003eh1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #efefed;padding-bottom:.5em}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "#toc\u003eul{margin-left:.125em}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0\u003eli\u003ea{font-style:italic}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;list-style-type:none}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "#toc li{line-height:1.3334;margin-top:.3334em}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a{text-decoration:none}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle{color:#7a2518;font-size:1.2em}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){#toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2{padding-left:15em;padding-right:0}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #efefed;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.9em;margin-bottom:0}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{margin-left:0;padding-left:1em}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:15em}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #efefed;left:auto;right:0}}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{width:20em}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.95em}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{padding-left:1.25em}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:20em}}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(255,255,255,.8);line-height:1.44}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:.625em}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border-top:1px solid #efefed}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor,h2\u003ea.anchor,h3\u003ea.anchor,#toctitle\u003ea.anchor,.sidebarblock\u003e.content\u003e.title\u003ea.anchor,h4\u003ea.anchor,h5\u003ea.anchor,h6\u003ea.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor:before,h2\u003ea.anchor:before,h3\u003ea.anchor:before,#toctitle\u003ea.anchor:before,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:before,h4\u003ea.anchor:before,h5\u003ea.anchor:before,h6\u003ea.anchor:before{content:\"\\00A7\";font-size:.85em;display:block;padding-top:.1em}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1:hover\u003ea.anchor,#content h1\u003ea.anchor:hover,h2:hover\u003ea.anchor,h2\u003ea.anchor:hover,h3:hover\u003ea.anchor,#toctitle:hover\u003ea.anchor,.sidebarblock\u003e.content\u003e.title:hover\u003ea.anchor,h3\u003ea.anchor:hover,#toctitle\u003ea.anchor:hover,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:hover,h4:hover\u003ea.anchor,h4\u003ea.anchor:hover,h5:hover\u003ea.anchor,h5\u003ea.anchor:hover,h6:hover\u003ea.anchor,h6\u003ea.anchor:hover{visibility:visible}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link,h2\u003ea.link,h3\u003ea.link,#toctitle\u003ea.link,.sidebarblock\u003e.content\u003e.title\u003ea.link,h4\u003ea.link,h5\u003ea.link,h6\u003ea.link{color:#ba3925;text-decoration:none}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link:hover,h2\u003ea.link:hover,h3\u003ea.link:hover,#toctitle\u003ea.link:hover,.sidebarblock\u003e.content\u003e.title\u003ea.link:hover,h4\u003ea.link:hover,h5\u003ea.link:hover,h6\u003ea.link:hover{color:#a53221}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{text-rendering:optimizeLegibility;text-align:left;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-size:1rem;font-style:italic}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock\u003ecaption.title{white-space:nowrap;overflow:visible;max-width:0}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock #preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:inherit}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable{border-collapse:separate;border:0;background:none;width:100%}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon{text-align:center;width:80px}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon img{max-width:none}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon .title{font-weight:bold;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;text-transform:uppercase}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content\u003e:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e.content\u003e.title{color:#7a2518;margin-top:0;text-align:center}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child\u003e:last-child,.exampleblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content\u003e:last-child\u003e:last-child,.sidebarblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class\u003d\"highlight\"],.listingblock pre[class^\u003d\"highlight \"],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class\u003d\"highlight\"],.sidebarblock .listingblock pre[class^\u003d\"highlight \"],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;padding:1em;font-size:.8125em}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock pre.nowrap,.listingblock pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs{padding:0}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs\u003ecode{padding:1em;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.prettyprint{border-width:0}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock\u003e.content{position:relative}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock:hover code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:#999}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:not([data-prompt]):before{content:\"$\"}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td.code{padding-left:.75em;padding-right:0}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #ddddd8}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno{display:inline-block;margin-right:.25em}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable .linenodiv{background:none!important;padding-right:0!important}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock{margin:0 1em 1.25em 1.5em;display:table}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock\u003e.title{margin-left:-1.5em;margin-bottom:.75em}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote,.quoteblock blockquote p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote{margin:0;padding:0;border:0}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote:before{content:\"\\201c\";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote\u003e.paragraph:last-child p{margin-bottom:0}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution{margin-top:.5em;margin-right:.5ex;text-align:right}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em 0;border-left:3px solid rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote{padding:0 0 0 .75em}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote:before{display:none}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock{margin:0 1em 1.25em 1em}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre{font-family:\"Open Sans\",\"DejaVu Sans\",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre strong{font-weight:400}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution br,.verseblock .attribution br{display:none}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract{margin:0 0 1.25em 0;display:block}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote,.quoteblock.abstract blockquote p{text-align:left;word-spacing:0}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote p:first-of-type:before{display:none}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock{max-width:100%;border-collapse:separate}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock td\u003e.paragraph:last-child p\u003ep:last-child,table.tableblock th\u003ep:last-child,table.tableblock td\u003ep:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 1px 1px 0}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tfoot\u003etr\u003eth.tableblock,table.grid-all tfoot\u003etr\u003etd.tableblock{border-width:1px 1px 0 0}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-cols th.tableblock,table.grid-cols td.tableblock{border-width:0 1px 0 0}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all *\u003etr\u003e.tableblock:last-child,table.grid-cols *\u003etr\u003e.tableblock:last-child{border-right-width:0}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows th.tableblock,table.grid-rows td.tableblock{border-width:0 0 1px 0}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tbody\u003etr:last-child\u003eth.tableblock,table.grid-all tbody\u003etr:last-child\u003etd.tableblock,table.grid-all thead:last-child\u003etr\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003etd.tableblock,table.grid-rows thead:last-child\u003etr\u003eth.tableblock{border-bottom-width:0}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows tfoot\u003etr\u003eth.tableblock,table.grid-rows tfoot\u003etr\u003etd.tableblock{border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-all{border-width:1px}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-sides{border-width:0 1px}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-topbot{border-width:1px 0}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-left,td.halign-left{text-align:left}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-right,td.halign-right{text-align:right}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-center,td.halign-center{text-align:center}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-top,td.valign-top{vertical-align:top}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-bottom,td.valign-bottom{vertical-align:bottom}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-middle,td.valign-middle{vertical-align:middle}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "table thead th,table tfoot th{font-weight:bold}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock\u003ecode:only-child{background:none;padding:0}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "td\u003ediv.verse{white-space:pre}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "ol{margin-left:1.75em}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ol{margin-left:1.5em}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-left:1.125em}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd:last-child,dl dd:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "ol\u003eli p,ul\u003eli p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003e.fa-square-o:first-child,ul.checklist li\u003ep:first-child\u003e.fa-check-square-o:first-child{width:1em;font-size:.85em}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003einput[type\u003d\"checkbox\"]:first-child{width:1em;position:relative;top:1px}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline{margin:0 auto .625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli{list-style:none;float:left;margin-left:1.375em;display:block}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli\u003e*{display:block}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".unstyled dl dt{font-weight:400;font-style:normal}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "ol.arabic{list-style-type:decimal}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "ol.decimal{list-style-type:decimal-leading-zero}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "ol.loweralpha{list-style-type:lower-alpha}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperalpha{list-style-type:upper-alpha}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowerroman{list-style-type:lower-roman}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperroman{list-style-type:upper-roman}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowergreek{list-style-type:lower-greek}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable,.colist\u003etable{border:0;background:none}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable\u003etbody\u003etr,.colist\u003etable\u003etbody\u003etr{background:none}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1{font-weight:bold;padding-bottom:1.25em}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock+.colist,.listingblock+.colist{margin-top:-.5em}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:first-of-type{padding:0 .75em;line-height:1}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:last-of-type{padding:.25em 0}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.left,.imageblock[style*\u003d\"float: left\"]{margin:.25em .625em 1.25em 0}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.right,.imageblock[style*\u003d\"float: right\"]{margin:.25em 0 1.25em .625em}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock\u003e.title{margin-bottom:0}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb,.imageblock.th{border-width:6px}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb\u003e.title,.imageblock.th\u003e.title{padding:0 .125em}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left{margin-right:.625em}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".image.right{margin-left:.625em}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "a.image{text-decoration:none;display:inline-block}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "a.image object{pointer-events:none}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a,sup.footnoteref a{text-decoration:none}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;text-indent:-1.05em;margin-bottom:.2em}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote:last-of-type{margin-bottom:0}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable{border:0;background:#fff;width:100%;margin-bottom:0}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable td.line-data{width:99%}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "div.unbreakable{page-break-inside:avoid}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ".big{font-size:larger}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".small{font-size:smaller}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".underline{text-decoration:underline}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".overline{text-decoration:overline}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ".line-through{text-decoration:line-through}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua{color:#00bfbf}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua-background{background-color:#00fafa}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".black{color:#000}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ".black-background{background-color:#000}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".blue{color:#0000bf}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".blue-background{background-color:#0000fa}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia{color:#bf00bf}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia-background{background-color:#fa00fa}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ".gray{color:#606060}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ".gray-background{background-color:#7d7d7d}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ".green{color:#006000}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ".green-background{background-color:#007d00}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".lime{color:#00bf00}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ".lime-background{background-color:#00fa00}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon{color:#600000}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon-background{background-color:#7d0000}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ".navy{color:#000060}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ".navy-background{background-color:#00007d}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ".olive{color:#606000}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ".olive-background{background-color:#7d7d00}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ".purple{color:#600060}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".purple-background{background-color:#7d007d}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ".red{color:#bf0000}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ".red-background{background-color:#fa0000}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ".silver{color:#909090}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ".silver-background{background-color:#bcbcbc}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".teal{color:#006060}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".teal-background{background-color:#007d7d}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ".white{color:#bfbfbf}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ".white-background{background-color:#fafafa}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow{color:#bfbf00}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow-background{background-color:#fafa00}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "span.icon\u003e.fa{cursor:default}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon [class^\u003d\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-note:before{content:\"\\f05a\";color:#19407c}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-tip:before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-warning:before{content:\"\\f071\";color:#bf6900}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-caution:before{content:\"\\f06d\";color:#bf3400}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-important:before{content:\"\\f06a\";color:#bf0000}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value] *{color:#fff!important}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]+b{display:none}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]:after{content:attr(data-value)}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "pre .conum[data-value]{position:relative;top:-.125em}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "b.conum *{color:inherit!important}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ".conum:not([data-value]):empty{display:none}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,p,td.content,span.alt{letter-spacing:-.01em}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "p{margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:none!important}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "@media print{@page{margin:1.25cm .75cm}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:inherit!important;text-decoration:underline!important}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "a.bare,a[href^\u003d\"#\"],a[href^\u003d\"mailto:\"]{text-decoration:none!important}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "a[href^\u003d\"http:\"]:not(.bare):after,a[href^\u003d\"https:\"]:not(.bare):after{content:\"(\" attr(href) \")\";display:inline-block;font-size:.875em;padding-left:.25em}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]:after{content:\" (\" attr(title) \")\"}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "pre,blockquote,tr,img,object,svg{page-break-inside:avoid}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "thead{display:table-header-group}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "svg{max-width:100%}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title{page-break-after:avoid}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "#toc,.sidebarblock,.exampleblock\u003e.content{background:none!important}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #ddddd8!important;padding-bottom:0!important}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:0!important}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border:0!important}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{margin-top:1.25rem}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header{text-align:center}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header\u003eh1:first-child{border:0!important;margin:2.5em 0 1em 0}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details{border:0!important;display:block;padding:0!important}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details span:first-child{margin-left:0!important}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br{display:block}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br+span:before{content:none!important}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1\u003eh2{page-break-before:always}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{background:none!important;padding:0 .9375em}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-on-print{display:none!important}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:block!important}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-for-print{display:none!important}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ".show-for-print{display:inherit!important}}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "brebeek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * For modern browsers"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * 1. The space content is one way to avoid an Opera bug when the"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "brebeek"
        },
        "content": " *    contenteditable attribute is included anywhere else in the document."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "brebeek"
        },
        "content": " *    Otherwise it causes space to appear at the top and bottom of elements"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "brebeek"
        },
        "content": " *    that are clearfixed."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * 2. The use of `table` rather than `block` is only necessary if using"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "brebeek"
        },
        "content": " *    `:before` to contain the top-margins of child elements."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "brebeek"
        },
        "content": " */"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "brebeek"
        },
        "content": ".cf:before,"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "brebeek"
        },
        "content": ".cf:after {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    content: \" \"; /* 1 */"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    display: table; /* 2 */"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "brebeek"
        },
        "content": ".cf:after {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    clear: both;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "brebeek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * For IE 6/7 only"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Include this rule to trigger hasLayout and contain floats."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "brebeek"
        },
        "content": " */"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "brebeek"
        },
        "content": ".cf {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    *zoom: 1;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 26,
      "-": 407
    }
  },
  {
    "path": "docs/team/brebeek.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "\u003d Hu Yuchen - Project Portfolio [To be modified]"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "\u003d\u003d PROJECT: Typee"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "Typee is a desktop engagement management application. It has a GUI created with JavaFX, but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "It is an appointment manager for secretaries and receptionists to better schedule and manage appointments. It is written in Java, and has about 15 kLoC."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* *Major enhancement*: added the ability to *undo/redo previous commands*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* *Major enhancement*: added the ability to *sort engagements by custom order*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "** What it does: allows the user to sort."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "** Justification: This feature improves the product significantly because it sorts."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": "** Credits: _"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brebeek"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brebeek"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brebeek"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brebeek"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brebeek"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brebeek"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brebeek"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brebeek"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brebeek"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brebeek"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brebeek"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brebeek"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brebeek"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "brebeek": 74
    }
  },
  {
    "path": "docs/team/johndoe.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "AddressBook - Level 3 is a desktop engagement list application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "brebeek": 1,
      "-": 71
    }
  },
  {
    "path": "docs/team/jun-ha0.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ":profile-caption: :computer:"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d Ng Jun Hao - Project Portfolio"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ":bl: pass:[ +]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "[PROFILE]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "--"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "image::jun-ha0.png[width\u003d\"130\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "--"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "[blue]#This page serves as my _CS2103T_ project portfolio page on project *_Typee_*.# The following technologies"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "and software were used in the development of *_Typee_* application:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "--"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "image::java-logo.png[width\u003d\"80\", height\u003d\"80\", float\u003d\"left\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "image::javafx-logo.png[width\u003d\"80\", height\u003d\"80\", float\u003d\"left\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "image::junit5-logo.png[width\u003d\"80\", height\u003d\"80\", 66,70, float\u003d\"left\"]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "image::json-logo.png[width\u003d\"80\", height\u003d\"80\", 67,70, float\u003d\"left\"]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "image::travis-logo.png[width\u003d\"80\", height\u003d\"80\", 68,70,float\u003d\"left\"]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "//image::appveyor-logo.png[width\u003d\"80\", height\u003d\"80\", float\u003d\"left\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "//image::coveralls-logo.png[width\u003d\"80\", height\u003d\"80\", float\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "image::github-logo.png[width\u003d\"80\", height\u003d\"80\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d\u003d PROJECT: Typee"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "We are a group of 5 NUS Computer Science students involved in enhancing a basic command line interface (CLI) desktop"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "application that manages addresses for our Software Engineering project. We chose to morph it into an appointment"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "management application called *_Typee_*."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "*_Typee_* is a CLI application that allows secretaries and receptionists to better schedule and"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "manage appointments. Receptionists and secretaries possess one of the fastest typing speeds and would get increased"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "productivity using the CLI-based *_Typee_*. The CLI application boosts productivity by having a comprehensive"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "appointment management system with calendar view, pdf report generation, as well as a typing game."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "image::Ui.png[width\u003d\"900\", height\u003d\"900\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "The sections below will cover the following:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "1. Summary of contributions"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "2. Major and minor enhancements"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "3. Contributions to User Guide and Developer Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d\u003d Summary of Contributions"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "|[blue]#This section will give you a brief overview of my contributions to the project.# +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "This section will be split into *Major Enhancement*, *Other Contributions* and *Code contributed* sub-sections."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "* It would be helpful to read the"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "link:https://github.com/AY1920S1-CS2103T-F14-3/main/blob/master/docs/DeveloperGuide.adoc[Developer Guide]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "and link:https://github.com/AY1920S1-CS2103T-F14-3/main/blob/master/docs/UserGuide.adoc[User Guide]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "to understand more about *_Typee_* and its list of features in order to have a better idea of my contributions to the project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "* To try out *_Typee_* , go to the User Guide and find the [navy]#*Quick Start*# section for more information."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d\u003d\u003d Features Contributed to Project"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d\u003d\u003d\u003d Major enhancement: added `tab game`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "** [red]#*_What_* -# The game feature is a simple typing game where users score points whenever a word, such as"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " `fire`, `something`, is correctly typed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "** [red]#*_Why_* -# The game feature is a utility feature that allows the user to practice and exercise their typing skill,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "which is an essential skill for secretaries and receptionists. The game-like environment uses a points system and has the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "advantage of keeping users incentivized, entertained and motivated to improve their skills."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "** [red]#*_Highlights_* -#"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "*** This enhancement can be triggered using the `Start` button following `tab game` command."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "This enhancement works with existing as well as future commands."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "In-depth analysis of design alternatives was necessary to..."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "The implementation was also challenging because…"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d\u003d\u003d Other Contributions"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "** [teal]#*Project Management*#"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "*** [red]#*Managing Issue Tracker*#"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "**** The following https://github.com/AY1920S1-CS2103T-F14-3/main/issues?utf8\u003d%E2%9C%93\u0026q\u003dis%3Aissue+author%3Ajun-ha0+is%3Aclosed+[issues link]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "displays the issue trackers I managed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "*** [red]#*Managing milestones*#"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "**** The following https://github.com/AY1920S1-CS2103T-F14-3/main/milestones?state\u003dclosed[milestone link] displays the milestones I managed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d\u003d\u003d\u003d Community"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "*** [teal]#*PR Reviews:*#"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "**** The following https://github.com/AY1920S1-CS2103T-F14-3/main/pulls?utf8\u003d%E2%9C%93\u0026q\u003dis%3Apr+reviewed-by%3Ajun-ha0+is%3Aclosed+[PR link]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "displays the Pull Requests I reviewed."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003d\u003d\u003d Code contributed"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "**** The following https://nus-cs2103-ay1920s1.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2019-09-06\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003djun-ha0\u0026tabRepo\u003dAY1920S1-CS2103T-F14-3%2Fmain%5Bmaster%5D[reposense link]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "displays my code contribution."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "{ to be continued }"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 106
    }
  },
  {
    "path": "src/main/java/com/typee/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 4,
      "-": 61
    }
  },
  {
    "path": "src/main/java/com/typee/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/com/typee/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.Version;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.LogicManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.EngagementList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.storage.EngagementListStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.storage.JsonEngagementListStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.storage.JsonTypeeStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.storage.TypeeStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.ui.UiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Typee ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementListStorage engagementListStorage \u003d new JsonEngagementListStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        initTabMenus(config.getTabMenuFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        TypeeStorage typeeStorage \u003d new JsonTypeeStorage(config.getTabMenuFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        storage \u003d new StorageManager(engagementListStorage, userPrefsStorage, typeeStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s engagement manager and {@code userPrefs}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * \u003cbr\u003e The data from the sample Typee application will be used instead if {@code storage}\u0027s engagement"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * manager is not found, or an empty engagement manager will be used instead if errors occur when reading"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * {@code storage}\u0027s engagement manager."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Optional\u003cReadOnlyEngagementList\u003e engagementListOptional;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ReadOnlyEngagementList initialData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            engagementListOptional \u003d storage.readEngagementList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            if (!engagementListOptional.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample engagement manager\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            initialData \u003d engagementListOptional.orElseGet(SampleDataUtil::getSampleEngagementList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty engagement manager\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            initialData \u003d new EngagementList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty engagement manager\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            initialData \u003d new EngagementList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * Prepares the tabMenus.json file in resource/ by copying the file outside specified path."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * @param tabMenuFilePath"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    protected void initTabMenus(Path tabMenuFilePath) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            Files.copy(getClass().getClassLoader().getResourceAsStream(\"tabMenus.json\"), tabMenuFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            logger.warning(e.getMessage());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty engagement list\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        logger.info(\"Starting Typee \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Typee ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 8,
      "nordic96": 37,
      "lyskevin": 17,
      "-": 143
    }
  },
  {
    "path": "src/main/java/com/typee/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private Path tabMenuFilePath \u003d Paths.get(\"tabMenus.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getTabMenuFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return tabMenuFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/com/typee/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 700;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 840;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/com/typee/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/com/typee/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_INVALID_ENGAGEMENT_DISPLAYED_INDEX \u003d \"The engagement index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_ENGAGEMENT_LISTED_OVERVIEW \u003d \"%1$d engagements listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "brebeek": 2,
      "-": 10
    }
  },
  {
    "path": "src/main/java/com/typee/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/com/typee/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/com/typee/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/com/typee/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/com/typee/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/java/com/typee/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/com/typee/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/com/typee/commons/util/DateUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * A container for date specific utility functions"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class DateUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns a formatted date string based on the specified date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @param date The specified date."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @return A formatted date string."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static String getFormattedDateString(LocalDate date) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        String dayString \u003d String.format(\"%02d\", date.getDayOfMonth());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        String monthString \u003d String.format(\"%02d\", date.getMonthValue());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        String yearString \u003d String.format(\"%04d\", date.getYear());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return String.format(\"%s/%s/%s\", dayString, monthString, yearString);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 25
    }
  },
  {
    "path": "src/main/java/com/typee/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Properties;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DOCUMENT_PROPERTIES_FILE_NAME \u003d \"document_template.properties\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(FileUtil.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads properties from resource/."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Properties loadProperties() throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String resourceName \u003d \"document_template.properties\"; // could also be a constant"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        ClassLoader loader \u003d Thread.currentThread().getContextClassLoader();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Properties props \u003d new Properties();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try (InputStream resourceStream \u003d loader.getResourceAsStream(resourceName)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            props.load(resourceStream);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return props;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 102
    }
  },
  {
    "path": "src/main/java/com/typee/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.type.CollectionType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.type.SimpleType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the deserialized the Json object or {@code Optional.empty()} to a list of specified object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param listClassReference Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not as expected."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cList\u003cT\u003e\u003e readJsonFileIntoList(Path filePath, Class\u003cT\u003e listClassReference)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cT\u003e jsonFile;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d objectMapper.readValue(FileUtil.readFromFile(filePath),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                    CollectionType.construct(List.class, SimpleType.construct(listClassReference)));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 3,
      "-": 162
    }
  },
  {
    "path": "src/main/java/com/typee/commons/util/PdfUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Properties;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.apache.commons.io.FilenameUtils;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.itextpdf.text.BaseColor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.itextpdf.text.Document;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.itextpdf.text.DocumentException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import com.itextpdf.text.Element;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import com.itextpdf.text.Font;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import com.itextpdf.text.FontFactory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import com.itextpdf.text.Image;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import com.itextpdf.text.List;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import com.itextpdf.text.ListItem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import com.itextpdf.text.Paragraph;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import com.itextpdf.text.pdf.PdfPCell;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import com.itextpdf.text.pdf.PdfPTable;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import com.itextpdf.text.pdf.PdfWriter;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.logic.commands.exceptions.DeleteDocumentException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.engagement.Appointment;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.model.engagement.AttendeeList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.engagement.Interview;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.model.engagement.Location;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.engagement.Meeting;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.model.engagement.TimeSlot;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.model.person.Person;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.model.report.Report;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * Generates report of engagement with a specified template."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nordic96"
        },
        "content": " * @@author nordic96"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nordic96"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nordic96"
        },
        "content": "public class PdfUtil {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public static final String FOLDER_PATH \u003d \"reports/\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private static Properties docProp;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PdfUtil.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private static final DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd-MM-YY_HH-mm\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * Generates a {@code Report} in .pdf format and opens the file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public static Path generateReport(Path fileDir, Report report) throws DocumentException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        docProp \u003d FileUtil.loadProperties();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Engagement engagement \u003d report.getEngagement();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        String fileName \u003d fileDir.toString() + \"/\" + generateFileName(report.getTo().getName().fullName,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                report.getFrom().getName().fullName,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                engagement.getTimeSlot().getStartTime(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                engagement.getDescription());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        report.setFilePath(Paths.get(fileName));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Document document \u003d initDoc(fileName, engagement, report.getTo());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        TimeSlot timeSlot \u003d engagement.getTimeSlot();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        document \u003d addIntroductionPar(document, engagement);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        document.add(createAttendeesTable(engagement.getDescription(), engagement.getLocation(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                engagement.getAttendees(), timeSlot.getStartTime(), timeSlot.getEndTime()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        addConclusion(document, report.getFrom());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        document.close();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        logger.info(\"Document: \" + fileName + \" generated\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        return Paths.get(fileName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * Checks if document is already being generated (not implemented yet)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public static boolean checkIfDocumentExists(Path dirPath, String to,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                                                String from, LocalDateTime start, String desc) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        String fileName \u003d generateFileName(to, from, start, desc);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        if (Files.notExists(dirPath)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            dirPath.toFile().mkdir();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        File[] files \u003d dirPath.toFile().listFiles();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        boolean isExisting \u003d Stream.of(files)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                .map(file -\u003e file.getName())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                .filter(f -\u003e FilenameUtils.getExtension(f).equals(\"pdf\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                        \u0026\u0026 f.equals(fileName))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                .count() \u003d\u003d 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        logger.info(\"Check if document exists: \" + fileName + \": \" + isExisting);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        return isExisting;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * Opens a document that only accepts pdf format."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public static boolean openDocument(Path documentPath) throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        if (FilenameUtils.getExtension(documentPath.toFile().getName()).equals(\"pdf\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            Desktop.getDesktop().open(documentPath.toFile());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * Deletes the document of a give file name in the directory."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public static boolean deleteDocument(Path dirPath, String to, String from, LocalDateTime start, String desc)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            throws DeleteDocumentException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        String fileName \u003d generateFileName(to, from, start, desc);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        logger.info(fileName);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        if (Files.notExists(dirPath)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            dirPath.toFile().mkdir();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        File[] files \u003d dirPath.toFile().listFiles();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Optional\u003cFile\u003e fileToDelete \u003d Optional.empty();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        for (File f: files) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            if (f.getName().equals(fileName)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                fileToDelete \u003d Optional.of(f);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        if (!fileToDelete.isEmpty()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            return fileToDelete.get().delete();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        throw new DeleteDocumentException();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * Initialise and instantiates the {@code PdfWriter}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private static Document initDoc(String fileName, Engagement engagement, Person to) throws IOException,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            DocumentException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        logger.info(fileName);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Document doc \u003d new Document();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        if (Files.notExists(Paths.get(FOLDER_PATH))) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            Paths.get(FOLDER_PATH).toFile().mkdir();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            PdfWriter.getInstance(doc, new FileOutputStream(fileName));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        } catch (DocumentException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            logger.info(e.getMessage());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        doc.open();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Font font \u003d FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, BaseColor.BLACK);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        addCompanyLogo(doc);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Paragraph par \u003d new Paragraph(docProp.getProperty(\"document.header\") + \" \" + to + \",\", font);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        par.setSpacingBefore(50);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        par.setSpacingAfter(28);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        doc.add(par);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        return doc;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * Adds a company logo image in the beginning of the document"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private static void addCompanyLogo(Document doc) throws IOException, DocumentException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Image logo \u003d Image.getInstance(PdfUtil.class.getClassLoader()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                .getResource(\"images/company_logo_sample.png\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        logo.scaleToFit(250, 100);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        logo.setAlignment(Element.ALIGN_LEFT);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Paragraph par \u003d new Paragraph();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        par.add(logo);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        doc.add(logo);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * Adds the conclusion and footer paragraph of the document."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private static void addConclusion(Document doc, Person from) throws DocumentException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Paragraph par \u003d new Paragraph(docProp.getProperty(\"document.conclusion\") + \"\\n\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                + from + \"\\n\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                + docProp.getProperty(\"document.sender.profile\") + \"\\n\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                + docProp.getProperty(\"document.sender.contact\") + \"\\n\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                + docProp.getProperty(\"document.company.address\") + \"\\n\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                + docProp.getProperty(\"document.company.name\"));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        par.setSpacingBefore(70);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        par.setSpacingAfter(30);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        doc.add(par);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        doc.add(new Paragraph(docProp.getProperty(\"document.footer\")));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * Adds first introduction paragraph of the document."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private static Document addIntroductionPar(Document doc, Engagement engagement) throws DocumentException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        String introduction \u003d \"\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        if (engagement instanceof Appointment) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            introduction \u003d docProp.getProperty(\"appointment.introduction\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        } else if (engagement instanceof Interview) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            introduction \u003d docProp.getProperty(\"interview.introduction\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        } else if (engagement instanceof Meeting) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            introduction \u003d docProp.getProperty(\"meeting.introduction\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Paragraph par \u003d new Paragraph(introduction);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        par.setSpacingAfter(10);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        doc.add(par);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        return doc;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * Returns a {@code PdfPTable} for Engagement Information"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private static Paragraph createAttendeesTable(String desc, Location venue,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                                                  AttendeeList attendeeList,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                                                  LocalDateTime startTime, LocalDateTime endTime) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        PdfPTable table \u003d new PdfPTable(2);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        table.getDefaultCell().setPadding(10);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        PdfPCell cell1 \u003d new PdfPCell(new Paragraph(\"Engagement Description:\"));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        PdfPCell cellDesc \u003d new PdfPCell(new Paragraph(desc));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        PdfPCell cell2 \u003d new PdfPCell(new Paragraph(\"Venue:\"));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        PdfPCell cellVenue \u003d new PdfPCell(new Paragraph(venue.toString()));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        PdfPCell cell3 \u003d new PdfPCell(new Paragraph(\"Time:\"));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        PdfPCell cellTime \u003d new PdfPCell(new Paragraph(startTime.format(dateFormat)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                + \" - \" + endTime.format(dateFormat)));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        PdfPCell cell4 \u003d new PdfPCell(new Paragraph(\"Attendees\"));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        table.addCell(cell1);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        table.addCell(cellDesc);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        table.addCell(cell2);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        table.addCell(cellVenue);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        table.addCell(cell3);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        table.addCell(cellTime);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        table.addCell(cell4);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        PdfPCell cellAttendees \u003d new PdfPCell();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        List orderedAttendeesList \u003d new List();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        for (Person person : attendeeList.getAttendees()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            orderedAttendeesList.add(new ListItem(person.getName().fullName));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        cellAttendees.addElement(orderedAttendeesList);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        table.addCell(cellAttendees);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Paragraph par \u003d new Paragraph();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        par.setSpacingBefore(10);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        par.add(table);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        return par;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * Returns a {@code String} of report file name with date followed by description."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private static String generateFileName(String to, String from, LocalDateTime start, String desc) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        String startTime \u003d start.format(dateFormat);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        return to + \"_\" + from + \"_\" + startTime + \"_\" + desc.split(\" \")[0] + \".pdf\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 220,
      "-": 42
    }
  },
  {
    "path": "src/main/java/com/typee/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/com/typee/game/Player.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package com.typee.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import static com.typee.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.beans.property.SimpleDoubleProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Player of the typing game"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class Player {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Player.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final int DEFAULT_SCORE_VALUE \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final int DEFAULT_HEALTH_VALUE \u003d 100;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final int DEFAULT_HEALTH_PROPERTY_VALUE \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private int score;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private int health;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private SimpleIntegerProperty scoreProperty \u003d new SimpleIntegerProperty(this, \"score\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private SimpleDoubleProperty healthProperty \u003d new SimpleDoubleProperty(this, \"health\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private SimpleBooleanProperty isGameOver \u003d new SimpleBooleanProperty();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private StringProperty inputTextProperty;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public Player(int score, int health, SimpleIntegerProperty scoreProperty, SimpleDoubleProperty healthProperty,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                  SimpleBooleanProperty isGameOver, StringProperty inputTextProperty) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.health \u003d health;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.scoreProperty \u003d scoreProperty;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.healthProperty \u003d healthProperty;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.isGameOver \u003d isGameOver;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.inputTextProperty \u003d inputTextProperty;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public Player() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        score \u003d DEFAULT_SCORE_VALUE;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        scoreProperty.setValue(score);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        health \u003d DEFAULT_HEALTH_VALUE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        healthProperty.set(DEFAULT_HEALTH_PROPERTY_VALUE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        isGameOver.set(false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Sets the player\u0027s input text as {@code inputTextProperty}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param inputTextProperty The text property associated with the player."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public Player setInputAs(StringProperty inputTextProperty) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        requireNonNull(inputTextProperty);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.inputTextProperty \u003d inputTextProperty;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Sets the player\u0027s input text as {@code inputText}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param inputText The text property associated with the player."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public Player setInputTextAs(String inputText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        requireNonNull(inputText);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.inputTextProperty.set(inputText);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Returns input text by player."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public String getInputText() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return inputTextProperty.get().strip();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Increases this player\u0027s score by {@code score} if the game is not over."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public Player incrementScore(int score) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        requireNonNull(score);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        checkArgument(score \u003e\u003d 0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (isGameOver.get()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.score +\u003d score;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        scoreProperty.setValue(this.score);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        logger.info(\"score incremented by \" + score + \" to \" + this.score);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Decreases this player\u0027s health by {@code health} if the game is not over."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public Player decrementHealth(int health) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        requireNonNull(health);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (isGameOver.get()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (this.health - health \u003c\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            isGameOver.set(true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            this.health \u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            healthProperty.set(0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.health -\u003d health;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        healthProperty.set((double) this.health / DEFAULT_HEALTH_VALUE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        logger.info(\"health decremented by \" + health + \" to \" + this.health);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public int getScore() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public int getHealth() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return health;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public SimpleIntegerProperty getScoreProperty() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return scoreProperty;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public SimpleDoubleProperty getHealthProperty() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return healthProperty;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public SimpleBooleanProperty getGameOverProperty() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return isGameOver;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public StringProperty getInputTextProperty() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return inputTextProperty;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Returns true if both players of the same score and health."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * This defines a weaker notion of equality between two players."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public boolean isSamePlayer(Player otherPlayer) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (otherPlayer \u003d\u003d this) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return otherPlayer !\u003d null"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                \u0026\u0026 otherPlayer.getScore() \u003d\u003d (this.getScore())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                \u0026\u0026 otherPlayer.getHealth() \u003d\u003d (this.getHealth());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Returns true if both players have the same score and health."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * This defines a stronger notion of equality between two players."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (!(other instanceof Player)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        Player otherPlayer \u003d (Player) other;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return otherPlayer.getScore() \u003d\u003d (this.getScore())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                \u0026\u0026 otherPlayer.getHealth() \u003d\u003d (this.getHealth());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return Objects.hash(score, health);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 174
    }
  },
  {
    "path": "src/main/java/com/typee/game/Words.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package com.typee.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import static com.typee.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Words being used in typing game."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class Words {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final int SIZE \u003d 83;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Words.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final String[] words \u003d {\"get\", \"time\", \"come\", \"men\", \"have\", \"his\", \"show\", \"high\", \"learn\", \"kind\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                                           \"number\", \"me\", \"small\", \"red\", \"very\", \"land\", \"small\", \"below\", \"form\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                                           \"said\", \"why\", \"seem\", \"white\", \"really\", \"than\", \"run\", \"fire\", \"over\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                                           \"can\", \"at\", \"follow\", \"too\", \"its\", \"example\", \"of\", \"me\", \"mile\", \"also\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                                           \"was\", \"set\", \"at\", \"oil\", \"grow\", \"need\", \"call\", \"no\", \"said\", \"hard\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                                           \"almost\", \"house\", \"idea\", \"form\", \"just\", \"something\", \"help\", \"every\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                                           \"again\", \"in\", \"the\", \"earth\", \"one\", \"came\", \"up\", \"very\", \"people\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                                           \"other\", \"alert\", \"area\", \"should\", \"hello\", \"fix\", \"rice\", \"type\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                                           \"chicken\", \"there\", \"and\", \"back\", \"ring\", \"blink\", \"grass\", \"fly\", \"sprint\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                                           \"attack\"};"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Returns the word in the array given the {@code index}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param index The index of the word in the array"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static String get(int index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        String word \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        checkArgument(index \u003e\u003d 0 \u0026\u0026 index \u003c Words.SIZE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        word \u003d words[index];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return word;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 40
    }
  },
  {
    "path": "src/main/java/com/typee/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.ui.Tab;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns the engagement list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @see Model#getEngagementList()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    ReadOnlyEngagementList getEngagementList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of engagements */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    ObservableList\u003cEngagement\u003e getFilteredEngagementList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    /** Returns an unmodifiable view of the sorted list of engagements */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    ObservableList\u003cEngagement\u003e getSortedEngagementList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of tabs in Typee */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cTab\u003e getTabList() throws DataConversionException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns the user prefs\u0027 engagement list file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    Path getEngagementListFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 7,
      "nordic96": 5,
      "brebeek": 3,
      "lyskevin": 6,
      "-": 39
    }
  },
  {
    "path": "src/main/java/com/typee/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.InteractiveParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.ui.Tab;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final InteractiveParser interactiveParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        interactiveParser \u003d new Parser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        interactiveParser.parseInput(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        commandResult \u003d interactiveParser.fetchResult();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (interactiveParser.hasParsedCommand()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            commandResult \u003d interactiveParser.makeCommand().execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            storage.saveEngagementList(model.getEngagementList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public ReadOnlyEngagementList getEngagementList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return model.getEngagementList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public ObservableList\u003cEngagement\u003e getFilteredEngagementList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return model.getFilteredEngagementList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public ObservableList\u003cEngagement\u003e getSortedEngagementList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return model.getSortedEngagementList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTab\u003e getTabList() throws DataConversionException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getTabList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Path getEngagementListFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return model.getEngagementListFilePath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 18,
      "nordic96": 7,
      "brebeek": 5,
      "lyskevin": 6,
      "-": 58
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ATTENDEES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ENGAGEMENT_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Adds an engagement to the engagement list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an engagement to the engagement list. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_ENGAGEMENT_TYPE + \"ENGAGEMENT_TYPE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_START_TIME + \"START TIME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_END_TIME + \"END TIME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_LOCATION + \"LOCATION \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_ATTENDEES + \"ATTENDEES \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_ENGAGEMENT_TYPE + \"Meeting \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_START_TIME + \"18/10/2019/1500 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_END_TIME + \"18/10/2019/1800 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_LOCATION + \"COM-2-B1-03 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_ATTENDEES + \"John, Elijah, Sam \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_DESCRIPTION + \"CS2103T Discussion \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + PREFIX_PRIORITY + \"High\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New engagement added: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENGAGEMENT \u003d \"This engagement clashes with an already existing one\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final Engagement toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Engagement}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public AddCommand(Engagement engagement) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(engagement);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        toAdd \u003d engagement;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (model.hasEngagement(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ENGAGEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (isConflicting(model)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ENGAGEMENT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.addEngagement(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.saveEngagementList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        model.updateSortedEngagementList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isConflicting(Model model) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        ReadOnlyEngagementList readOnlyEngagementList \u003d model.getEngagementList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return readOnlyEngagementList.isConflictingEngagement(toAdd);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 42,
      "nordic96": 4,
      "brebeek": 3,
      "lyskevin": 2,
      "-": 34
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/CalendarCloseDisplayCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.util.DateUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Closes the engagements list for a particular date in the calendar window."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class CalendarCloseDisplayCommand extends CalendarCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"closedisplay\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Closing display for \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String INVALID_COMMAND_FORMAT \u003d \"Invalid calendar close display command format.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            + \"Usage: calendar opendisplay DD/MM/YYYY\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public CalendarCloseDisplayCommand(LocalDate date) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        String formattedDateString \u003d DateUtil.getFormattedDateString(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + formattedDateString, true, date, COMMAND_WORD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } else if (!(other instanceof CalendarCloseDisplayCommand)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            CalendarCloseDisplayCommand otherCalendarCloseDisplayCommand \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    (CalendarCloseDisplayCommand) other;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return this.date.equals(otherCalendarCloseDisplayCommand.date);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 46
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/CalendarCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Represents a command which interacts with the calendar window."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public abstract class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            + \": Performs the specified operation to the calendar window.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            + \"Parameters: OPERATION OPERATION_ARGUMENTS\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            + \"Open display example: \" + COMMAND_WORD + \" opendisplay 10/11/2019\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            + \"Next month example: \" + COMMAND_WORD + \" nextmonth\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            + \"Previous month example: \" + COMMAND_WORD + \" previousmonth\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 16
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/CalendarNextMonthCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Changes the calendar window\u0027s display to the next month."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class CalendarNextMonthCommand extends CalendarCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"nextmonth\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Changing calendar window display to the next month.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String INVALID_COMMAND_FORMAT \u003d \"Invalid calendar next month command format.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            + \"Usage: calendar nextmonth\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, true, COMMAND_WORD);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return other instanceof CalendarNextMonthCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 29
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/CalendarOpenDisplayCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.util.DateUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Displays the engagements list for a particular date in the calendar window."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class CalendarOpenDisplayCommand extends CalendarCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"opendisplay\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Displaying engagements for \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String INVALID_COMMAND_FORMAT \u003d \"Invalid calendar open display command format.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            + \"Usage: calendar opendisplay DD/MM/YYYY\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public CalendarOpenDisplayCommand(LocalDate date) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        String formattedDateString \u003d DateUtil.getFormattedDateString(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + formattedDateString, true, date, COMMAND_WORD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } else if (!(other instanceof CalendarOpenDisplayCommand)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            CalendarOpenDisplayCommand otherCalendarOpenDisplayCommand \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    (CalendarOpenDisplayCommand) other;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return this.date.equals(otherCalendarOpenDisplayCommand.date);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 46
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/CalendarPreviousMonthCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Changes the calendar window\u0027s display to the previous month."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class CalendarPreviousMonthCommand extends CalendarCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"previousmonth\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Changing calendar window display to the previous month.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String INVALID_COMMAND_FORMAT \u003d \"Invalid calendar previous month command format.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            + \"Usage: calendar previousmonth\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, true, COMMAND_WORD);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return other instanceof CalendarPreviousMonthCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 29
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.EngagementList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Clears the engagement list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Engagement list has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        model.setHistoryManager(new EngagementList());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.saveEngagementList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return other instanceof ClearCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 1,
      "nordic96": 2,
      "brebeek": 4,
      "lyskevin": 10,
      "-": 16
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.ui.Tab;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should switch tab menu. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean tabCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /* The application should interact with the calendar window. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private final boolean calendarCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean pdfCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Tab tab;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private final LocalDate calendarDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private final String calendarCommandType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Path docPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tabCommand \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.pdfCommand \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tab \u003d new Tab(\"main\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.calendarCommand \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.calendarDate \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.calendarCommandType \u003d \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.docPath \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} specified for tab command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean tabCommand, Tab tab) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tabCommand \u003d tabCommand;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tab \u003d tab;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.calendarCommand \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.pdfCommand \u003d false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.calendarDate \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.calendarCommandType \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.docPath \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Constructs a {@code CommandResult} for a calendar command with the specified fields."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean calendarCommand, LocalDate calendarDate,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                         String calendarCommandType) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.tabCommand \u003d false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.pdfCommand \u003d false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.tab \u003d new Tab(\"calendar\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.calendarCommand \u003d calendarCommand;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.calendarDate \u003d calendarDate;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.calendarCommandType \u003d calendarCommandType;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.docPath \u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Constructs a {@code CommandResult} for a calendar command with the specified fields,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * excluding the date field."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean calendarCommand, String calendarCommandType) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.tabCommand \u003d false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        this.pdfCommand \u003d false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.tab \u003d new Tab(\"calendar\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.calendarCommand \u003d calendarCommand;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.calendarDate \u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.calendarCommandType \u003d calendarCommandType;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        this.docPath \u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean pdfCommand, Path docPath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tabCommand \u003d false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tab \u003d new Tab(\"report\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        this.calendarCommand \u003d false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        this.calendarDate \u003d null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        this.calendarCommandType \u003d \"\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        this.pdfCommand \u003d pdfCommand;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        this.docPath \u003d docPath;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isTabCommand() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return tabCommand;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tab getTab() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return tab;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public boolean isCalendarCommand() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return calendarCommand;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isPdfCommand() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return pdfCommand;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public LocalDate getCalendarDate() throws CommandException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        if (!calendarCommand) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            throw new CommandException(\"Cannot get calendar date from a non-calendar command result\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return calendarDate;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public String getCalendarCommandType() throws CommandException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        if (!calendarCommand) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            throw new CommandException(\"Cannot get calendar command type from a non-calendar command result\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return calendarCommandType;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getDocPath() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return docPath;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "lyskevin": 63,
      "-": 132
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/CurrentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Reveals information about the parser\u0027s current state to the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class CurrentCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final String currentMessage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public CurrentCommand(String currentMessage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.currentMessage \u003d currentMessage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new CommandResult(currentMessage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return other instanceof CurrentCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 21,
      "brebeek": 9
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the engagement list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            + \": Deletes the engagement identified by the index number used in the displayed engagement list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_DELETE_ENGAGEMENT_SUCCESS \u003d \"Deleted engagement: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        List\u003cEngagement\u003e lastShownList \u003d model.getFilteredEngagementList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ENGAGEMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Engagement engagementToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.deleteEngagement(engagementToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.saveEngagementList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return new CommandResult(String.format(DeleteCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                .MESSAGE_DELETE_ENGAGEMENT_SUCCESS, engagementToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 5,
      "nordic96": 5,
      "brebeek": 7,
      "-": 39
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Edits the details of an existing engagement in the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the engagement identified \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            + \"by the index number used in the displayed engagement list. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \"[\" + \"NAME] \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_EDIT_ENGAGEMENT_SUCCESS \u003d \"Edited engagement: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENGAGEMENT \u003d \"This engagement already exists in the list.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final EditEngagementDescriptor editEngagementDescriptor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * @param index of the engagement in the filtered engagement list to edit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * @param editPersonDescriptor details to edit the engagement with"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public EditCommand(Index index, EditEngagementDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.editEngagementDescriptor \u003d new EditEngagementDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        List\u003cEngagement\u003e lastShownList \u003d model.getFilteredEngagementList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ENGAGEMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Engagement engagementToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Engagement editedEngagement \u003d createEditedEngagement(engagementToEdit, editEngagementDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!engagementToEdit.isConflictingWith(editedEngagement) \u0026\u0026 model.hasEngagement(editedEngagement)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ENGAGEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.setEngagement(engagementToEdit, editedEngagement);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.updateFilteredEngagementList(Model.PREDICATE_SHOW_ALL_ENGAGEMENTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.saveEngagementList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        model.updateSortedEngagementList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ENGAGEMENT_SUCCESS, editedEngagement));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * Creates and returns a {@code Engagement} with the details of {@code engagementToEdit}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * edited with {@code editEngagementDescriptor}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static Engagement createEditedEngagement(Engagement engagementToEdit,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                                     EditEngagementDescriptor editEngagementDescriptor) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assert engagementToEdit !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        //Name updatedName \u003d editEngagementDescriptor.getName().orElse(engagementToEdit.getName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        //return new Person(updatedName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return engagementToEdit;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \u0026\u0026 editEngagementDescriptor.equals(e.editEngagementDescriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * Stores the details to edit the engagement with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static class EditEngagementDescriptor {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        public EditEngagementDescriptor() {}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        public EditEngagementDescriptor(EditEngagementDescriptor toCopy) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            if (!(other instanceof EditEngagementDescriptor)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            EditEngagementDescriptor e \u003d (EditEngagementDescriptor) other;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return getName().equals(e.getName());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 2,
      "uggi121": 26,
      "nordic96": 8,
      "brebeek": 15,
      "-": 101
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Typee as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return other instanceof ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "brebeek": 9,
      "-": 16
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.model.engagement.EngagementPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Finds and lists all engagements in engagement list whose description contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all engagements whose descriptions contain any \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            + \"of the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" interview\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private final EngagementPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public FindCommand(EngagementPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        model.updateFilteredEngagementList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                String.format(Messages.MESSAGE_ENGAGEMENT_LISTED_OVERVIEW, model.getFilteredEngagementList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 3,
      "nordic96": 3,
      "brebeek": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return other instanceof HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "lyskevin": 10,
      "-": 19
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Lists all engagements in the engagement list to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all engagements\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.updateFilteredEngagementList(Model.PREDICATE_SHOW_ALL_ENGAGEMENTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return other instanceof ListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 1,
      "nordic96": 2,
      "lyskevin": 12,
      "-": 17
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Redos the last undone command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully redone!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No commands to redo!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        if (model.hasNoRedoableCommand()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.redoEngagementList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.updateFilteredEngagementList(Model.PREDICATE_SHOW_ALL_ENGAGEMENTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        model.updateSortedEngagementList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        if (!(other instanceof RedoCommand)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 2,
      "brebeek": 38
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.util.EngagementComparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Lists all engagements in the engagement list to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted all appointments\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            + \": Sorts the engagement list displayed in customised order.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            + \"Parameters: [property] + [ ascending] or [ descending]\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" start ascending\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private Comparator\u003cEngagement\u003e comparator;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public SortCommand(EngagementComparator comparator) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        model.setComparator(comparator);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        model.updateSortedEngagementList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                \u0026\u0026 comparator.equals(((SortCommand) other).comparator)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 45
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/TabCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.ui.Tab;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the tab/menu of the application window."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class TabCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tab\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" [tab name]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Switched to window: \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d new LogsCenter().getLogger(getClass());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Tab tabToSwitch;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public TabCommand(Tab tabToSwitch) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tabToSwitch \u003d tabToSwitch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + tabToSwitch.getName(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                true, tabToSwitch);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (o instanceof TabCommand) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            TabCommand newTabCommand \u003d (TabCommand) o;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            String newTabName \u003d newTabCommand.tabToSwitch.getName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return newTabName.equalsIgnoreCase(tabToSwitch.getName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 15,
      "-": 30
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Undos the last command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully undone!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No commands to undo!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        if (model.hasNoUndoableCommand()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.undoEngagementList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.updateFilteredEngagementList(Model.PREDICATE_SHOW_ALL_ENGAGEMENTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        model.updateSortedEngagementList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        if (!(other instanceof UndoCommand)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 2,
      "brebeek": 38
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "brebeek": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/exceptions/NullRedoableActionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Thrown when no previous command to redo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class NullRedoableActionException extends CommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public NullRedoableActionException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        super(\"No command to redo!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 10
    }
  },
  {
    "path": "src/main/java/com/typee/logic/commands/exceptions/NullUndoableActionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Thrown when no previous command to undo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class NullUndoableActionException extends CommandException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public NullUndoableActionException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        super(\"No command to undo!\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 10
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Removes the argument mapped to the input {@code Prefix}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param prefix Prefix to be removed from the multimap."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void clearValues(Prefix prefix) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        argMultimap.remove(prefix);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the input {@code ArgumentMultimap} is disjoint with the calling {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * If the {@code ArgumentMultimaps} have no {@code Prefixes} in common, they are considered to be disjoint."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param argumentMultimap {@code ArgumentMultimap} to check exclusivity with."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the {@code ArgumentMultimaps} are disjoint."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isDisjointWith(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        HashMap\u003cPrefix, List\u003cString\u003e\u003e copy \u003d new HashMap\u003c\u003e(argMultimap);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Set\u003cPrefix\u003e keys \u003d copy.keySet();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Set\u003cPrefix\u003e newKeys \u003d argumentMultimap.argMultimap.keySet();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        keys.retainAll(newKeys);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return keys.isEmpty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the {@code ArgumentMultimap} is empty."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if empty."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return argMultimap.isEmpty();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns true if this {@code ArgumentMultiMap} is equal to the specified object."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @param other The specified object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @return True if this {@code ArgumentMultiMap} is equal to the specified object."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } else if (!(other instanceof ArgumentMultimap)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            ArgumentMultimap otherArgumentMultiMap \u003d (ArgumentMultimap) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return this.argMultimap.equals(otherArgumentMultiMap.argMultimap);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return argMultimap.hashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 40,
      "lyskevin": 19,
      "-": 59
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final Prefix PREFIX_ENGAGEMENT_TYPE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final Prefix PREFIX_ATTENDEES \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final Prefix PREFIX_TAB \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final Prefix PREFIX_PROPERTY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final Prefix PREFIX_ORDER \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final Prefix PREFIX_CALENDAR \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final Prefix PREFIX_LIST_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final Prefix PREFIX_TO \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final Prefix PREFIX_FROM \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 24
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/InputProcessor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Processes input {@code Strings} to find prefixes and command words."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class InputProcessor {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String REGEX_PATTERN_COMMAND_WORD \u003d \"[a-zA-Z]+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String REGEX_PATTERN_PREFIX \u003d \"[a-z]/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_PREFIX \u003d \"Invalid input. You\u0027ve entered duplicate prefixes!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Extracts and returns the list of prefixes in the user entered input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the prefixes in their order of appearance."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param commandText User entered input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return array of prefixes in their order of appearance."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws ParseException If prefixes are duplicated."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix[] extractPrefixes(String commandText) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(\"[a-zA-z]/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(commandText);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e prefixes \u003d getMatches(matcher);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowDuplicatePrefixes(prefixes);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Convert to an array to allow the values to be processed by varargs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return prefixes.toArray(Prefix[]::new);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the list of prefixes matched by the input regular expression {@code Matcher}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param matcher {@code Matcher} containing a text input and a regular expression {@code Prefix} format to match."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return list of matched prefixes."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private List\u003cPrefix\u003e getMatches(Matcher matcher) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e prefixes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        while (matcher.find()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            prefixes.add(new Prefix(matcher.group()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return prefixes;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks the input list of prefixes to ensure that no duplicates are present."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param prefixes List of prefixes."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws ParseException If duplicates are present."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void disallowDuplicatePrefixes(List\u003cPrefix\u003e prefixes) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        HashSet\u003cPrefix\u003e setOfPrefixes \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        setOfPrefixes.addAll(prefixes);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (setOfPrefixes.size() \u003c prefixes.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new ParseException(MESSAGE_DUPLICATE_PREFIX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the command word contained in a text input."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param commandText User entered input."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return command word."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws ParseException If there is no unique command word in the text input."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getCommandWord(String commandText) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String trimmedCommandText \u003d commandText.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e commandWords \u003d getAllCommandWords(trimmedCommandText);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // If there is no unique command word, throw an exception."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (commandWords.size() !\u003d 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return commandWords.get(0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the list of command words present in a {@code String}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param trimmedCommandText Trimmed text input."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return list of command words."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private List\u003cString\u003e getAllCommandWords(String trimmedCommandText) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        int boundary \u003d findBoundary(trimmedCommandText);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(REGEX_PATTERN_COMMAND_WORD);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(trimmedCommandText.substring(0, boundary));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e commandWords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        while (matcher.find()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            commandWords.add(matcher.group());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return commandWords;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Finds and returns the index of the first {@code Prefix} that appears in the input {@code String}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the length of the {@code String} if no {@code Prefix} is present."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param trimmedCommandText Trimmed text input."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return index of the first {@code Prefix}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private int findBoundary(String trimmedCommandText) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(REGEX_PATTERN_PREFIX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(trimmedCommandText);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        boolean prefixExists \u003d matcher.find();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (prefixExists) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return matcher.start();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return trimmedCommandText.length();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 120
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/InteractiveParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a parser that interacts with the user to sequentially build a {@code Command}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * The interactive parser is an implementation of an abstract machine, namely the finite state automaton. Each"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * {@code Command}\u0027s parser is a finite state machine (FSM). The accepting state of the FSM is the final stage"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * from which a {@code Command} can be built."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public interface InteractiveParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Parses the input entered by the user and updates the parser\u0027s state."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param commandText Input entered by the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws ParseException If the input is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void parseInput(String commandText) throws ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Fetches the result of executing the user input. Returns the message in"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * a {@code CommandResult} object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return result of execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    CommandResult fetchResult();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the parser has parsed all the necessary arguments of the {@code Command} being built."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the command can be built."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    boolean hasParsedCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Builds and returns the {@code Command} that is available after parsing."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return {@code Command} entered by the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws ParseException If the {@code Command} has invalid arguments."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    Command makeCommand() throws ParseException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 46
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/InteractiveParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.AttendeeList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.EngagementType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.util.EngagementComparator;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * The methods should be invoked only after input validation, unless specified otherwise."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class InteractiveParserUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String FORMAT_DATE_TIME \u003d \"dd/MM/uuuu/HHmm\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_YEAR_ZERO \u003d \"The year zero is not allowed!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Parses a {@code String name} into a {@code Name} in a deterministic manner."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns null if the name is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * This method should ONLY be used with streams to avoid exception handling."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param name name of the {@code Person}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return a {@code Name} object representing the name."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static Name parseNameDeterministic(String name) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return parseName(name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Parses a {@code String engagementType} representing the type of an engagement."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the corresponding {@code EngagementType}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param engagementType {@code String} representing the type of engagement."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return corresponding {@code EngagementType}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static EngagementType parseType(String engagementType) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(engagementType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String trimmedType \u003d engagementType.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return EngagementType.of(trimmedType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Parses a {@code String location} and returns a {@code Location} object representing it."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param location location."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return a corresponding {@code Location} object."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static Location parseLocation(String location) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new Location(location);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Parses a {@code String priority} and returns the corresponding {@code Priority}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param priority {@code String} representing priority."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the corresponding {@code Priority}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static Priority parsePriority(String priority) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String trimmedString \u003d priority.trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Priority parsedPriority;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (trimmedString.isBlank()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            parsedPriority \u003d Priority.NONE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            parsedPriority \u003d Priority.of(trimmedString);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return parsedPriority;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Parses a {@code String order} and returns a {@code EngagementComparator}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param order the sorting order."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the PersonPropertyComparator representing the comparator for that property."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws ParseException if the given {@code personProperty} is invalid."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static EngagementComparator parseComparator(String order) throws ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return EngagementComparator.getComparator(order);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new ParseException(EngagementComparator.MESSAGE_PROPERTY_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Parses the {@code String time} input by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns a {@code LocalDateTime} object representing the time."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param time time."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return a {@code LocalDateTime} object."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static LocalDateTime parseTime(String time) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDateTime localDateTime \u003d convertStringToDateTime(time);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return localDateTime;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Converts a {@code String} to its corresponding {@code LocalDateTime} object."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param time time."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the corresponding {@code LocalDateTime} object."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static LocalDateTime convertStringToDateTime(String time) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy/HHmm\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return LocalDateTime.parse(time, formatter);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Validates and returns the description of an engagement."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param description Description of an engagement."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the description if its valid."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static String parseDescription(String description) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Parses a {@code String} representing a list of attendees into an {@code AttendeeList}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param attendees String representing list of attendees."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return corresponding {@code AttendeeList}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static AttendeeList parseAttendees(String attendees) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPerson\u003e attendeesList \u003d Arrays.stream(attendees.split(\"\\\\|\"))"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .map(String::trim)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .map(name -\u003e new Person(InteractiveParserUtil.parseNameDeterministic(name)))"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .filter(Objects::nonNull)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new AttendeeList(attendeesList);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the entered {@code String} represents a valid date-time."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param dateTime {@code String} that represents a date-time."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if valid."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static boolean isValidDateTime(String dateTime) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            makeDateTimeFromPattern(dateTime);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns a {@code LocalDateTime} object that represents the entered {@code String}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param dateTime {@code String} that represents a date-time value."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return {@code LocalDateTime}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws DateTimeException If the {@code String} is an invalid date-time value."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static LocalDateTime makeDateTimeFromPattern(String dateTime) throws DateTimeException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(FORMAT_DATE_TIME)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.parse(dateTime, formatter);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        int year \u003d localDateTime.getYear();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (year \u003d\u003d 0) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new DateTimeException(MESSAGE_YEAR_ZERO);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return localDateTime;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the entered strings representing start and end date-times are valid."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * The strings are valid if end time occurs after the start time."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * This method should only be called if the {@code Strings} represent valid date-time values."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param startDate {@code String} that represents the start date-time."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param endDate {@code String} that represents the end date-time."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the time-slot is valid."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static boolean isValidTimeSlot(String startDate, String endDate) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDateTime start \u003d makeDateTimeFromPattern(startDate);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDateTime end \u003d makeDateTimeFromPattern(endDate);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return start.isBefore(end);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Parses the entered {@code String} that represents a date that conforms to the entered pattern."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param date Date."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param pattern Date-pattern."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return {@code LocalDate} representing the date."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static LocalDate parseLocalDate(String date, String pattern) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(pattern).withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return localDate;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 248,
      "lyskevin": 1
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.CurrentCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.PdfCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.TabCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.EndState;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.OptionalState;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.addmachine.TypeState;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.calendarmachine.CalendarState;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.clearmachine.ClearState;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.currentmachine.CurrentState;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.deletemachine.IndexState;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.PenultimateStateTransitionException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exitmachine.ExitState;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.findmachine.FindBufferState;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.helpmachine.HelpState;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.listmachine.ListState;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.pdfmachine.PdfIndexState;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.redomachine.RedoState;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.sortmachine.PropertyState;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.tabmachine.TabState;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.undomachine.UndoState;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an implementation of {@code InteractiveParser} that keeps track of the state machine currently in"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": " *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * The commands that are parsable are further partitioned into dynamic and static commands. Dynamic commands can"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * be executed at any point of parsing, while static commands must be parsed to fruition before another static"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * command is initiated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": " *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * This partition, however, is only a {@code Parser} level implementation to handle the execution of two state"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * machines concurrently."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class Parser implements InteractiveParser {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String BUFFER_TEXT \u003d \" \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CLEAR_ARGUMENTS \u003d \"// clear\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CURRENT \u003d \"// current\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_MISSING_PREFIX \u003d \"Please input only the prefix %s and its argument.\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" You may enter additional prefixes and arguments as long as they follow the specified ordering.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_RESET \u003d \"The arguments of the previously entered command have been flushed.\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" Please enter another command to get started!\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_IDLE_STATE \u003d \"No command is being executed currently.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /** The state of the finite state machine currently being parsed. */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private State currentState;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /** Backup state to handle parsing of dynamic commands. */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private State temporaryState;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final InputProcessor inputProcessor;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructs an interactive parser."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.currentState \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.temporaryState \u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.inputProcessor \u003d new InputProcessor();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if a state machine is actively being parsed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if a command is being parsed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isActive() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return currentState !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Core Parser Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void parseInput(String commandText) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (isDynamicStatelessCommand(commandText)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            parseDynamicStatelessCommand(commandText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (isDynamicStatefulCommand(commandText)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            parseDynamicStatefulCommand(commandText);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Prefix[] arrayOfPrefixes \u003d inputProcessor.extractPrefixes(commandText);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        boolean wasActivatedNow \u003d activateStateMachineIfInactive(commandText);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        parseStaticCommand(commandText, wasActivatedNow, arrayOfPrefixes);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the command text is a dynamic command with no parameters, like \"Exit\" and \"Help\"."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param commandText User entered text."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the text corresponds to a dynamic stateless command."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isDynamicStatelessCommand(String commandText) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return isClearArgumentsCommand(commandText)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || isExitCommand(commandText)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || isHelpCommand(commandText)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || isCurrentCommand(commandText);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Parses a dynamic, stateless command, i.e. a command with no parameters."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Initializes the state machine to that of the command."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param commandText User entered command text."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws ParseException If the command isn\u0027t a dynamic, stateless command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void parseDynamicStatelessCommand(String commandText) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String trimmedNormalizedText \u003d commandText.trim().toLowerCase();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        switch (trimmedNormalizedText) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case MESSAGE_CLEAR_ARGUMENTS:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            resetParser();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case MESSAGE_CURRENT:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            initializeCurrent();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            initializeExit();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            initializeHelp();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the command text is a dynamic, stateful command, i.e. a dynamic command with parameters."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param commandText User entered command text."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the text corresponds to a dynamic, stateful command."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isDynamicStatefulCommand(String commandText) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return isTabCommand(commandText);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Further extensible."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Parses a dynamic, stateful command."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Initializes the corresponding state machine."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param commandText User entered text that represents a dynamic, stateful command."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void parseDynamicStatefulCommand(String commandText) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (isTabCommand(commandText)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            initializeTab();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Room for further extensions."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Activates the state machine to that of the command text."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if no state machine was in execution previously."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param commandText User entered command text."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if a new state machine\u0027s parsing is initiated."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws ParseException If the command text doesn\u0027t match any command."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean activateStateMachineIfInactive(String commandText) throws ParseException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        boolean activatedNow \u003d false;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!isActive()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            instantiateStateMachine(commandText);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            activatedNow \u003d true;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return activatedNow;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Instantiates a new state machine corresponding to the user entered command text."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * This method should be called only when no other state machine is in execution."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param commandText User entered input."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws ParseException If the user input doesn\u0027t match any command."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void instantiateStateMachine(String commandText) throws ParseException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String commandWord \u003d inputProcessor.getCommandWord(commandText);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            currentState \u003d new TypeState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            currentState \u003d new IndexState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            currentState \u003d new UndoState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            currentState \u003d new RedoState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case TabCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            currentState \u003d new TabState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            currentState \u003d new PropertyState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            currentState \u003d new ClearState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case PdfCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            currentState \u003d new PdfIndexState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case CalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            currentState \u003d new CalendarState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            currentState \u003d new ListState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            currentState \u003d new FindBufferState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Parses a static command entered by the user."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param commandText User entered input."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param wasActivatedNow Flag that indicates if a state machine was just instantiated."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param prefixes List of prefixes contained in the user input."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws ParseException If the input is invalid."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void parseStaticCommand(String commandText, boolean wasActivatedNow, Prefix... prefixes)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d ArgumentTokenizer.tokenize(addBufferTo(commandText.trim()), prefixes);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        clearCommandWordIfActivatedNow(wasActivatedNow, argumentMultimap);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowCommandWordIfActivatedBefore(argumentMultimap);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            while (canTransition(argumentMultimap)) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                currentState \u003d currentState.transition(argumentMultimap);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (PenultimateStateTransitionException e) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            currentState \u003d temporaryState;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Dynamic Command Checkers \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the user entered text is the current command\u0027s text."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param commandText User entered input."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the input corresponds to a {@code CurrentCommand}."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isCurrentCommand(String commandText) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return commandText.equalsIgnoreCase(MESSAGE_CURRENT);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the user entered text is the clear argument command\u0027s text."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param commandText User entered input."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the input corresponds to the clear arguments command."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isClearArgumentsCommand(String commandText) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return commandText.equalsIgnoreCase(MESSAGE_CLEAR_ARGUMENTS);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the user entered text corresponds to the {@code TabCommand}\u0027s text."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param commandText User entered input."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the input corresponds to the {@code TabCommand}."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isTabCommand(String commandText) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (commandText.isBlank()) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String[] tokens \u003d commandText.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        boolean startsWithTab \u003d tokens[0].equalsIgnoreCase(TabCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (tokens.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            boolean endsWithArgument \u003d tokens[1].matches(\"b/[a-z]+\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return startsWithTab \u0026\u0026 endsWithArgument;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (tokens.length \u003e 2) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return startsWithTab;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the user entered command is an exit command."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param commandText User entered command."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the user input corresponds to the {@code ExitCommand}."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isExitCommand(String commandText) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return commandText.trim().equalsIgnoreCase(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the user entered command is a {@code HelpCommand}."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param commandText User entered command."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the user input corresponds to the {@code HelpCommand}."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isHelpCommand(String commandText) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return commandText.trim().equalsIgnoreCase(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Dynamic Command Handlers \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Initializes the {@code TabCommand}."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void initializeTab() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        temporaryState \u003d currentState;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        currentState \u003d null;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Initializes the {@code CurrentCommand}."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void initializeCurrent() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        temporaryState \u003d currentState;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (currentState \u003d\u003d null) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            currentState \u003d new CurrentState(MESSAGE_IDLE_STATE);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        currentState \u003d new CurrentState(currentState.getStateConstraints());"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Initializes the {@code ExitCommand}."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void initializeExit() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        currentState \u003d new ExitState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Initializes the {@code HelpCommand}."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void initializeHelp() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        temporaryState \u003d currentState;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        currentState \u003d new HelpState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Miscellaneous Parser Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Reverts the parser\u0027s state to the previous command\u0027s last parsed state."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void revertToPreviousCommand() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        currentState \u003d temporaryState;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        temporaryState \u003d null;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Resets the current state machine."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void resetParser() {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.currentState \u003d null;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the current state of the finite state machine in the parser"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * can transition to the next state."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param argumentMultimap The arguments supplied along with their prefixes."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if a transition is possible."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean canTransition(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return (!argumentMultimap.isEmpty() \u0026\u0026 !currentState.isEndState())"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || isOptionalState(argumentMultimap);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Disallows a user entering a command word if the parser is parsing an active state machine."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param argumentMultimap Arguments and their prefixes."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws ParseException If the user inputs a static command midway through another static command."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void disallowCommandWordIfActivatedBefore(ArgumentMultimap argumentMultimap) throws ParseException {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!argumentMultimap.getPreamble().isBlank()) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_MISSING_PREFIX, currentState.getPrefix()));"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            argumentMultimap.clearValues(new Prefix(\"\"));"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Removes the command word from the {@code ArgumentMultimap} to allow the finite state machine to handle"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * subsequent inputs."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param wasActivatedNow Boolean flag to indicate if the state machine was just activated."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param argumentMultimap Arguments and their prefixes."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void clearCommandWordIfActivatedNow(boolean wasActivatedNow, ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (wasActivatedNow) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            argumentMultimap.clearValues(new Prefix(\"\"));"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the current state of the finite state machine allows for optional inputs."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param argumentMultimap Arguments and their prefixes."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the current input is optional."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isOptionalState(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (currentState instanceof OptionalState) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            OptionalState optionalState \u003d (OptionalState) currentState;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return optionalState.canBeSkipped(argumentMultimap);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Adds a white space as prefix to the input {@code String}."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param string {@code String} to add a buffer to."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return {@code String} with buffer added."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String addBufferTo(String string) {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder(BUFFER_TEXT);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        stringBuilder.append(string);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Command Handling Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public CommandResult fetchResult() {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (currentState \u003d\u003d null) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // This block should only be accessed when a clear command is entered."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new CommandResult(MESSAGE_RESET);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new CommandResult(currentState.getStateConstraints());"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean hasParsedCommand() {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (currentState \u003d\u003d null) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return currentState.isEndState();"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Command makeCommand() throws ParseException {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assert currentState instanceof EndState : \"Cannot build a command from a non-end state!\";"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EndState endState \u003d (EndState) currentState;"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            Command command \u003d endState.buildCommand();"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            handleStateChange(command);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return command;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new ParseException(e.getMessage());"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Handles the state machine changes associated with building and executing a dynamic command."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param command Command to be executed."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void handleStateChange(Command command) {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (isDynamicCommand(command)) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            revertToPreviousCommand();"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            resetParser();"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the {@code Command} is a dynamic {@code Command}."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param command Command to check."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the {@code Command} is dynamic."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isDynamicCommand(Command command) {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return command instanceof HelpCommand"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || command instanceof TabCommand"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || command instanceof CurrentCommand"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || command instanceof ExitCommand;"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 519,
      "lyskevin": 1
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 1,
      "nordic96": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/EndState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the final state of a finite state machine from which a {@code Command} can be built."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public abstract class EndState extends State {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected static final String MESSAGE_END_STATE \u003d \"Cannot transition from an end state!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected static final Prefix DUMMY_PREFIX \u003d new Prefix(\"\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected EndState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns a command built using the arguments accumulated from the finite state machine."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public abstract Command buildCommand() throws CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 27
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/OptionalState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a state that handles an optional input."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public interface OptionalState {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the state can be skipped."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * A state can be skipped if no arguments are supplied."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param newArgs Arguments to be processed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the state can be skipped."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean canBeSkipped(ArgumentMultimap newArgs);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 17
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/PenultimateState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.PenultimateStateTransitionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the penultimate state of a finite-state machine."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Handles the final argument entered by the user for a particular command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public abstract class PenultimateState extends State {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_EXCESSIVE_ARGUMENTS \u003d \"Excessive arguments supplied!\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" Command cannot be executed.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" Please enter \\\"// current\\\" to view the current state information.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected PenultimateState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Enforces the absence of unprocessed arguments."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param args Unprocessed arguments."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws PenultimateStateTransitionException If excessive unprocessed arguments are present."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected void enforceNoExcessiveArguments(ArgumentMultimap args) throws PenultimateStateTransitionException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!args.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new PenultimateStateTransitionException(MESSAGE_EXCESSIVE_ARGUMENTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 32
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/State.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an abstract state. Each state is a unit that is a part of a finite state machine."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public abstract class State {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_PREFIX \u003d \"You\u0027ve supplied arguments to the same parameter more\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" than once. Please avoid duplication.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /** ArgumentMultimap that tracks inputs up until the current state of the finite state machine. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected final ArgumentMultimap soFar;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected State(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(soFar);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.soFar \u003d soFar;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Transitions the current state into the next state."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param newArgs {@cod ArgumentMultimap} containing unprocessed arguments."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return next {@code State}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws StateTransitionException If a transition is not possible."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public abstract State transition(ArgumentMultimap newArgs) throws StateTransitionException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the constraints on the input handled by the state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the input constraints."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public abstract String getStateConstraints();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the {@code State} is the accepting state of the finite-state machine, i.e. the {@code EndState}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the state is the last state."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public abstract boolean isEndState();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the {@code Prefix} whose argument is processed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the {@code Prefix}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public abstract Prefix getPrefix();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if the argument specified is present."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * If not, the specified error message is thrown."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param keywordArgument Argument that needs to be present."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param errorMessage {@code String} to be shown to the user if the argument is absent."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws StateTransitionException If the argument is absent."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected void requireKeywordPresence(Optional\u003cString\u003e keywordArgument, String errorMessage)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws StateTransitionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (keywordArgument.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(errorMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Disallows the input of duplicate prefixes."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param newArgs {@code ArgumentMultimap} to check duplication in."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws StateTransitionException If duplicate inputs are present for the same prefixes."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected void disallowDuplicatePrefix(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!soFar.isDisjointWith(newArgs)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(MESSAGE_DUPLICATE_PREFIX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Collates the argument processed by the input {@code State} and appends it to the multimap of arguments"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * processed so far."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param state {@code State} that processes the input."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param newArgs Unprocessed arguments."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param prefix Prefix (parameter) handled by the input state."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected void collateArguments(State state, ArgumentMultimap newArgs, Prefix prefix) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String value \u003d newArgs.getValue(prefix).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        state.soFar.put(prefix, value);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        newArgs.clearValues(prefix);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns true if this state is equal to the specified object."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @param other The specified object."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @return True if this state is equal to the specified object."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } else if (!(other instanceof State)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            State otherState \u003d (State) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return this.soFar.equals(((State) other).soFar);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return Objects.hash(soFar);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 102,
      "lyskevin": 19
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/addmachine/AddCommandEndState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.addmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ATTENDEES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ENGAGEMENT_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.CliSyntax;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.InteractiveParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.EndState;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.AttendeeList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.EngagementType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Location;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Priority;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.TimeSlot;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.exceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the end state (accepting state) of the finite state machine that builds the {@code AddCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Builds the {@code AddCommand} from the input parameters."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class AddCommandEndState extends EndState {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Engagement successfully added!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected AddCommandEndState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Command buildCommand() throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EngagementType engagementType \u003d InteractiveParserUtil.parseType(soFar.getValue(PREFIX_ENGAGEMENT_TYPE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDateTime startTime \u003d InteractiveParserUtil.parseTime(soFar.getValue(PREFIX_START_TIME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDateTime endTime \u003d InteractiveParserUtil.parseTime(soFar.getValue(PREFIX_END_TIME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        AttendeeList attendees \u003d InteractiveParserUtil.parseAttendees(soFar.getValue(PREFIX_ATTENDEES).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Location location \u003d InteractiveParserUtil.parseLocation(soFar.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String description \u003d InteractiveParserUtil.parseDescription(soFar.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Priority priority \u003d InteractiveParserUtil.parsePriority(soFar.getValue(CliSyntax.PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        TimeSlot timeSlot \u003d new TimeSlot(startTime, endTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            Engagement engagement \u003d Engagement.of(engagementType, timeSlot, attendees, location, description, priority);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new AddCommand(engagement);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (InvalidTimeException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        throw new StateTransitionException(MESSAGE_END_STATE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return DUMMY_PREFIX;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 80
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/addmachine/AttendeesState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.addmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ATTENDEES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.AttendeeList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the state of the finite state machine that builds the {@code AddCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Handles input of the list of attendees."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class AttendeesState extends State {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Please enter the list of attendees separated by vertical lines\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" and prefixed by \\\"a/\\\". Only English names are supported.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_MISSING_KEYWORD \u003d \"Please enter the list of attendees prefixed by \\\"a/\\\".\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected AttendeesState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(newArgs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Optional\u003cString\u003e attendees \u003d newArgs.getValue(PREFIX_ATTENDEES);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        performGuardChecks(newArgs, attendees);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        collateArguments(this, newArgs, PREFIX_ATTENDEES);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new PriorityState(soFar);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void performGuardChecks(ArgumentMultimap newArgs, Optional\u003cString\u003e attendees)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws StateTransitionException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowDuplicatePrefix(newArgs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireKeywordPresence(attendees, MESSAGE_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceValidity(attendees);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void enforceValidity(Optional\u003cString\u003e attendees) throws StateTransitionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!AttendeeList.areValidNames(attendees.get())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(AttendeeList.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return PREFIX_ATTENDEES;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 66
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/addmachine/DescriptionState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.addmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the state of the finite state machine that builds the {@code AddCommand}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Handles input of the description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class DescriptionState extends State {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_INVALID_DESCRIPTION \u003d \"The description of an engagement cannot be empty.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_MISSING_KEYWORD \u003d \"Please enter the description after the prefix \\\"d/\\\".\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Please enter a non-blank description prefixed by \\\"d/\\\".\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected DescriptionState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(newArgs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Optional\u003cString\u003e description \u003d newArgs.getValue(PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        performGuardChecks(newArgs, description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        collateArguments(this, newArgs, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new AttendeesState(soFar);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void performGuardChecks(ArgumentMultimap newArgs, Optional\u003cString\u003e description)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws StateTransitionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowDuplicatePrefix(newArgs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireKeywordPresence(description, MESSAGE_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceValidity(description);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void enforceValidity(Optional\u003cString\u003e description) throws StateTransitionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (description.get().isBlank()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(MESSAGE_INVALID_DESCRIPTION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 65
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/addmachine/EndDateState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.addmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.InteractiveParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the state of the finite state machine that builds the {@code AddCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Handles input of the end date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class EndDateState extends State {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Please enter an end date and time prefixed by \\\"e/\\\".\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" The start time must conform to the dd/mm/yyyy/hhmm format.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_MISSING_KEYWORD \u003d \"Please enter a valid date and time after the prefix\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" \\\"e/\\\". Please conform to the dd/mm/yyyy/hhmm format.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected EndDateState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(newArgs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Optional\u003cString\u003e endDate \u003d newArgs.getValue(PREFIX_END_TIME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        performGuardChecks(newArgs, endDate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        collateArguments(this, newArgs, PREFIX_END_TIME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new LocationState(soFar);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void performGuardChecks(ArgumentMultimap newArgs, Optional\u003cString\u003e endDate)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws StateTransitionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowDuplicatePrefix(newArgs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireKeywordPresence(endDate, MESSAGE_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceValidity(endDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void enforceValidity(Optional\u003cString\u003e endDate) throws StateTransitionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!isValid(endDate.get())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isValid(String endDate) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return InteractiveParserUtil.isValidDateTime(endDate)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \u0026\u0026 InteractiveParserUtil.isValidTimeSlot(soFar.getValue(PREFIX_START_TIME).get(), endDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return PREFIX_END_TIME;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 73
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/addmachine/LocationState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.addmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the state of the finite state machine that builds the {@code AddCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Handles input of the location."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class LocationState extends State {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Please enter the location of the meeting,\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" prefixed by \\\"l/\\\".\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_MISSING_KEYWORD \u003d \"Please enter a valid location after the prefix \\\"l/\\\".\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected LocationState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(newArgs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Optional\u003cString\u003e location \u003d newArgs.getValue(PREFIX_LOCATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        performGuardChecks(newArgs, location);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        collateArguments(this, newArgs, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new DescriptionState(soFar);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void performGuardChecks(ArgumentMultimap newArgs, Optional\u003cString\u003e location)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws StateTransitionException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowDuplicatePrefix(newArgs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireKeywordPresence(location, MESSAGE_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceValidity(location);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void enforceValidity(Optional\u003cString\u003e location) throws StateTransitionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!Location.isValid((location.get()))) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return PREFIX_LOCATION;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 66
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/addmachine/PriorityState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.addmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.PenultimateState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the penultimate state of the finite state machine that builds the {@code AddCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Handles input of the priority level."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class PriorityState extends PenultimateState {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"The priority of an engagement can be LOW, MEDIUM, HIGH or NONE.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" Please enter the priority prefixed by \\\"p/\\\".\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_MISSING_KEYWORD \u003d \"Invalid input! Please enter the priority prefixed by\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" \\\"p/\\\". The priority can be one of LOW, MEDIUM, HIGH or NONE.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected PriorityState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(newArgs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Optional\u003cString\u003e priority \u003d newArgs.getValue(PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        performGuardChecks(newArgs, priority);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        collateArguments(this, newArgs, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceNoExcessiveArguments(newArgs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new AddCommandEndState(soFar);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void performGuardChecks(ArgumentMultimap newArgs, Optional\u003cString\u003e priority)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws StateTransitionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowDuplicatePrefix(newArgs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireKeywordPresence(priority, MESSAGE_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceValidity(priority);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void enforceValidity(Optional\u003cString\u003e priority) throws StateTransitionException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!Priority.isValid(priority.get())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(Priority.getMessageConstraints());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 70
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/addmachine/StartDateState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.addmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.InteractiveParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the state of the finite state machine that builds the {@code AddCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Handles input of the start date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class StartDateState extends State {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Please enter a start date and time prefixed by \\\"s/\\\".\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" The start time must conform to the dd/mm/yyyy/hhmm format.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_MISSING_KEYWORD \u003d \"Please enter a valid date and time after the prefix\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" \\\"s/\\\". Please conform to the dd/mm/yyyy/hhmm format.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected StartDateState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(newArgs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Optional\u003cString\u003e startDate \u003d newArgs.getValue(PREFIX_START_TIME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        performGuardChecks(newArgs, startDate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        collateArguments(this, newArgs, PREFIX_START_TIME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new EndDateState(soFar);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void performGuardChecks(ArgumentMultimap newArgs, Optional\u003cString\u003e startDate)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws StateTransitionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowDuplicatePrefix(newArgs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireKeywordPresence(startDate, MESSAGE_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceValidity(startDate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void enforceValidity(Optional\u003cString\u003e startDate) throws StateTransitionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!isValid(startDate.get())) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isValid(String startTime) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return InteractiveParserUtil.isValidDateTime(startTime);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return PREFIX_START_TIME;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 71
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/addmachine/TypeState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.addmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ENGAGEMENT_TYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.EngagementType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the initial state of the finite state machine that builds the {@code AddCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class TypeState extends State {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Add Command initiated. Please enter a valid engagement type\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" after the prefix \\\"t/\\\".\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_MISSING_KEYWORD \u003d \"Please enter a valid engagement type following\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" \\\"t/\\\".\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public TypeState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(newArgs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Optional\u003cString\u003e typeValue \u003d newArgs.getValue(PREFIX_ENGAGEMENT_TYPE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        performGuardChecks(newArgs, typeValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        collateArguments(this, newArgs, PREFIX_ENGAGEMENT_TYPE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new StartDateState(soFar);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void performGuardChecks(ArgumentMultimap newArgs, Optional\u003cString\u003e typeValue)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws StateTransitionException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowDuplicatePrefix(newArgs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireKeywordPresence(typeValue, MESSAGE_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceValidity(typeValue);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void enforceValidity(Optional\u003cString\u003e typeValue) throws StateTransitionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!EngagementType.isValid((typeValue.get()))) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(EngagementType.getMessageConstraints());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return PREFIX_ENGAGEMENT_TYPE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 67
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/calendarmachine/CalendarState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.calendarmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_CALENDAR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.CalendarCloseDisplayCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.CalendarNextMonthCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.CalendarOpenDisplayCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.CalendarPreviousMonthCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.PenultimateState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the initial state of the finite state machine that builds a {@code CalendarCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class CalendarState extends PenultimateState {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"What would you like to do with the calendar? Please enter\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" the command prefixed by \\\"c/\\\". Allowed actions are\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            + \" \\\"nextmonth\\\", \\\"previousmonth\\\", \\\"opendisplay\\\", and \\\"closedisplay\\\".\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_MISSING_KEYWORD \u003d \"Invalid input! Please enter a valid action after \\\"c/\\\".\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            + \" Allowed actions are \\\"nextmonth\\\", \\\"previousmonth\\\", \\\"opendisplay\\\", and \\\"closedisplay\\\".\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_INVALID_INPUT \u003d \"Invalid input!\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            + \" Allowed actions are \\\"nextmonth\\\", \\\"previousmonth\\\", \\\"opendisplay\\\", and \\\"closedisplay\\\".\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public CalendarState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(newArgs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Optional\u003cString\u003e operation \u003d newArgs.getValue(PREFIX_CALENDAR);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        performGuardChecks(newArgs, operation);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        collateArguments(this, newArgs, PREFIX_CALENDAR);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return nextState(soFar, newArgs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void performGuardChecks(ArgumentMultimap newArgs, Optional\u003cString\u003e operation)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws StateTransitionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowDuplicatePrefix(newArgs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireKeywordPresence(operation, MESSAGE_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceValidity(operation);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Enforces that the entered operation is a valid {@code CalendarCommand}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param operation Calendar operation."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws StateTransitionException If no such operation exists."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void enforceValidity(Optional\u003cString\u003e operation) throws StateTransitionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String operationString \u003d operation.get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!isValid(operationString)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(MESSAGE_INVALID_INPUT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the operation is a valid {@code CalendarCommand}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param operationString Calendar operation."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the entered operation is valid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isValid(String operationString) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return operationString.equalsIgnoreCase(CalendarNextMonthCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || operationString.equalsIgnoreCase(CalendarPreviousMonthCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || operationString.equalsIgnoreCase(CalendarOpenDisplayCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || operationString.equalsIgnoreCase(CalendarCloseDisplayCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the next state of the finite state machine depending on the operation entered by the user."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param soFar Arguments processed so far."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param newArgs Unprocessed arguments."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the next state."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws StateTransitionException If the entered operation is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private State nextState(ArgumentMultimap soFar, ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String operation \u003d soFar.getValue(PREFIX_CALENDAR).get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String operationLowerCase \u003d operation.toLowerCase();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        switch (operationLowerCase) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case CalendarNextMonthCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            enforceNoExcessiveArguments(newArgs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new NextMonthState(soFar);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case CalendarPreviousMonthCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            enforceNoExcessiveArguments(newArgs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new PreviousMonthState(soFar);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case CalendarOpenDisplayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new OpenDisplayState(soFar);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case CalendarCloseDisplayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new CloseDisplayState(soFar);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(MESSAGE_INVALID_INPUT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return PREFIX_CALENDAR;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 122,
      "lyskevin": 4
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/calendarmachine/CloseDisplayEndState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.calendarmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.CalendarCloseDisplayCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.InteractiveParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.EndState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the end state (accepting state) of the state machine that builds the close display command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class CloseDisplayEndState extends EndState {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Closed engagement list window on the entered date.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String DATE_PATTERN \u003d \"dd/MM/uuuu\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_INVALID_INPUT \u003d \"Invalid command! Please enter a valid date.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected CloseDisplayEndState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Command buildCommand() throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String dateString \u003d soFar.getValue(PREFIX_DATE).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDate date \u003d fetchDate(dateString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new CalendarCloseDisplayCommand(date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Makes and returns a date from the entered {@code String}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param dateString String that represents a date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return {@code LocalDate}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws CommandException If the date is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private LocalDate fetchDate(String dateString) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            LocalDate date \u003d InteractiveParserUtil.parseLocalDate(dateString, DATE_PATTERN);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_INPUT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        throw new StateTransitionException(EndState.MESSAGE_END_STATE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return DUMMY_PREFIX;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 70,
      "lyskevin": 3
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/calendarmachine/CloseDisplayState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.calendarmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.InteractiveParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.PenultimateState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the penultimate state of the state machine that builds a close display command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class CloseDisplayState extends PenultimateState {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String DATE_PATTERN \u003d \"dd/MM/uuuu\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_MISSING_KEYWORD \u003d \"Invalid input! Please enter a date in the dd/mm/yyyy\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" format after \\\"d/\\\".\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Please enter a date after \\\"d/\\\"/ The date must be in the\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" dd/mm/yyyy format.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_INVALID_INPUT \u003d \"Invalid input! Please enter a date prefixed by \\\"d/\\\".\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected CloseDisplayState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(newArgs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Optional\u003cString\u003e date \u003d newArgs.getValue(PREFIX_DATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        performGuardChecks(newArgs, date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        collateArguments(this, newArgs, PREFIX_DATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceNoExcessiveArguments(newArgs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new CloseDisplayEndState(soFar);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void performGuardChecks(ArgumentMultimap newArgs, Optional\u003cString\u003e date)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws StateTransitionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowDuplicatePrefix(newArgs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireKeywordPresence(date, MESSAGE_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceValidity(date);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Enforces the validity of the {@code String} input."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param date {@code String} that represents a date."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws StateTransitionException If the {@code String} is not a valid date."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void enforceValidity(Optional\u003cString\u003e date) throws StateTransitionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String dateString \u003d date.get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!isValid(dateString)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(MESSAGE_INVALID_INPUT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the {@code String} is a valid date."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param date {@code String} representing a date."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the {@code String} is a valid date."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isValid(String date) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            LocalDate localDate \u003d InteractiveParserUtil.parseLocalDate(date, DATE_PATTERN);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return PREFIX_DATE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 95,
      "lyskevin": 1
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/calendarmachine/NextMonthState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.calendarmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.CalendarNextMonthCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.EndState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the end state(accepting state) of the state machine that builds the next month command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class NextMonthState extends EndState {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Next month displayed.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected NextMonthState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Command buildCommand() throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new CalendarNextMonthCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        throw new StateTransitionException(MESSAGE_END_STATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return DUMMY_PREFIX;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 46,
      "lyskevin": 1
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/calendarmachine/OpenDisplayEndState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.calendarmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.CalendarOpenDisplayCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.InteractiveParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.EndState;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the end state(accepting state) of the state machine that builds the open display command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class OpenDisplayEndState extends EndState {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Displayed engagements on the entered date.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String DATE_PATTERN \u003d \"dd/MM/uuuu\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_INVALID_INPUT \u003d \"Invalid command! Please enter a valid date.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    protected OpenDisplayEndState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Command buildCommand() throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String dateString \u003d soFar.getValue(PREFIX_DATE).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDate date \u003d fetchDate(dateString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new CalendarOpenDisplayCommand(date);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Makes and returns a {@code LocalDate} object from the entered {@code String}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param dateString String that represents a date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return {@code LocalDate}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws CommandException If the {@code String} is not a valid date."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private LocalDate fetchDate(String dateString) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            LocalDate date \u003d InteractiveParserUtil.parseLocalDate(dateString, DATE_PATTERN);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_INPUT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        throw new StateTransitionException(MESSAGE_END_STATE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return DUMMY_PREFIX;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 70,
      "lyskevin": 3
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/calendarmachine/OpenDisplayState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.calendarmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.InteractiveParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.PenultimateState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the penultimate state of the state machine that builds the open display command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class OpenDisplayState extends PenultimateState {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Please enter a valid date in the dd/mm/yyyy format, prefixed\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" by \\\"d/\\\".\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final String DATE_PATTERN \u003d \"dd/MM/uuuu\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_MISSING_KEYWORD \u003d \"Invalid input! Please enter a valid date after \\\"d/\\\" in\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" the dd/mm/yyyy format.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_INVALID_INPUT \u003d \"Invalid input! The date must adhere to the dd/mm/yyyy format.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected OpenDisplayState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(newArgs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Optional\u003cString\u003e date \u003d newArgs.getValue(PREFIX_DATE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        performGuardChecks(newArgs, date);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        collateArguments(this, newArgs, PREFIX_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceNoExcessiveArguments(newArgs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return new OpenDisplayEndState(soFar);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void performGuardChecks(ArgumentMultimap newArgs, Optional\u003cString\u003e date)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws StateTransitionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowDuplicatePrefix(newArgs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireKeywordPresence(date, MESSAGE_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceValidity(date);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Enforces that the entered {@code String} is a valid date."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param date {@code String} that represents a date."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws StateTransitionException If the {@code String} is not a valid date."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void enforceValidity(Optional\u003cString\u003e date) throws StateTransitionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String dateString \u003d date.get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!isValid(dateString)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(MESSAGE_INVALID_INPUT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the {@code String} is a valid date."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param date {@code String} that represents a date."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the {@code String} is a valid date."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isValid(String date) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            LocalDate localDate \u003d InteractiveParserUtil.parseLocalDate(date, DATE_PATTERN);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return PREFIX_DATE;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 92,
      "lyskevin": 3
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/calendarmachine/PreviousMonthState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.calendarmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.CalendarPreviousMonthCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.EndState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the end state (accepting state) of the state machine that builds the previous month command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class PreviousMonthState extends EndState {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Previous month displayed.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected PreviousMonthState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Command buildCommand() throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new CalendarPreviousMonthCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        throw new StateTransitionException(MESSAGE_END_STATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return DUMMY_PREFIX;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 46,
      "lyskevin": 1
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/clearmachine/ClearState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.clearmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.EndState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the end state of the state machine that builds the {@code ClearCommand}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class ClearState extends EndState {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Clear command initiated. Emptying engagement list.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public ClearState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Command buildCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new ClearCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        throw new StateTransitionException(MESSAGE_END_STATE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return DUMMY_PREFIX;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 45,
      "lyskevin": 1
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/currentmachine/CurrentState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.currentmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.CurrentCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.EndState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the end state of the state machines that builds the {@code CurrentCommand}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class CurrentState extends EndState {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"The parser is currently inactive.\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" Please enter a command to get started.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String currentMessage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public CurrentState(String currentMessage) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(new ArgumentMultimap());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.currentMessage \u003d currentMessage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Command buildCommand() throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new CurrentCommand(currentMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        throw new StateTransitionException(MESSAGE_END_STATE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return DUMMY_PREFIX;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 51
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/deletemachine/DeleteEndState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.deletemachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_LIST_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.InteractiveParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.EndState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the end state of the state machine that builds the {@code DeleteCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class DeleteEndState extends EndState {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Delete command end state\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public DeleteEndState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        throw new StateTransitionException(MESSAGE_END_STATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return DUMMY_PREFIX;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Command buildCommand() throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        String oneBasedIndex \u003d soFar.getValue(PREFIX_LIST_INDEX).get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            Index index \u003d InteractiveParserUtil.parseIndex(oneBasedIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 58,
      "lyskevin": 1
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/deletemachine/IndexState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.deletemachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_LIST_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.InteractiveParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.PenultimateState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the penultimate state of the state machine that builds the {@code DeleteCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class IndexState extends PenultimateState {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Delete command initiated. Please enter the index of the\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" engagement you would like to delete. The index should be prefixed by \\\"i/\\\".\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_MISSING_KEYWORD \u003d \"Invalid input! Please enter an index prefixed by \\\"i/\\\".\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public IndexState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(newArgs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Optional\u003cString\u003e index \u003d newArgs.getValue(PREFIX_LIST_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        performGuardChecks(newArgs, index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        collateArguments(this, newArgs, PREFIX_LIST_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceNoExcessiveArguments(newArgs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new DeleteEndState(soFar);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void performGuardChecks(ArgumentMultimap newArgs, Optional\u003cString\u003e index)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws StateTransitionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowDuplicatePrefix(newArgs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireKeywordPresence(index, MESSAGE_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceValidity(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Enforces the validity of the entered index."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param index Index."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws StateTransitionException If the index is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void enforceValidity(Optional\u003cString\u003e index) throws StateTransitionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            InteractiveParserUtil.parseIndex(index.get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return PREFIX_LIST_INDEX;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 76,
      "lyskevin": 1
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/exceptions/PenultimateStateTransitionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an exceptional situation where excessive arguments are supplied."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class PenultimateStateTransitionException extends StateTransitionException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public PenultimateStateTransitionException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 12
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/exceptions/StateTransitionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an exceptional situation where a transition to the next state in a state machine is invalid."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class StateTransitionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public StateTransitionException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 12
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/exitmachine/ExitState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.exitmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.EndState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the end state of the state machine that builds the {@code ExitCommand}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class ExitState extends EndState {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_GOODBYE \u003d \"Goodbye!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public ExitState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Command buildCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new ExitCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        throw new StateTransitionException(MESSAGE_END_STATE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_GOODBYE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return DUMMY_PREFIX;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 46
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/findmachine/FindAttendeesState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.findmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ATTENDEES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.OptionalState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.AttendeeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an optional state in the state machine that builds the {@code FindCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Accepts a list of attendees."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class FindAttendeesState extends State implements OptionalState {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Please enter the attendees to search for prefixed by \\\"a/\\\".\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" The presence of ANY attendee will be considered a match. Vertical lines should separate attendees.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected FindAttendeesState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(newArgs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Optional\u003cString\u003e attendees \u003d newArgs.getValue(PREFIX_ATTENDEES);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        performGuardChecks(newArgs, attendees);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (attendees.isPresent()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            collateArguments(this, newArgs, PREFIX_ATTENDEES);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new FindPriorityState(soFar);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Ensures no arguments are duplicated."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * If the list of attendees is entered, ensures that the list is valid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param newArgs Unprocessed arguments."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param attendees {@code String} that represents a list of attendees."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws StateTransitionException If the input is invalid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void performGuardChecks(ArgumentMultimap newArgs, Optional\u003cString\u003e attendees)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws StateTransitionException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowDuplicatePrefix(newArgs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (attendees.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            enforceValidity(attendees.get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void enforceValidity(String attendees) throws StateTransitionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!AttendeeList.areValidNames(attendees)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(AttendeeList.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return PREFIX_ATTENDEES;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean canBeSkipped(ArgumentMultimap newArgs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return newArgs.getValue(PREFIX_ATTENDEES).isEmpty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 82
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/findmachine/FindBufferState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.findmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the first state of the state machine that builds the {@code FindCommand}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class FindBufferState extends State {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Find command initiated. Please enter the description, location,\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" attendees and priority to search for, prefixed by \\\"d/\\\", \\\"l/\\\", \\\"a/\\\" and \\\"p/\\\" respectively.\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" All parameters are optional. However, at least one parameter should be specified.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public FindBufferState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(newArgs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new FindDescriptionState(soFar);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new Prefix(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 43
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/findmachine/FindDescriptionState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.findmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.OptionalState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an optional state in the state machine that builds the {@code FindCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Accepts a description."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class FindDescriptionState extends State implements OptionalState {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Please enter a description to\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" search for prefixed by \\\"d/\\\".\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_INVALID_INPUT \u003d \"Invalid input. The entered description cannot be blank!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected FindDescriptionState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(newArgs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Optional\u003cString\u003e description \u003d newArgs.getValue(PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        performGuardChecks(newArgs, description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (description.isPresent()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            collateArguments(this, newArgs, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new FindLocationState(soFar);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Ensures that no arguments are duplicated."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * If an input is entered, ensures that the description is valid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param newArgs Unprocessed arguments."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param description Description."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws StateTransitionException If the description is invalid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void performGuardChecks(ArgumentMultimap newArgs, Optional\u003cString\u003e description)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws StateTransitionException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowDuplicatePrefix(newArgs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (description.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            enforceValidity(description.get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void enforceValidity(String description) throws StateTransitionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(MESSAGE_INVALID_INPUT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean canBeSkipped(ArgumentMultimap newArgs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return newArgs.getValue(PREFIX_DESCRIPTION).isEmpty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 82
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/findmachine/FindEndState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.findmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ATTENDEES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.InteractiveParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.EndState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.AttendeeList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.EngagementPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the end state in the state machine that builds the {@code FindCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class FindEndState extends EndState {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_EMPTY_COMMAND \u003d \"Invalid input. The find command cannot be empty!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Displaying filtered engagement list.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected FindEndState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Command buildCommand() throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (isEmptyCommand()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new CommandException(MESSAGE_EMPTY_COMMAND);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EngagementPredicate engagementPredicate \u003d makeEngagementPredicate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new FindCommand(engagementPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isEmptyCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return soFar.isEmpty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Builds the {@code EngagementPredicate} from the entered arguments."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return {@code EngagementPredicate}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws CommandException If the predicate is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private EngagementPredicate makeEngagementPredicate() throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Adapted from Jun Hao\u0027s FindCommandParser."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EngagementPredicate engagementPredicate \u003d new EngagementPredicate();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        setPredicateLocation(engagementPredicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        setPredicatePriority(engagementPredicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        setPredicateAttendees(engagementPredicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        setPredicateDescription(engagementPredicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        checkPredicateValidity(engagementPredicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return engagementPredicate;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Ensures that the {@code EngagementPredicate} is valid."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param engagementPredicate {@code EngagementPredicate}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws CommandException If the predicate is invalid."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void checkPredicateValidity(EngagementPredicate engagementPredicate) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (!engagementPredicate.hasEditedFields()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void setPredicateDescription(EngagementPredicate engagementPredicate) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (soFar.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            engagementPredicate.setDescription("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    InteractiveParserUtil.parseDescription(soFar.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void setPredicateAttendees(EngagementPredicate engagementPredicate) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (soFar.getValue(PREFIX_ATTENDEES).isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            AttendeeList attendeeList \u003d InteractiveParserUtil.parseAttendees(soFar.getValue(PREFIX_ATTENDEES).get());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            String attendeeName \u003d attendeeList.getAttendees().get(0).getName().toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            engagementPredicate.setAttendees(attendeeName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void setPredicatePriority(EngagementPredicate engagementPredicate) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (soFar.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            engagementPredicate.setPriority("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    InteractiveParserUtil.parsePriority(soFar.getValue(PREFIX_PRIORITY).get()).toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void setPredicateLocation(EngagementPredicate engagementPredicate) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (soFar.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            engagementPredicate.setLocation("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    InteractiveParserUtil.parseLocation(soFar.getValue(PREFIX_LOCATION).get()).toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        throw new StateTransitionException(MESSAGE_END_STATE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return DUMMY_PREFIX;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 1,
      "uggi121": 125
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/findmachine/FindLocationState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.findmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.OptionalState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an optional state in the state machine that builds the {@code FindCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Accepts a location."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class FindLocationState extends State implements OptionalState {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Please enter a location to search for, prefixed by \\\"l/\\\".\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected FindLocationState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(newArgs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Optional\u003cString\u003e location \u003d newArgs.getValue(PREFIX_LOCATION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        performGuardChecks(newArgs, location);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (location.isPresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            collateArguments(this, newArgs, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new FindAttendeesState(soFar);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Ensures that no arguments are duplicated."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * If an input is entered, ensures that it is a valid location."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param newArgs Unprocessed arguments."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param location Location."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws StateTransitionException If the location is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void performGuardChecks(ArgumentMultimap newArgs, Optional\u003cString\u003e location)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws StateTransitionException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowDuplicatePrefix(newArgs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (location.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            enforceValidity(location.get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Ensures that the entered location is valid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param location Location."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws StateTransitionException If the location is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void enforceValidity(String location) throws StateTransitionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!Location.isValid(location)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return PREFIX_LOCATION;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean canBeSkipped(ArgumentMultimap newArgs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return newArgs.getValue(PREFIX_LOCATION).isEmpty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 88
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/findmachine/FindPriorityState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.findmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.OptionalState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.PenultimateState;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an optional state (also penultimate state) in the state machine that builds the {@code FindCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Accepts a priority level."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class FindPriorityState extends PenultimateState implements OptionalState {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Please enter the priority to search for, prefixed by \\\"p/\\\".\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected FindPriorityState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(newArgs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Optional\u003cString\u003e priority \u003d newArgs.getValue(PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        performGuardChecks(newArgs, priority);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (priority.isPresent()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            collateArguments(this, newArgs, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceNoExcessiveArguments(newArgs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new FindEndState(soFar);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Ensures that no arguments are duplicated."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * If a priority level is input, ensures that it is valid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param newArgs Unprocessed arguments."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param priority Priority level."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws StateTransitionException If the priority level is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void performGuardChecks(ArgumentMultimap newArgs, Optional\u003cString\u003e priority)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws StateTransitionException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowDuplicatePrefix(newArgs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (priority.isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            enforceValidity(priority.get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void enforceValidity(String priority) throws StateTransitionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!Priority.isValid(priority)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(Priority.getMessageConstraints());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean canBeSkipped(ArgumentMultimap newArgs) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return newArgs.getValue(PREFIX_PRIORITY).isEmpty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 84
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/helpmachine/HelpState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.helpmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.EndState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the final state of the state machine that builds a {@code HelpCommand}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class HelpState extends EndState {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Please refer to the user guide for more information.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public HelpState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Command buildCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new HelpCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        throw new StateTransitionException(MESSAGE_END_STATE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return DUMMY_PREFIX;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 44,
      "lyskevin": 1
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/listmachine/ListState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.listmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.EndState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the final state of the state machine that builds a {@code ListCommand}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class ListState extends EndState {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Listed all engagements.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public ListState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Command buildCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new ListCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        throw new StateTransitionException(MESSAGE_END_STATE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return DUMMY_PREFIX;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 44,
      "lyskevin": 2
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/pdfmachine/FromState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.pdfmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a state in the state machine that builds the {@code PdfCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Accepts the sender."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class FromState extends State {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Index stored. Please enter the name of the sender,\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" i.e. the person who the report is from, prefixed by \\\"f/\\\".\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_MISSING_KEYWORD \u003d \"Invalid input! Please enter a valid name after \\\"f/\\\".\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected FromState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(newArgs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Optional\u003cString\u003e from \u003d newArgs.getValue(PREFIX_FROM);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        performGuardChecks(newArgs, from);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        collateArguments(this, newArgs, PREFIX_FROM);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new ToState(soFar);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void performGuardChecks(ArgumentMultimap newArgs, Optional\u003cString\u003e from)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws StateTransitionException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowDuplicatePrefix(newArgs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireKeywordPresence(from, MESSAGE_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceValidity(from);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Ensures that the sender is valid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param from Sender."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws StateTransitionException If the sender is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void enforceValidity(Optional\u003cString\u003e from) throws StateTransitionException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String name \u003d from.get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return PREFIX_FROM;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 73
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/pdfmachine/PdfEndState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.pdfmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_LIST_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.PdfCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.InteractiveParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.EndState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the end state of the state machine that builds the {@code PdfCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class PdfEndState extends EndState {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Generating PDF.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected PdfEndState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Command buildCommand() throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Index index \u003d fetchIndex();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Person receiver \u003d fetchReceiver();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Person sender \u003d fetchSender();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new PdfCommand(index.getOneBased(), receiver, sender);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns an index from its {@code String} representation."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return Index."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws CommandException If the index is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Index fetchIndex() throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String oneBasedIndex \u003d soFar.getValue(PREFIX_LIST_INDEX).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            Index index \u003d InteractiveParserUtil.parseIndex(oneBasedIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Person fetchSender() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Person person \u003d makePerson(PREFIX_FROM);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Person fetchReceiver() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Person person \u003d makePerson(PREFIX_TO);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Person makePerson(Prefix prefix) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String nameString \u003d soFar.getValue(prefix).get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Name name \u003d new Name(nameString);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new Person(name);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        throw new StateTransitionException(MESSAGE_END_STATE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return DUMMY_PREFIX;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 91
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/pdfmachine/PdfIndexState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.pdfmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_LIST_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.InteractiveParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the initial state of the state machine that builds the {@code PdfCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class PdfIndexState extends State {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"PDF command initiated. Please enter the index of the\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" engagement you would like to generate a report for. The index should be prefixed by \\\"i/\\\".\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_MISSING_KEYWORD \u003d \"Invalid input! Please enter an index prefixed by \\\"i/\\\".\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public PdfIndexState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(newArgs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Optional\u003cString\u003e index \u003d newArgs.getValue(PREFIX_LIST_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        performGuardChecks(newArgs, index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        collateArguments(this, newArgs, PREFIX_LIST_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new FromState(soFar);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void performGuardChecks(ArgumentMultimap newArgs, Optional\u003cString\u003e index)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws StateTransitionException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowDuplicatePrefix(newArgs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireKeywordPresence(index, MESSAGE_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceValidity(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Ensures that the entered index is valid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param index Index."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws StateTransitionException If the index is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void enforceValidity(Optional\u003cString\u003e index) throws StateTransitionException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            Index listIndex \u003d InteractiveParserUtil.parseIndex(index.get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return PREFIX_LIST_INDEX;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 74
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/pdfmachine/ToState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.pdfmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.PenultimateState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the penultimate state in the state machine that builds the {@code PdfCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Accepts the receiver."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class ToState extends PenultimateState {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Sender name stored. Please enter the name of the receiver,\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" i.e. the person who the report is sent to, prefixed by \\\"t/\\\".\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_MISSING_KEYWORD \u003d \"Invalid input! Please enter a valid name after \\\"t/\\\".\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected ToState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(newArgs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Optional\u003cString\u003e from \u003d newArgs.getValue(PREFIX_TO);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        performGuardChecks(newArgs, from);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        collateArguments(this, newArgs, PREFIX_TO);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceNoExcessiveArguments(newArgs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new PdfEndState(soFar);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void performGuardChecks(ArgumentMultimap newArgs, Optional\u003cString\u003e from)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws StateTransitionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowDuplicatePrefix(newArgs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireKeywordPresence(from, MESSAGE_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceValidity(from);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Ensures that the receiver is valid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param to Receiver."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws StateTransitionException If the receiver is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void enforceValidity(Optional\u003cString\u003e to) throws StateTransitionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String name \u003d to.get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return PREFIX_TO;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 76
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/redomachine/RedoState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.redomachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.EndState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the final state of the state machine that builds a {@code RedoCommand}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class RedoState extends EndState {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"The last undone command will be redone.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public RedoState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Command buildCommand() throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new RedoCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        throw new StateTransitionException(MESSAGE_END_STATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return DUMMY_PREFIX;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 47
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/sortmachine/OrderState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.sortmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ORDER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.PenultimateState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the penultimate state of the state machine that builds a {@code SortCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class OrderState extends PenultimateState {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Please enter the ordering to be followed,\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" prefixed by \\\"o/\\\". Accepted orderings are \\\"ascending\\\" and \\\"descending\\\".\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_ASCENDING_ORDER \u003d \"ascending\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_DESCENDING_ORDER \u003d \"descending\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_MISSING_KEYWORD \u003d \"Invalid input! Please enter a valid sort order \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \"after \\\"o/\\\". The allowed orderings are ascending and descending.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_INVALID_INPUT \u003d \"Invalid input! Sort order can be ascending or descending.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected OrderState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(newArgs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Optional\u003cString\u003e order \u003d newArgs.getValue(PREFIX_ORDER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        performGuardChecks(newArgs, order);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        collateArguments(this, newArgs, PREFIX_ORDER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceNoExcessiveArguments(newArgs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new SortEndState(soFar);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void performGuardChecks(ArgumentMultimap newArgs, Optional\u003cString\u003e order)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws StateTransitionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowDuplicatePrefix(newArgs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireKeywordPresence(order, MESSAGE_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceValidity(order);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Ensures that the entered order is valid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param order Order."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws StateTransitionException If the order is invalid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void enforceValidity(Optional\u003cString\u003e order) throws StateTransitionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String sortOrder \u003d order.get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!isValid(sortOrder)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(MESSAGE_INVALID_INPUT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isValid(String sortOrder) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return sortOrder.equalsIgnoreCase(KEYWORD_ASCENDING_ORDER)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || sortOrder.equalsIgnoreCase(KEYWORD_DESCENDING_ORDER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return PREFIX_ORDER;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 83
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/sortmachine/PropertyState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.sortmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_PROPERTY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Initial state of the state machine that builds the {@code SortCommand}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class PropertyState extends State {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Sort command initiated. Please enter the property you would\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" like to sort by, prefixed by \\\"p/\\\". The sortable properties are start date, end date, description\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" and priority, to be specified as \\\"start\\\", \\\"end\\\", \\\"description\\\" and \\\"priority\\\" respectively.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_MISSING_KEYWORD \u003d \"Invalid input! Please enter a valid property after \\\"p\\\".\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_INVALID_INPUT \u003d \"Invalid input! Accepted properties are\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" \\\"start\\\", \\\"end\\\", \\\"description\\\" and \\\"priority\\\".\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_START_PROPERTY \u003d \"start\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_END_PROPERTY \u003d \"end\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_DESCRIPTION_PROPERTY \u003d \"description\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_PRIORITY_PROPERTY \u003d \"priority\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public PropertyState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(newArgs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Optional\u003cString\u003e property \u003d newArgs.getValue(PREFIX_PROPERTY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        performGuardChecks(newArgs, property);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        collateArguments(this, newArgs, PREFIX_PROPERTY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new OrderState(soFar);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void performGuardChecks(ArgumentMultimap newArgs, Optional\u003cString\u003e property)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws StateTransitionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowDuplicatePrefix(newArgs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireKeywordPresence(property, MESSAGE_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceValidity(property);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void enforceValidity(Optional\u003cString\u003e property) throws StateTransitionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!isValid(property.get())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(MESSAGE_INVALID_INPUT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the entered property is a valid, sortable property."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param property Property."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the property is valid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isValid(String property) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return property.equalsIgnoreCase(KEYWORD_START_PROPERTY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || property.equalsIgnoreCase(KEYWORD_END_PROPERTY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || property.equalsIgnoreCase(KEYWORD_DESCRIPTION_PROPERTY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || property.equalsIgnoreCase(KEYWORD_PRIORITY_PROPERTY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return PREFIX_PROPERTY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 84
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/sortmachine/SortEndState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.sortmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ORDER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_PROPERTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.InteractiveParserUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.EndState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.util.EngagementComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the end state of the state machine that builds the {@code SortCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class SortEndState extends EndState {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String CONSTANT_COMBINER \u003d \"_\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Sorting engagements.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_START_ASCENDING \u003d \"START_TIME\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_START_DESCENDING \u003d \"START_TIME_REVERSE\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_END_ASCENDING \u003d \"END_TIME\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_END_DESCENDING \u003d \"END_TIME_REVERSE\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_DESCRIPTION_ASCENDING \u003d \"ALPHABETICAL\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_DESCRIPTION_DESCENDING \u003d \"ALPHABETICAL_REVERSE\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_PRIORITY_ASCENDING \u003d \"PRIORITY\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_PRIORITY_DESCENDING \u003d \"PRIORITY_REVERSE\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_INVALID_INPUT \u003d \"Invalid sort order!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected SortEndState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Command buildCommand() throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EngagementComparator engagementComparator \u003d makeEngagementComparator(soFar);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(engagementComparator);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return sortCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Builds an {@code EngagementComparator} from the entered arguments."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param soFar Processed arguments."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return {@code EngagementComparator}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws CommandException If the arguments are invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private EngagementComparator makeEngagementComparator(ArgumentMultimap soFar) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String property \u003d soFar.getValue(PREFIX_PROPERTY).get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String order \u003d soFar.getValue(PREFIX_ORDER).get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EngagementComparator engagementComparator \u003d getComparator(property, order);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return engagementComparator;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private EngagementComparator getComparator(String property, String order) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            String sortOrder \u003d combineAndFormat(property, order);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            String normalizedSortOrder \u003d normalize(sortOrder);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            EngagementComparator comparator \u003d InteractiveParserUtil.parseComparator(normalizedSortOrder);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return comparator;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_INPUT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Combines and formats the entered property and order into a valid sort order."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param property Property."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param order Order."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return formatted string."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String combineAndFormat(String property, String order) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return property.toUpperCase() + CONSTANT_COMBINER + order.toUpperCase();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns a {@code String} representation of a sort order made from the entered, formatted input."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param sortOrder Formatted {@code String}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return {@code String} representing sort order."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String normalize(String sortOrder) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Order order \u003d Order.valueOf(sortOrder);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        switch (order) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case START_ASCENDING:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return KEYWORD_START_ASCENDING;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case START_DESCENDING:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return KEYWORD_START_DESCENDING;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case END_ASCENDING:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return KEYWORD_END_ASCENDING;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case END_DESCENDING:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return KEYWORD_END_DESCENDING;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case DESCRIPTION_ASCENDING:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return KEYWORD_DESCRIPTION_ASCENDING;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case DESCRIPTION_DESCENDING:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return KEYWORD_DESCRIPTION_DESCENDING;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case PRIORITY_ASCENDING:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return KEYWORD_PRIORITY_ASCENDING;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case PRIORITY_DESCENDING:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return KEYWORD_PRIORITY_DESCENDING;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        throw new StateTransitionException(MESSAGE_END_STATE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return DUMMY_PREFIX;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Represents a collection of the allowed sort orders."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private enum Order {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        START_ASCENDING, START_DESCENDING, END_ASCENDING, END_DESCENDING, DESCRIPTION_ASCENDING, DESCRIPTION_DESCENDING,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        PRIORITY_ASCENDING, PRIORITY_DESCENDING"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 148
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/tabmachine/TabEndState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.tabmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_TAB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.TabCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.EndState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.ui.Tab;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the accepting state of the finite state machine that parses the {@code TabCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class TabEndState extends EndState {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Tab successfully shifted!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_INVALID_INPUT \u003d \"No such tab exists!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_GAME_TAB \u003d \"TypingGame\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_ENGAGEMENT_TAB \u003d \"Engagement\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_REPORT_TAB \u003d \"Report\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_CALENDAR_TAB \u003d \"Calendar\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_GAME_INPUT \u003d \"game\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_ENGAGEMENT_INPUT \u003d \"engagement\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_REPORT_INPUT \u003d \"report\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_CALENDAR_INPUT \u003d \"calendar\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public TabEndState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Command buildCommand() throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String tab \u003d soFar.getValue(PREFIX_TAB).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Tab tabToSwitchTo \u003d makeTab(tab);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new TabCommand(tabToSwitchTo);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Makes a {@code Tab} from the entered {@code String}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param tab String that represents a tab."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return {@code Tab} that corresponds to the {@code String}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws CommandException If no such tab exists."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Tab makeTab(String tab) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String tabLowerCase \u003d tab.toLowerCase().trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        switch(tabLowerCase) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case KEYWORD_GAME_INPUT:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new Tab(KEYWORD_GAME_TAB);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case KEYWORD_ENGAGEMENT_INPUT:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new Tab(KEYWORD_ENGAGEMENT_TAB);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case KEYWORD_REPORT_INPUT:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new Tab(KEYWORD_REPORT_TAB);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        case KEYWORD_CALENDAR_INPUT:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new Tab(KEYWORD_CALENDAR_TAB);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_INPUT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        throw new StateTransitionException(MESSAGE_END_STATE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return DUMMY_PREFIX;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "uggi121": 89
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/tabmachine/TabState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.tabmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_TAB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.PenultimateState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the initial and the penultimate state of the state machine that builds the {@code TabCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class TabState extends PenultimateState {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Tab command initiated. Please enter the tab you would like\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" to shift to, prefixed by \\\"b/\\\".\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" The available tabs are \\\"game\\\", \\\"calendar\\\", \\\"engagement\\\" and \\\"report\\\".\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_MISSING_KEYWORD \u003d \"Invalid input! Please enter a valid tab name after \\\"b/\\\".\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_INVALID \u003d \"Invalid input! The tab name should be one of\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" game, calendar, engagement or report\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_GAME_TAB \u003d \"game\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_ENGAGEMENT_TAB \u003d \"engagement\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_CALENDAR_TAB \u003d \"calendar\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String KEYWORD_REPORT_TAB \u003d \"report\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public TabState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(newArgs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Optional\u003cString\u003e tab \u003d newArgs.getValue(PREFIX_TAB);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        performGuardChecks(newArgs, tab);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        collateArguments(this, newArgs, PREFIX_TAB);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceNoExcessiveArguments(newArgs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new TabEndState(soFar);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks that the input doesn\u0027t have duplicate prefixes, contains the required keyword and is valid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param newArgs Unprocessed arguments."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param tab User entered {@code String}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws StateTransitionException If there are duplicate prefixes, the required keyword is missing, or"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * the input is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void performGuardChecks(ArgumentMultimap newArgs, Optional\u003cString\u003e tab)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throws StateTransitionException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        disallowDuplicatePrefix(newArgs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireKeywordPresence(tab, MESSAGE_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        enforceValidity(tab);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Ensures that the input {@code String} is a valid tab."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param tab Tab to switch to."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws StateTransitionException If the tab is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private void enforceValidity(Optional\u003cString\u003e tab) throws StateTransitionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String tabString \u003d tab.get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!isValid(tabString)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new StateTransitionException(MESSAGE_INVALID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the {@code String} input is not a valid tab."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param tabString {@code String} representing a tab."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the {@code String} is a valid tab."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean isValid(String tabString) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return tabString.equalsIgnoreCase(KEYWORD_GAME_TAB)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || tabString.equalsIgnoreCase(KEYWORD_ENGAGEMENT_TAB)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || tabString.equalsIgnoreCase(KEYWORD_CALENDAR_TAB)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || tabString.equalsIgnoreCase(KEYWORD_REPORT_TAB);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return PREFIX_TAB;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 102
    }
  },
  {
    "path": "src/main/java/com/typee/logic/interactive/parser/state/undomachine/UndoState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.undomachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.EndState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the final state of the state machine that builds the {@code UndoCommand}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class UndoState extends EndState {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"The latest undoable command will be undone.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public UndoState(ArgumentMultimap soFar) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(soFar);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Command buildCommand() throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new UndoCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public State transition(ArgumentMultimap newArgs) throws StateTransitionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        throw new StateTransitionException(MESSAGE_END_STATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getStateConstraints() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isEndState() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Prefix getPrefix() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return DUMMY_PREFIX;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 47
    }
  },
  {
    "path": "src/main/java/com/typee/model/EngagementList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.EngagementConflictChecker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Wraps all data at the engagement-list level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Duplicates are not allowed (by .isConflictingWith comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class EngagementList implements ReadOnlyEngagementList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private final ObservableList\u003cEngagement\u003e engagements;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public EngagementList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        engagements \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Creates an EngagementList using the Engagements in the {@code toBeCopied}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementList(ReadOnlyEngagementList toBeCopied) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Replaces the contents of the engagement list with {@code engagements}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * {@code engagements} must not contain duplicate engagements."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setEngagements(List\u003cEngagement\u003e engagements) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        this.engagements.setAll(engagements);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Resets the existing data of this {@code EngagementList} with {@code newData}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void resetData(ReadOnlyEngagementList newData) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        setEngagements(newData.getEngagementList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * Sorts the ObservableList by custom comparator"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void sort(Comparator\u003cEngagement\u003e comparator) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        FXCollections.sort(engagements, comparator);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    //// engagement-level operations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns true if an engagement with the same identity as {@code engagement}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * exists in the engagement list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean hasEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(engagement);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return engagements.contains(engagement);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Adds an engagement to the engagement list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * The engagement must not already exist in the engagement list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void addEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        engagements.add(engagement);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Replaces the given engagement {@code target} in the list with {@code editedEngagement}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * {@code target} must exist in the engagement list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * The engagement identity of {@code editedEngagement} must not be the same"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * as another existing engagement in the engagement list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setEngagement(Engagement target, Engagement editedEngagement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(editedEngagement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        engagements.set(engagements.indexOf(target), editedEngagement);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Removes {@code key} from this {@code EngagementList}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * {@code key} must exist in the engagement list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void removeEngagement(Engagement key) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        engagements.remove(key);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isConflictingEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return engagements.stream()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .anyMatch(existingEngagement -\u003e EngagementConflictChecker"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                        .areConflicting(existingEngagement, engagement));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return engagements.size() + \" engagements\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public ObservableList\u003cEngagement\u003e getEngagementList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return FXCollections.unmodifiableObservableList(engagements);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                || (other instanceof EngagementList // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                \u0026\u0026 engagements.equals(((EngagementList) other).engagements));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return engagements.hashCode();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 31,
      "nordic96": 1,
      "brebeek": 18,
      "lyskevin": 17,
      "-": 63
    }
  },
  {
    "path": "src/main/java/com/typee/model/HistoryManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.exceptions.NullRedoableActionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.exceptions.NullUndoableActionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * {@code EngagementList} with a list of its previous states."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class HistoryManager extends EngagementList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private final List\u003cReadOnlyEngagementList\u003e historyList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private int versionPointer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public HistoryManager(ReadOnlyEngagementList initialList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        super(initialList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        versionPointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        historyList \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        historyList.add(new EngagementList(initialList));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * Reverts the list to its previous state."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void undo() throws NullUndoableActionException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        if (!isUndoable()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new NullUndoableActionException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        versionPointer--;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        resetData(historyList.get(versionPointer));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * Reverts the list to its previously undone state."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void redo() throws NullRedoableActionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        if (!isRedoable()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new NullRedoableActionException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        versionPointer++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        resetData(historyList.get(versionPointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public boolean isUndoable() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return versionPointer \u003e 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public boolean isRedoable() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return versionPointer \u003c historyList.size() - 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private void clearUpToNow() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        historyList.subList(versionPointer + 1, historyList.size()).clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * Saves the current state of appointmentList and discards previous undone changes."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void saveState() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        clearUpToNow();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        historyList.add(new EngagementList(this));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        versionPointer++;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        if (!(other instanceof HistoryManager)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        HistoryManager otherStatedAppointmentList \u003d (HistoryManager) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return super.equals(otherStatedAppointmentList)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                \u0026\u0026 versionPointer \u003d\u003d otherStatedAppointmentList.versionPointer;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 71,
      "lyskevin": 11
    }
  },
  {
    "path": "src/main/java/com/typee/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.itextpdf.text.DocumentException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.logic.commands.exceptions.DeleteDocumentException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.logic.commands.exceptions.GenerateExistingReportException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.exceptions.NullRedoableActionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.exceptions.NullUndoableActionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.model.report.Report;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    Predicate\u003cEngagement\u003e PREDICATE_SHOW_ALL_ENGAGEMENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns the user prefs\u0027 engagement list file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    Path getEngagementListFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Sets the user prefs\u0027 engagement list file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    void setEngagementListFilePath(Path engagementListFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Replaces engagement list data with the data in {@code typee}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    void setHistoryManager(ReadOnlyEngagementList historyManager);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /** Returns the engagement list */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    ReadOnlyEngagementList getEngagementList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * REDUNDANT."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns true if the engagement is in the engagement list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    boolean hasEngagement(Engagement engagement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Deletes the given engagement."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * The engagement must exist in the engagement list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void deleteEngagement(Engagement target);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Adds the given engagement."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * {@code engagement} must not already exist in the engagement list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void addEngagement(Engagement engagement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Replaces the given engagement {@code target} with {@code editedEngagement}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * {@code target} must exist in the engagement list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * The engagement identity of {@code editedEngagement} must not be the same as"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * another existing engagement in the engagement list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void setEngagement(Engagement target, Engagement editedEngagement);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /** Returns an unmodifiable view of the filtered engagement list */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    ObservableList\u003cEngagement\u003e getFilteredEngagementList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Updates the filter of the filtered engagement list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void updateFilteredEngagementList(Predicate\u003cEngagement\u003e predicate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    void updateSortedEngagementList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    ObservableList\u003cEngagement\u003e getSortedEngagementList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    boolean hasNoUndoableCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void undoEngagementList() throws NullUndoableActionException;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    boolean hasNoRedoableCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void saveEngagementList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void redoEngagementList() throws NullRedoableActionException;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    void setComparator(Comparator\u003cEngagement\u003e comparator);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    Path saveReport(Path fileDir, Report report) throws DocumentException, IOException, GenerateExistingReportException;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean deleteReport(Path fileDir, Report report) throws DeleteDocumentException;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 25,
      "nordic96": 1,
      "brebeek": 17,
      "lyskevin": 14,
      "-": 63
    }
  },
  {
    "path": "src/main/java/com/typee/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.itextpdf.text.DocumentException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.commons.util.PdfUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.logic.commands.exceptions.DeleteDocumentException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.logic.commands.exceptions.GenerateExistingReportException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.exceptions.NullRedoableActionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.exceptions.NullUndoableActionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.model.report.Report;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Represents the in-memory model of the engagement list data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private final HistoryManager historyManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final FilteredList\u003cEngagement\u003e filteredEngagements;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private Comparator\u003cEngagement\u003e currentComparator;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Initializes a ModelManager with the given engagement list and userPrefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public ModelManager(ReadOnlyEngagementList engagementList, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        CollectionUtil.requireAllNonNull(engagementList, userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        logger.fine(\"Initializing with engagement list: \" + engagementList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.historyManager \u003d new HistoryManager(engagementList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        filteredEngagements \u003d new FilteredList\u003c\u003e(this.historyManager.getEngagementList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        currentComparator \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this(new EngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Path getEngagementListFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setEngagementListFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EngagementList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setHistoryManager(ReadOnlyEngagementList historyManager) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.historyManager.resetData(historyManager);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public ReadOnlyEngagementList getEngagementList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return historyManager;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean hasEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(engagement);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return historyManager.hasEngagement(engagement);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void deleteEngagement(Engagement target) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        historyManager.removeEngagement(target);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void addEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        historyManager.addEngagement(engagement);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        updateFilteredEngagementList(PREDICATE_SHOW_ALL_ENGAGEMENTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setEngagement(Engagement target, Engagement editedEngagement) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedEngagement);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        historyManager.setEngagement(target, editedEngagement);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Engagement List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Engagement} backed by the internal list of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * {@code typee}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public ObservableList\u003cEngagement\u003e getFilteredEngagementList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return filteredEngagements;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void updateFilteredEngagementList(Predicate\u003cEngagement\u003e predicate) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        filteredEngagements.setPredicate(predicate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Engagement List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void updateSortedEngagementList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            requireNonNull(currentComparator);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            historyManager.sort(currentComparator);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            // if no comparator is specified, does not sort"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * Returns an unmodifiable view of the sorted list of {@code Engagement} backed by the internal list of"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * {@code typee}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public ObservableList\u003cEngagement\u003e getSortedEngagementList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredEngagements);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Engagement List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void setComparator(Comparator\u003cEngagement\u003e comparator) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        this.currentComparator \u003d comparator;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public boolean hasNoUndoableCommand() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return !historyManager.isUndoable();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void undoEngagementList() throws NullUndoableActionException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        historyManager.undo();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public boolean hasNoRedoableCommand() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return !historyManager.isRedoable();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void redoEngagementList() throws NullRedoableActionException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        historyManager.redo();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path saveReport(Path fileDir, Report report) throws DocumentException, IOException,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            GenerateExistingReportException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        if (PdfUtil.checkIfDocumentExists(fileDir,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                report.getTo().getName().fullName,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                report.getFrom().getName().fullName,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                report.getEngagement().getTimeSlot().getStartTime(),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                report.getEngagement().getDescription())) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new GenerateExistingReportException();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            return PdfUtil.generateReport(fileDir, report);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean deleteReport(Path fileDir, Report report) throws DeleteDocumentException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        String to \u003d report.getTo().getName().fullName;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        String from \u003d report.getFrom().getName().fullName;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime start \u003d report.getEngagement().getTimeSlot().getStartTime();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        String desc \u003d report.getEngagement().getDescription();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isExisting \u003d PdfUtil.checkIfDocumentExists(fileDir, to, from, start, desc);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isExisting) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return PdfUtil.deleteDocument(fileDir, to, from, start, desc);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new DeleteDocumentException();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void saveEngagementList() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        historyManager.saveState();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return historyManager.equals(other.historyManager)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \u0026\u0026 filteredEngagements.equals(other.filteredEngagements);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 32,
      "nordic96": 4,
      "brebeek": 64,
      "lyskevin": 13,
      "-": 136
    }
  },
  {
    "path": "src/main/java/com/typee/model/ReadOnlyEngagementList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Unmodifiable view of an engagement list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public interface ReadOnlyEngagementList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns an unmodifiable view of the list of engagements."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * This list will not contain any duplicate engagements."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    ObservableList\u003cEngagement\u003e getEngagementList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the input {@code Engagement} clashes with an existing {@code Engagement}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param engagement input engagement."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if there is a conflict."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    boolean isConflictingEngagement(Engagement engagement);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 14,
      "nordic96": 1,
      "lyskevin": 2,
      "-": 8
    }
  },
  {
    "path": "src/main/java/com/typee/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/com/typee/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"typee.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path tabMenusFilePath \u003d Paths.get(\"data\", \"tabMenus.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getTabMenusFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tabMenusFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "lyskevin": 1,
      "-": 88
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/Appointment.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an {@code Appointment}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class Appointment extends Engagement {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected Appointment(TimeSlot timeSlot,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                      AttendeeList attendees, Location location, String description, Priority priority) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(timeSlot, attendees, location, description, priority);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.timeSlot \u003d timeSlot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.attendees \u003d attendees;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementType getType() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return EngagementType.APPOINTMENT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return String.format(\"Appointment of %s priority from %s to %s at %s.\", priority.toString(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                timeSlot.getStartTime().toString(), timeSlot.getEndTime().toString(), location.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 22,
      "lyskevin": 5
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/AttendeeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a list of people attending an engagement."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class AttendeeList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The List of attendees should be a list of persons separated\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" by vertical lines.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final List\u003cPerson\u003e attendees;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructs an {@code AttendeeList} given a {@code List} of attendees."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param attendees list of attendees."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public AttendeeList(List\u003cPerson\u003e attendees) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.attendees \u003d attendees;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if a {@code String} represents a valid {@code AttendeeList}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param string {@code String} representing an {@code AttendeeList}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the {@code String} is a valid representation of an {@code AttendeeList}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static boolean isValid(String string) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        final String stringWithoutBrackets \u003d string.substring(1, string.length() - 1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (stringWithoutBrackets.isBlank()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return areValidNames(stringWithoutBrackets);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if the list of people have valid names."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param stringWithoutBrackets {@code String} representing a list of people."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if all the names are valid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static boolean areValidNames(String stringWithoutBrackets) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (stringWithoutBrackets.isBlank()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return Arrays.stream(stringWithoutBrackets.split(\"\\\\|\\\\s*[^\\\\|]\"))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .map(person -\u003e person.trim())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .allMatch(name -\u003e Name.isValidName(name));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns an {@code AttendeeList} made from the given list of attendees."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Assumes that the given {@code String} is a valid representation of attendees."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param attendees {@code String} representation of attendees."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the corresponding {@code AttendeeList}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static AttendeeList getListGivenValidInput(String attendees) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        final String stringWithoutBrackets \u003d attendees.substring(1, attendees.length() - 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPerson\u003e listOfAttendees \u003d getListOfPeople(stringWithoutBrackets);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new AttendeeList(listOfAttendees);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns a list of people given a {@code String} input representing a list of people."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param stringWithoutBrackets {@code String} representation of a list of people."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return List of people."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static List\u003cPerson\u003e getListOfPeople(String stringWithoutBrackets) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return Arrays.stream(stringWithoutBrackets.split(\"\\\\|\"))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    .map(str -\u003e str.trim())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    .map(name -\u003e new Person(new Name(name)))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cPerson\u003e getAttendees() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return attendees;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns a copy of the {@code AttendeeList}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return {@code AttendeeList} with the same content."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public AttendeeList copy() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPerson\u003e copyOfAttendees \u003d attendees.stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .map(person -\u003e new Person(person.getName()))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new AttendeeList(copyOfAttendees);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return attendees.toString().replace(\",\", \" |\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // short-circuit"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (o instanceof AttendeeList) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            AttendeeList newAttendeeList \u003d (AttendeeList) o;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return attendees.equals(newAttendeeList.attendees);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return attendees.hashCode();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 116,
      "-": 3
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/Engagement.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.exceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a generalization of meetings, interviews and appointments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public abstract class Engagement {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME \u003d \"The end time has to occur after the start time.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected TimeSlot timeSlot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected AttendeeList attendees;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected Location location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected Priority priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructs an engagement."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param timeSlot time slot of the engagement."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param attendees list of people attending."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param location location of the engagement."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param description description of the engagement."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param priority priority level of the engagement."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected Engagement(TimeSlot timeSlot,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                         AttendeeList attendees, Location location, String description, Priority priority) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.timeSlot \u003d timeSlot;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.attendees \u003d attendees;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns a {@code Meeting}, {@code Interview}, or {@code Appointment} with the given fields."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param type type of engagement."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param timeSlot time slot."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param attendees list of people attending."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param location location of engagement."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param description description of the engagement."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param priority priority level of the engagement."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return an {@code Engagement} with the corresponding fields."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws InvalidTimeException if {@code LocalDateTime startTime} occurs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * after or during {@code LocalDateTime endTime}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static Engagement of(EngagementType type,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                TimeSlot timeSlot,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                AttendeeList attendees, Location location, String description,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                Priority priority) throws InvalidTimeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (timeSlot.isStartAfterEnd()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new InvalidTimeException(MESSAGE_INVALID_TIME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return makeEngagement(type, timeSlot, attendees, location, description, priority);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns a {@code Meeting}, {@code Interview}, or {@code Appointment} with the given fields."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param type type of engagement."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param timeSlot {@code TimeSlot} of the engagement."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param attendees list of people attending."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param location location of engagement."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param description description of the engagement."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param priority priority level of the engagement."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return an {@code Engagement} with the corresponding fields."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static Engagement makeEngagement(EngagementType type, TimeSlot timeSlot,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                             AttendeeList attendees, Location location,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                             String description, Priority priority) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (type.name().equalsIgnoreCase(\"meeting\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new Meeting(timeSlot, attendees, location, description, priority);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (type.name().equalsIgnoreCase(\"interview\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new Interview(timeSlot, attendees, location, description, priority);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new Appointment(timeSlot, attendees, location, description, priority);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if the start time occurs after or during the end time."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the start time is during or after the end time."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static boolean isStartAfterEnd(LocalDateTime startTime, LocalDateTime endTime) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return startTime.isAfter(endTime) || startTime.isEqual(endTime);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public TimeSlot getTimeSlot() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return timeSlot;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setTimeSlot(TimeSlot timeSlot) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(timeSlot);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.timeSlot \u003d timeSlot;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public AttendeeList getAttendees() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return attendees.copy();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setAttendees(AttendeeList attendees) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(attendees);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.attendees \u003d attendees;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public void setLocation(Location location) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public abstract EngagementType getType();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if this {@code Engagement} clashes with another one."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param engagement the {@code Engagement} to check for a clash."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if there is a clash."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isConflictingWith(Engagement engagement) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return EngagementConflictChecker.areConflicting(this, engagement);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // short-circuit."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (o instanceof Engagement) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // type-cast Object and check for field equality."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            Engagement otherEngagement \u003d (Engagement) o;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return isSameEngagement(otherEngagement);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if the given {@code Engagement} is logically equal to the caller {@code Engagement}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param otherEngagement {@code Engagement} to check equality with."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the engagements are equal."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public boolean isSameEngagement(Engagement otherEngagement) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        if (otherEngagement \u003d\u003d this) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return otherEngagement !\u003d null"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                \u0026\u0026 otherEngagement.location.equals(location)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \u0026\u0026 otherEngagement.attendees.equals(attendees)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \u0026\u0026 otherEngagement.description.equals(description)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \u0026\u0026 otherEngagement.timeSlot.equals(timeSlot)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                \u0026\u0026 otherEngagement.priority.equals(priority)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                \u0026\u0026 otherEngagement.getType().equals(this.getType());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return Objects.hash(timeSlot, location, description, attendees, priority);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 134,
      "nordic96": 45,
      "lyskevin": 11
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/EngagementConflictChecker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Helper class that helps to check if engagements are conflictingly scheduled."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class EngagementConflictChecker {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if the given {@code Engagement firstEngagement} clashes with {@code Engagement secondEngagement}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param firstEngagement first {@code Engagement}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param secondEngagement second {@code Engagement}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the engagements conflict."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static boolean areConflicting(Engagement firstEngagement, Engagement secondEngagement) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (areAtDifferentLocations(firstEngagement, secondEngagement)) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return haveTimeOverlap(firstEngagement.getTimeSlot(), secondEngagement.getTimeSlot());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if two engagements have a time overlap."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param firstTimeSlot first {@code TimeSlot}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param secondTimeSlot second {@code TimeSlot}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the times overlap."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static boolean haveTimeOverlap(TimeSlot firstTimeSlot, TimeSlot secondTimeSlot) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return firstTimeSlot.overlapsWith(secondTimeSlot);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if the given engagements are held at different locations"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param firstEngagement the first {@code Engagement}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param secondEngagement the second {@code Engagement}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the the engagements are held at different locations."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static boolean areAtDifferentLocations(Engagement firstEngagement, Engagement secondEngagement) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return !firstEngagement.getLocation().equals(secondEngagement.getLocation());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 45
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/EngagementPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Tests that an {@code Engagement}\u0027s attendee, or description, or location, or priority matches any of the keywords"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class EngagementPredicate implements Predicate\u003cEngagement\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private String timeSlot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private String attendees;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private String priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public EngagementPredicate() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Returns true when there are any edited time slot, attendees, location, description, or priority, and returns"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * otherwise."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public boolean hasEditedFields() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return timeSlot !\u003d null || attendees !\u003d null || location !\u003d null || description !\u003d null"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                || priority !\u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Specifies the timeSlot in the engagement predicate."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param timeSlot of the engagement."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public EngagementPredicate setTimeSlot(String timeSlot) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.timeSlot \u003d timeSlot;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Specifies the attendees in the engagement predicate."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param attendees of the engagement."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public EngagementPredicate setAttendees(String attendees) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.attendees \u003d attendees;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Specifies the location predicate in the engagement predicate."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param location of the engagement."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public EngagementPredicate setLocation(String location) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Specifies the description in the engagement predicate."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param description of the engagement."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public EngagementPredicate setDescription(String description) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Specifies the priority in the engagement predicate."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param priority of the engagement."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public EngagementPredicate setPriority(String priority) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public boolean test(Engagement engagement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (description !\u003d null"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                \u0026\u0026 !Arrays.stream(description.split(\"\\\\s+\"))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(engagement.getDescription(), keyword))) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (attendees !\u003d null"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                \u0026\u0026 !engagement.getAttendees().getAttendees().stream()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                .map(Person::getName).map(Name::toString).map(String::toLowerCase)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                .anyMatch(name -\u003e name.contains(attendees.toLowerCase()))) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (location !\u003d null \u0026\u0026 !engagement.getLocation().getLocation().equalsIgnoreCase(location)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (priority !\u003d null \u0026\u0026 !engagement.getPriority().toString().equalsIgnoreCase(priority)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                || (other instanceof EngagementPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                \u0026\u0026 (timeSlot \u003d\u003d null || timeSlot.equals(((EngagementPredicate) other).timeSlot))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                \u0026\u0026 (attendees \u003d\u003d null || attendees.equals(((EngagementPredicate) other).attendees))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                \u0026\u0026 (location \u003d\u003d null || location.equals(((EngagementPredicate) other).location))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                \u0026\u0026 (priority \u003d\u003d null || priority.equals(((EngagementPredicate) other).priority))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                \u0026\u0026 (description \u003d\u003d null || description.equals(((EngagementPredicate) other).description)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 120
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/EngagementType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the different types of {@code Engagements}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public enum EngagementType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    MEETING,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    INTERVIEW,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    APPOINTMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the possible values an {@code EngagementType} can assume."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return a {@code String} containing the permitted conformations."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static String getMessageConstraints() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return \"An engagement has to be one of meeting, interview or appointment.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if a {@code String} represents a valid {@code EngagementType}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param string {@code String} to be checked for validity."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if {@String string} is a valid {@code EngagementType}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static boolean isValid(String string) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return string.equalsIgnoreCase(\"meeting\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || string.equalsIgnoreCase(\"interview\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || string.equalsIgnoreCase(\"appointment\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns an {@code EngagementType} constructed from the input string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param engagementType {@code String} representing an {@code EngagementType}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the corresponding {@code EngagementType}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws IllegalArgumentException if {@code String engagementType} is not a valid {@code EngagementType}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static EngagementType of(String engagementType) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (engagementType.equalsIgnoreCase(EngagementType.MEETING.name())) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return EngagementType.MEETING;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (engagementType.equalsIgnoreCase(EngagementType.INTERVIEW.name())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return EngagementType.INTERVIEW;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (engagementType.equalsIgnoreCase(EngagementType.APPOINTMENT.name())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return EngagementType.APPOINTMENT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 49
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/Interview.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an {@code Interview}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class Interview extends Engagement {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected Interview(TimeSlot timeSlot,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                      AttendeeList attendees, Location location, String description, Priority priority) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(timeSlot, attendees, location, description, priority);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.timeSlot \u003d timeSlot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.attendees \u003d attendees;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementType getType() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return EngagementType.INTERVIEW;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return String.format(\"Interview of %s priority from %s to %s at %s.\", priority.toString(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                timeSlot.getStartTime().toString(), timeSlot.getEndTime().toString(), location.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 22,
      "lyskevin": 5
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/Location.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the location of an engagement."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Locations cannot be blank.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructs a {@code Location}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Retrieves the location of the engagement."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return location in the form of a {@code String}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String getLocation() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Sets the location to the input location."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param location a valid location."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setLocation(String location) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the {@code Location} name is valid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param string {@code String} to be checked."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the {@code String} is a valid {@code Location}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static boolean isValid(String string) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return !string.isBlank();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // short-circuit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (o instanceof Location) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // check if objects represent the same locations."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return location.equalsIgnoreCase(((Location) o).location);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return Objects.hash(location);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 73
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/Meeting.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a {@code Meeting}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class Meeting extends Engagement {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected Meeting(TimeSlot timeSlot,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                      AttendeeList attendees, Location location, String description, Priority priority) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(timeSlot, attendees, location, description, priority);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.timeSlot \u003d timeSlot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.attendees \u003d attendees;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementType getType() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return EngagementType.MEETING;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return String.format(\"Meeting of %s priority from %s to %s at %s.\", priority.toString(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                timeSlot.getStartTime().toString(), timeSlot.getEndTime().toString(), location.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 23,
      "lyskevin": 5
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/Priority.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Enumeration for prioritising the Engagement class"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    LOW,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    MEDIUM,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    HIGH,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    NONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Priority can only be low, medium, high or none!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the corresponding {@code Priority} value from the input {@code String}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param priority {@code String} representing priority."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the corresponding {@code Priority}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws IllegalArgumentException if the {@String priority} is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static Priority of(String priority) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (priority.equalsIgnoreCase(Priority.LOW.name())) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return Priority.LOW;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (priority.equalsIgnoreCase(Priority.MEDIUM.name())) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return Priority.MEDIUM;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (priority.equalsIgnoreCase(Priority.HIGH.name())) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return Priority.HIGH;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (priority.equalsIgnoreCase(Priority.NONE.name())) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return Priority.NONE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Checks if the {@code String string} is a valid priority level."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param string priority level."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the {@code String string} represents a valid priority level."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static boolean isValid(String string) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return string.equalsIgnoreCase(\"low\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || string.equalsIgnoreCase(\"medium\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || string.equalsIgnoreCase(\"high\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || string.equalsIgnoreCase(\"none\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the constraints that a {@code String} representing a {@code Priority} should adhere to."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return constraint message."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static String getMessageConstraints() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 55
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/TimeSlot.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents the time slot during which an engagement is held."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class TimeSlot {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The start and end times should conform to the DD/MM/YYYY HHMM\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" format. The dates and times must be semantically valid and\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            + \" the start time should occur before the end time\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_NON_NULL_CONSTRAINT \u003d \"%s should be non-null.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private LocalDateTime startTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private LocalDateTime endTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructs a {@code TimeSlot} from a given {@code LocalDateTime startTime}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * and {@code LocalDateTime endTime}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param startTime starting time of the time slot."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param endTime ending time of the time slot."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public TimeSlot(LocalDateTime startTime, LocalDateTime endTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assert startTime !\u003d null \u0026\u0026 endTime !\u003d null : String.format(MESSAGE_NON_NULL_CONSTRAINT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \"The start and end times\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns a {@code TimeSlot} constructed from a {@code String}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param timeSlot String representation of the time-slot."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return a {@code TimeSlot}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static TimeSlot of(String timeSlot) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String[] tokens \u003d tokenize(timeSlot);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        TimeSlot newTimeSlot \u003d makeTimeSlotFromTokens(tokens);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return newTimeSlot;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public LocalDateTime getStartTime() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setStartTime(LocalDateTime startTime) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assert startTime !\u003d null : String.format(MESSAGE_NON_NULL_CONSTRAINT, \"The start time\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public LocalDateTime getEndTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setEndTime(LocalDateTime endTime) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assert endTime !\u003d null : String.format(MESSAGE_NON_NULL_CONSTRAINT, \"The end time\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the start occurs simultaneously with the end, or after the end."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return false if start is before end."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean isStartAfterEnd() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return startTime.isAfter(endTime) || startTime.equals(endTime);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the {@code TimeSlot} overlaps with the input {@code TimeSlot}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param timeSlot timeSlot to check overlap with."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if there is an overlap."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean overlapsWith(TimeSlot timeSlot) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (this.getStartTime().isBefore(timeSlot.getStartTime())) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return this.getEndTime().isAfter(timeSlot.getStartTime());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (timeSlot.getStartTime().isBefore(this.getStartTime())) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return timeSlot.getEndTime().isAfter(this.getStartTime());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns true if the {@code String} representation of a {@code TimeSlot} is valid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param timeSlot {@code String} representation of a {@code TimeSlot}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return true if the string form is valid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static boolean isValid(String timeSlot) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            String[] tokens \u003d tokenize(timeSlot);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            TimeSlot newTimeSlot \u003d makeTimeSlotFromTokens(tokens);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return !newTimeSlot.startTime.isAfter(newTimeSlot.endTime);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (DateTimeException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns a {@code TimeSlot} constructed from {@code String} tokens."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param tokens String tokens containing start and end times."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the corresponding {@code TimeSlot}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws DateTimeException if the times are invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static TimeSlot makeTimeSlotFromTokens(String[] tokens) throws DateTimeException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd/HH:mm\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDateTime startTime \u003d LocalDateTime.parse(tokens[0].replace(\"T\", \"/\"), formatter);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDateTime endTime \u003d LocalDateTime.parse(tokens[1].replace(\"T\", \"/\"), formatter);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new TimeSlot(startTime, endTime);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static String[] tokenize(String timeSlot) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return timeSlot.split(\" - \");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return startTime.toString() + \" - \" + endTime.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // short-circuit"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else if (o instanceof TimeSlot) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            TimeSlot newTimeSlot \u003d (TimeSlot) o;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return newTimeSlot.startTime.equals(startTime) \u0026\u0026 newTimeSlot.endTime.equals(endTime);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return Objects.hash(startTime, endTime);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 140
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/UniqueEngagementList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.exceptions.DuplicateEngagementException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.exceptions.EngagementNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * A list of engagements that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * An engagement is considered unique by comparing using {@code Engagement#isSameEngagement(Engagement)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * As such, adding and updating of engagements uses {@code Engagement#isSameEngagement(Engagement)}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * for equality so as to ensure that the engagement being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * unique in terms of details in the UniqueEngagementList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * However, the removal of an engagement uses Engagement#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * as to ensure that the engagement with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * @see Engagement#isSameEngagement(Engagement)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class UniqueEngagementList\u003cE\u003e implements Iterable\u003cEngagement\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final ObservableList\u003cEngagement\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final ObservableList\u003cEngagement\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns true if the list contains an equivalent engagement as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public boolean contains(Engagement toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isConflictingWith);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Adds an engagement to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * The engagement must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void add(Engagement toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            throw new DuplicateEngagementException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Replaces the engagement {@code target} in the list with {@code editedEngagement}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * The details of {@code editedEngagement} must not be the same as another existing engagement in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setEngagement(Engagement target, Engagement editedEngagement) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedEngagement);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            throw new EngagementNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!target.isConflictingWith(editedEngagement) \u0026\u0026 contains(editedEngagement)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            throw new DuplicateEngagementException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        internalList.set(index, editedEngagement);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Removes the equivalent engagement from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * The engagement must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void remove(Engagement toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            throw new EngagementNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void setEngagements(UniqueEngagementList\u003cE\u003e replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Replaces the contents of this list with {@code engagements}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * {@code engagements} must not contain duplicate engagements."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public void setEngagements(List\u003cEngagement\u003e engagements) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        CollectionUtil.requireAllNonNull(engagements);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!engagementsAreUnique(engagements)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            throw new DuplicateEngagementException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        internalList.setAll(engagements);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public ObservableList\u003cEngagement\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Iterator\u003cEngagement\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                || (other instanceof UniqueEngagementList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueEngagementList\u003cE\u003e) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns true if {@code engagements} contains only unique engagements."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private boolean engagementsAreUnique(List\u003cEngagement\u003e engagements) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        for (int i \u003d 0; i \u003c engagements.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            for (int j \u003d i + 1; j \u003c engagements.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                if (engagements.get(i).isConflictingWith(engagements.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 27,
      "nordic96": 1,
      "brebeek": 3,
      "lyskevin": 25,
      "-": 83
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/exceptions/DuplicateEngagementException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.model.engagement.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Signals that the operation will result in duplicate Engagements"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * (Engagements are considered duplicates if they have the same fields)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class DuplicateEngagementException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public DuplicateEngagementException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        super(\"Operation would result in duplicate engagements\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 11
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/exceptions/EngagementNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.model.engagement.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Signals that the operation is unable to find the specified engagement."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class EngagementNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 6
    }
  },
  {
    "path": "src/main/java/com/typee/model/engagement/exceptions/InvalidTimeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.model.engagement.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents an exceptional situation in which an engagement\u0027s start time occurs after or during its end time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class InvalidTimeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Constructs an {@code InvalidTimeException}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param message error message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public InvalidTimeException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 16
    }
  },
  {
    "path": "src/main/java/com/typee/model/person/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.AppUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Represents a Person\u0027s name in an engagement."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        AppUtil.checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (test.isBlank()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 3,
      "nordic96": 4,
      "brebeek": 1,
      "-": 55
    }
  },
  {
    "path": "src/main/java/com/typee/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Represents a Person in an engagement."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public Person(Name name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CollectionUtil.requireAllNonNull(name);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 5,
      "nordic96": 4,
      "brebeek": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/com/typee/model/person/exceptions/DuplicatePersonException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/com/typee/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/com/typee/model/report/Report.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Report class which contains the Engagement"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "public class Report {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Engagement engagement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person to;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person from;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public Report(Engagement engagement, Person to, Person from) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.engagement \u003d engagement;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Engagement getEngagement() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return engagement;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.engagement \u003d engagement;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person getTo() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return to;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTo(Person to) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person getFrom() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return from;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFrom(Person from) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getFilePath() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFilePath(Path filePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 1,
      "nordic96": 6,
      "-": 47
    }
  },
  {
    "path": "src/main/java/com/typee/model/util/EngagementComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Specifies and implements comparators for each comparable property of {@code Engagement}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public enum EngagementComparator implements Comparator\u003cEngagement\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    START_TIME {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public final int compare(final Engagement o1, final Engagement o2) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return o1.getTimeSlot().getStartTime().compareTo(o2.getTimeSlot().getStartTime());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    START_TIME_REVERSE {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public final int compare(final Engagement o1, final Engagement o2) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return START_TIME.compare(o2, o1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    END_TIME {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public final int compare(final Engagement o1, final Engagement o2) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return o1.getTimeSlot().getEndTime().compareTo(o2.getTimeSlot().getEndTime());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    END_TIME_REVERSE {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public final int compare(final Engagement o1, final Engagement o2) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return END_TIME.compare(o2, o1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    ALPHABETICAL {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public final int compare(final Engagement o1, final Engagement o2) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return o1.getDescription().compareTo(o2.getDescription());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    ALPHABETICAL_REVERSE {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public final int compare(final Engagement o1, final Engagement o2) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return ALPHABETICAL.compare(o2, o1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    PRIORITY {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public final int compare(final Engagement o1, final Engagement o2) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return o1.getPriority().compareTo(o2.getPriority());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    },"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    PRIORITY_REVERSE {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public final int compare(final Engagement o1, final Engagement o2) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return PRIORITY.compare(o2, o1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    };"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MESSAGE_PROPERTY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            \"Please enter a proper ordering method. Please try: e.g. sort start ascending\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static EngagementComparator getComparator(String order)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throws IllegalArgumentException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return EngagementComparator.valueOf(order.toUpperCase());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 2,
      "brebeek": 66
    }
  },
  {
    "path": "src/main/java/com/typee/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.EngagementList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.AttendeeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.EngagementType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.TimeSlot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.exceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Contains utility methods for populating {@code EngagementList} with sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static Engagement[] getSampleEngagements() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new Engagement[]{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    Engagement.of(EngagementType.MEETING,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                            new TimeSlot("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                    LocalDateTime.of(2019, Month.NOVEMBER, 12, 15, 0),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                    LocalDateTime.of(2019, Month.NOVEMBER, 12, 17, 0)),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                            new AttendeeList(Arrays.asList(new Person[]{new Person(new Name(\"Uggi\"))})),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                            new Location(\"SR-10\"), \"Test\", Priority.HIGH)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (InvalidTimeException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return new Engagement[] {};"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static ReadOnlyEngagementList getSampleEngagementList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementList sampleEngagementList \u003d new EngagementList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        for (Engagement sampleEngagement : getSampleEngagements()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            sampleEngagementList.addEngagement(sampleEngagement);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return sampleEngagementList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 24,
      "nordic96": 3,
      "lyskevin": 7,
      "-": 11
    }
  },
  {
    "path": "src/main/java/com/typee/storage/EngagementListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.EngagementList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Represents a storage for {@link EngagementList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public interface EngagementListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    Path getEngagementListFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns EngagementList data as a {@link ReadOnlyEngagementList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    Optional\u003cReadOnlyEngagementList\u003e readEngagementList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @see #getEngagementListFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    Optional\u003cReadOnlyEngagementList\u003e readEngagementList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Saves the given {@link ReadOnlyEngagementList} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @param engagementList cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    void saveEngagementList(ReadOnlyEngagementList engagementList) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @see #saveEngagementList(ReadOnlyEngagementList) (ReadOnlyEngagementList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    void saveEngagementList(ReadOnlyEngagementList engagementList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 46
    }
  },
  {
    "path": "src/main/java/com/typee/storage/JsonAdaptedEngagement.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.AttendeeList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.EngagementType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.TimeSlot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.exceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": " * Jackson-friendly version of {@link Engagement}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "class JsonAdaptedEngagement {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Engagement\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final String EMPTY_LIST \u003d \"[]\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String MESSAGE_DESCRIPTION_CONSTRAINTS \u003d \"Description cannot be blank!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final String engagementType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final String timeSlot;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final String attendees;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Constructs a {@code JsonAdaptedEngagement} with the given person details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public JsonAdaptedEngagement(@JsonProperty(\"type\") String type, @JsonProperty(\"timeSlot\") String timeSlot,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                 @JsonProperty(\"location\") String location,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                 @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                 @JsonProperty(\"attendees\") String attendees,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                                 @JsonProperty(\"priority\") String priority) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.engagementType \u003d type;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.timeSlot \u003d timeSlot;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.attendees \u003d attendees;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * Converts a given {@code Engagement} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public JsonAdaptedEngagement(Engagement source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        engagementType \u003d source.getClass().getSimpleName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        timeSlot \u003d source.getTimeSlot().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        location \u003d source.getLocation().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        attendees \u003d source.getAttendees().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        priority \u003d source.getPriority().name();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * Converts this Jackson-friendly adapted engagement object into the model\u0027s {@code Engagement} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted engagement."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public Engagement toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        final EngagementType modelType \u003d validateAndGetEngagementType();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        final TimeSlot modelTimeSlot \u003d validateAndGetTimeSlot();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        final Location modelLocation \u003d validateAndGetLocation();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        final AttendeeList modelAttendees \u003d validateAndGetAttendees();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        final Priority modelPriority \u003d validateAndGetPriority();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        final String modelDescription \u003d validateAndGetDescription();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return Engagement.of(modelType, modelTimeSlot,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    modelAttendees, modelLocation, modelDescription, modelPriority);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (InvalidTimeException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(e.getMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the description of an {@code Engagement} following validation."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return description."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private String validateAndGetDescription() throws IllegalValueException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    String.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the {@code Priority} of an {@code Engagement} following validation."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the {@code Priority}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws IllegalValueException if the json\u0027s priority field is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Priority validateAndGetPriority() throws IllegalValueException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!Priority.isValid(priority)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(Priority.getMessageConstraints());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return Priority.of(priority);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the {@code AttendeeList} of an {@code Engagement} following validation."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the {@code AttendeeList}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws IllegalValueException if the json\u0027s attendees field is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private AttendeeList validateAndGetAttendees() throws IllegalValueException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (attendees \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    AttendeeList.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!AttendeeList.isValid(attendees)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    AttendeeList.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return AttendeeList.getListGivenValidInput(attendees);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the {@code Location} of an {@code Engagement} following validation."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the {@code Location} of the {@code Engagement}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws IllegalValueException if the json\u0027s location field is invalid."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Location validateAndGetLocation() throws IllegalValueException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!Location.isValid(location)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return new Location(location);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the {@code EngagementType} of an {@code Engagement} following validation."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the {@code EngagementType}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws IllegalValueException if the json\u0027s engagementType field is invalid."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private EngagementType validateAndGetEngagementType() throws IllegalValueException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (engagementType \u003d\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    EngagementType.class.getSimpleName()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!EngagementType.isValid(engagementType)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(EngagementType.getMessageConstraints());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return EngagementType.of(engagementType);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns the {@code TimeSlot} of an {@code Engagement} following validation."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return the {@code TimeSlot}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @throws IllegalValueException if the times are invalid."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private TimeSlot validateAndGetTimeSlot() throws IllegalValueException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (timeSlot \u003d\u003d null) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    TimeSlot.class.getSimpleName()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        if (!TimeSlot.isValid(timeSlot)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            throw new IllegalValueException(TimeSlot.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return TimeSlot.of(timeSlot);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 147,
      "nordic96": 2,
      "brebeek": 7,
      "lyskevin": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/com/typee/storage/JsonEngagementListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * A class to access EngagementList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class JsonEngagementListStorage implements EngagementListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonEngagementListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public JsonEngagementListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Path getEngagementListFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Optional\u003cReadOnlyEngagementList\u003e readEngagementList() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return readEngagementList(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Similar to {@link #readEngagementList()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Optional\u003cReadOnlyEngagementList\u003e readEngagementList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Optional\u003cJsonSerializableEngagementList\u003e jsonEngagementList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                filePath, JsonSerializableEngagementList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        if (!jsonEngagementList.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return Optional.of(jsonEngagementList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void saveEngagementList(ReadOnlyEngagementList engagementList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        saveEngagementList(engagementList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Similar to {@link #saveEngagementList(ReadOnlyEngagementList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void saveEngagementList(ReadOnlyEngagementList engagementList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        requireNonNull(engagementList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableEngagementList(engagementList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 6,
      "lyskevin": 20,
      "-": 54
    }
  },
  {
    "path": "src/main/java/com/typee/storage/JsonSerializableEngagementList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.EngagementList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * An Immutable EngagementList that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "class JsonSerializableEngagementList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENGAGEMENT \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            \"Engagements list contains duplicate engagements(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private final List\u003cJsonAdaptedEngagement\u003e engagements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Constructs a {@code JsonSerializableEngagementList} with the given engagements."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public JsonSerializableEngagementList(@JsonProperty(\"engagements\") List\u003cJsonAdaptedEngagement\u003e engagements) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.engagements.addAll(engagements);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Converts a given {@code ReadOnlyEngagementList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableEngagementList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public JsonSerializableEngagementList(ReadOnlyEngagementList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagements.addAll(source.getEngagementList().stream().map(JsonAdaptedEngagement::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * Converts this engagement list into the model\u0027s {@code EngagementList} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementList engagementList \u003d new EngagementList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        for (JsonAdaptedEngagement jsonAdaptedEngagement : engagements) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            Engagement engagement \u003d jsonAdaptedEngagement.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            if (engagementList.hasEngagement(engagement)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ENGAGEMENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            engagementList.addEngagement(engagement);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return engagementList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 2,
      "lyskevin": 59
    }
  },
  {
    "path": "src/main/java/com/typee/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/com/typee/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.ui.Tab;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public interface Storage extends EngagementListStorage, TypeeStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    Path getEngagementListFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    Optional\u003cReadOnlyEngagementList\u003e readEngagementList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    void saveEngagementList(ReadOnlyEngagementList engagementList) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cTab\u003e getTabList() throws DataConversionException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 4,
      "lyskevin": 5,
      "-": 28
    }
  },
  {
    "path": "src/main/java/com/typee/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.ui.Tab;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Manages storage of EngagementList data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private EngagementListStorage engagementListStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    //Adding TypeeStorage unit"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypeeStorage typeeStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public StorageManager(EngagementListStorage engagementListStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.engagementListStorage \u003d engagementListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public StorageManager(EngagementListStorage engagementListStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                          TypeeStorage typeeStorage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.engagementListStorage \u003d engagementListStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.typeeStorage \u003d typeeStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EngagementList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Path getEngagementListFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return engagementListStorage.getEngagementListFilePath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Optional\u003cReadOnlyEngagementList\u003e readEngagementList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return readEngagementList(engagementListStorage.getEngagementListFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Optional\u003cReadOnlyEngagementList\u003e readEngagementList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return engagementListStorage.readEngagementList(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void saveEngagementList(ReadOnlyEngagementList engagementList) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        saveEngagementList(engagementList, engagementListStorage.getEngagementListFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void saveEngagementList(ReadOnlyEngagementList engagementList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementListStorage.saveEngagementList(engagementList, filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TYPEE methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTab\u003e getTabList() throws DataConversionException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Fetching tab list data from text file.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return typeeStorage.getTabList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 5,
      "brebeek": 1,
      "lyskevin": 18,
      "-": 72
    }
  },
  {
    "path": "src/main/java/com/typee/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/com/typee/ui/AppointmentWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": " * Controller class for Appointment Window"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "public class AppointmentWindow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public static final String FXML \u003d \"EngagementListPanel.fxml\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public AppointmentWindow() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 14
    }
  },
  {
    "path": "src/main/java/com/typee/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.Logic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nordic96"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 1,
      "nordic96": 5,
      "-": 75
    }
  },
  {
    "path": "src/main/java/com/typee/ui/EngagementCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * An UI component that displays information of an {@code Engagement}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "public class EngagementCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final String FXML \u003d \"EngagementCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on EngagementList level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public final Engagement engagement;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Label type;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Label endTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Label locationOfEngagement;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private Label attendees;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public EngagementCard(Engagement engagement, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.engagement \u003d engagement;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        type.setText(engagement.getClass().getSimpleName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        startTime.setText(engagement.getTimeSlot().getStartTime().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        endTime.setText(engagement.getTimeSlot().getEndTime().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        locationOfEngagement.setText(engagement.getLocation().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        priority.setText(engagement.getPriority().name());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        attendees.setText(engagement.getAttendees().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        description.setText(engagement.getDescription());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        if (!(other instanceof EngagementCard)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        EngagementCard card \u003d (EngagementCard) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \u0026\u0026 engagement.equals(card.engagement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 25,
      "nordic96": 5,
      "lyskevin": 3,
      "-": 43
    }
  },
  {
    "path": "src/main/java/com/typee/ui/EngagementListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": "public class EngagementListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public static final String FXML \u003d \"EngagementListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(EngagementListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private ListView\u003cEngagement\u003e engagementListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public EngagementListPanel(ObservableList\u003cEngagement\u003e engagementList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        engagementListView.setItems(engagementList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        engagementListView.setCellFactory(listView -\u003e new EngagementListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of an {@code Engagement} using an {@code EngagementCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    class EngagementListViewCell extends ListCell\u003cEngagement\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        protected void updateItem(Engagement engagement, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            super.updateItem(engagement, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            if (empty || engagement \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                setGraphic(new EngagementCard(engagement, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 8,
      "nordic96": 10,
      "lyskevin": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/com/typee/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            \"https://github.com/AY1920S1-CS2103T-F14-3/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 3,
      "brebeek": 2,
      "-": 99
    }
  },
  {
    "path": "src/main/java/com/typee/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.commons.util.PdfUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.CalendarCloseDisplayCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.CalendarNextMonthCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.CalendarOpenDisplayCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.CalendarPreviousMonthCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.logic.commands.TabCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.ui.calendar.CalendarWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.ui.calendar.exceptions.CalendarCloseDisplayException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.ui.game.StartWindow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.ui.report.ReportWindow;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private EngagementListPanel engagementListPanel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    //Tab related attributes."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cTab\u003e tabList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private Tab currentTab;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane tabPanelPlaceHolder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private TabPane menuTabPane;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox mainWindow;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label lblWindowTitle;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure tab list generated from json"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tabList \u003d logic.getTabList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        currentTab \u003d new Tab(\"Engagement\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        currentTab.setController(new EngagementListPanel(logic.getFilteredEngagementList()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() throws DataConversionException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        lblWindowTitle.setText(\"Engagement Window\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        engagementListPanel \u003d new EngagementListPanel(logic.getFilteredEngagementList());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        mainWindow.getChildren().add(engagementListPanel.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        prepareTabMenuList(menuTabPane);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getEngagementListFilePath());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void handleExit() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        currentTab.getController().handleExit();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Switch the window to the {@code Tab} specified."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * @@author nordic96"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private void handleTabSwitch(Tab tabInput) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        currentTab.getController().handleExit();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        logger.info(tabInput.toString());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Parent root \u003d tabInput.getController().getRoot();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        mainWindow.getChildren().clear();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        mainWindow.getChildren().add(root);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        lblWindowTitle.setText(tabInput.getName() + \" Window\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        currentTab \u003d tabInput;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        menuTabPane.getTabs().stream()"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                .filter(tab -\u003e tab.getText().equals(tabInput.getName()))"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                .forEach(tab -\u003e menuTabPane.getSelectionModel().select(tab));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * Handles the calendar interaction represented by the specified {@code CommandResult}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * @param commandResult The specified {@code CommandResult}."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private void handleCalendarInteraction(CommandResult commandResult) throws CommandException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        if (currentTab \u003d\u003d null || !(currentTab.getController() instanceof CalendarWindow)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            throw new CommandException(\"Calendar commands can only be used in the calendar window.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CalendarWindow calendarWindow \u003d (CalendarWindow) currentTab.getController();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        String calendarCommandType \u003d commandResult.getCalendarCommandType();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        switch (calendarCommandType) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        case CalendarOpenDisplayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            calendarWindow.openSingleDayEngagementsDisplayWindow(commandResult.getCalendarDate());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        case CalendarCloseDisplayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                calendarWindow.closeSingleDayEngagementsDisplayWindow(commandResult.getCalendarDate());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            } catch (CalendarCloseDisplayException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        case CalendarNextMonthCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            calendarWindow.populateCalendarWithNextMonth();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        case CalendarPreviousMonthCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            calendarWindow.populateCalendarWithPreviousMonth();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            throw new CommandException(\"Invalid calendar command.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private void handlePdf(Path docPath) throws IOException {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        PdfUtil.openDocument(docPath);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            if (commandResult.isTabCommand()) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                Tab tab \u003d commandResult.getTab();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                handleTabSwitch(fetchTabInformation(tab.getName()));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            if (commandResult.isCalendarCommand()) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                handleCalendarInteraction(commandResult);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            if (commandResult.isPdfCommand()) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                handlePdf(commandResult.getDocPath());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * Fetches tab information from the tab menu list to the tab retrieved after {@code TabCommand}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * @@author nordic96"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private Tab fetchTabInformation(String tabName) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Tab tabToReturn \u003d new Tab();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        for (Tab tabInList : tabList) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            if (tabInList.getName().equals(tabName)) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                tabToReturn \u003d tabInList;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                logger.info(\"tab matches: \" + tabToReturn);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        switch (tabName) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        case \"Calendar\":"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            tabToReturn.setController(new CalendarWindow(logic.getFilteredEngagementList()));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        case \"TypingGame\":"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            tabToReturn.setController(new StartWindow());"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        case \"Report\":"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            tabToReturn.setController(new ReportWindow(logic.getSortedEngagementList()));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        case \"Engagement\":"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            tabToReturn.setController(new EngagementListPanel(logic.getFilteredEngagementList()));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        logger.info(\"tab after fetch: \" + tabToReturn);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        return tabToReturn;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * Populates tabListView with {@code ObservableList\u003cTab\u003e}."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     * @@author nordic96"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private void prepareTabMenuList(TabPane menuTabPane) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        menuTabPane.setTabClosingPolicy(TabPane.TabClosingPolicy.UNAVAILABLE);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        tabList.stream()"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                .forEach(x -\u003e {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                    javafx.scene.control.Tab tab \u003d new javafx.scene.control.Tab(x.getName());"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                    menuTabPane.getTabs().addAll(tab);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                });"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        menuTabPane.setOnMouseClicked(new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            public void handle(MouseEvent event) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                Tab selectedTab \u003d new Tab(menuTabPane.getSelectionModel().getSelectedItem().getText());"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                assert selectedTab !\u003d null;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                logger.info(\"tab: \" + selectedTab.getName() + \" selected.\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                selectedTab \u003d fetchTabInformation(selectedTab.getName());"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                handleTabSwitch(selectedTab);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                resultDisplay.setFeedbackToUser(TabCommand.MESSAGE_SUCCESS + selectedTab.getName());"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        });"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 1,
      "uggi121": 11,
      "nordic96": 160,
      "brebeek": 1,
      "lyskevin": 13,
      "-": 175
    }
  },
  {
    "path": "src/main/java/com/typee/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/com/typee/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/com/typee/ui/Tab.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Tab component for Typee Ui."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tab {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private String url;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private UiPart\u003cRegion\u003e controller;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tab() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tab(String name) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public Tab(String name, String url, UiPart\u003cRegion\u003e controller) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.controller \u003d controller;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getUrl() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return url;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUrl(String url) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public UiPart\u003cRegion\u003e getController() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        return controller;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public void setController(UiPart\u003cRegion\u003e controller) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        this.controller \u003d controller;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        return name + \":(\" + url + \") controller: \" + controller;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } else if (!(other instanceof Tab)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            Tab otherTab \u003d (Tab) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return name.equals(otherTab.name)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    \u0026\u0026 url.equals(otherTab.url)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    \u0026\u0026 controller.equals(otherTab.controller);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 18,
      "lyskevin": 14,
      "-": 36
    }
  },
  {
    "path": "src/main/java/com/typee/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/com/typee/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/typee_icon.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 6,
      "-": 81
    }
  },
  {
    "path": "src/main/java/com/typee/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Handles any exit operations, if applicable."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void handleExit() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "lyskevin": 7,
      "-": 87
    }
  },
  {
    "path": "src/main/java/com/typee/ui/calendar/CalendarDateCell.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Represents a calendar date cell in the calendar window."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class CalendarDateCell extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final String FXML \u003d \"CalendarDateCell.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private StackPane calendarDateStackPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private ObservableList\u003cEngagement\u003e engagements;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private SingleDayEngagementsDisplayWindow engagementsDisplayWindow;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Constructs a calendar date cell."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public CalendarDateCell() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagements \u003d FXCollections.observableList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementsDisplayWindow \u003d new SingleDayEngagementsDisplayWindow(engagements);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns the {@code StackPane} that is used to mount this {@code CalendarDateCell}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @return The {@code StackPane} that is used to mount this {@code CalendarDateCell}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public StackPane getCalendarDateStackPane() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return calendarDateStackPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Adds the specified engagement to this {@code CalendarDateCell}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @param engagement The specified engagement."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void addEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagements.add(engagement);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Clears all engagements from this {@code CalendarDateCell}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void clearEngagements() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagements.clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns the number of engagements in this {@code CalendarDateCell}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @return The number of engagements in this {@code CalendarDateCell}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public int getNumberOfEngagements() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return engagements.size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Sets the date of this {@code CalendarDateCell} to the specified date."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @param date The specified date."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementsDisplayWindow.setDate(date);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns the date of this {@code CalendarDateCell}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @return The date of this {@code CalendarDateCell}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Closes the displayed engagements list if it is opened."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void closeDisplayedEngagements() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementsDisplayWindow.hide();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Displays the engagements for the day represented by this {@code CalendarDateCell}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void displayEngagements() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        if (!engagementsDisplayWindow.isShowing()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            engagementsDisplayWindow.show();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            engagementsDisplayWindow.focus();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns true if this calendar date cell has an open engagements display window."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @return True if this calendar date cell has an open engagements display window."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public boolean hasOpenEngagementsDisplay() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return engagementsDisplayWindow.isShowing();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 122
    }
  },
  {
    "path": "src/main/java/com/typee/ui/calendar/CalendarWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.util.DateUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.TimeSlot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.ui.UiPart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.ui.calendar.exceptions.CalendarCloseDisplayException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * The calendar window."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Solution below adapted from https://github.com/SirGoose3432/javafx-calendar"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class CalendarWindow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String FXML \u003d \"CalendarWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int FIRST_DATE_OF_MONTH \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int MAXIMUM_NUMBER_OF_WEEKS_PER_MONTH \u003d 5;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int NUMBER_OF_DAYS_IN_A_WEEK \u003d 7;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private GridPane dateDisplayGrid;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private Text calendarTitle;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private List\u003cCalendarDateCell\u003e calendarDateCells;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private ObservableList\u003cEngagement\u003e engagements;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private YearMonth currentDisplayedYearMonth;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Constructs a calendar window with the current month as reference."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public CalendarWindow(ObservableList\u003cEngagement\u003e engagements) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        calendarDateCells \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.engagements \u003d engagements;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagements.addListener((ListChangeListener\u003c? super Engagement\u003e) change -\u003e populateCalendar());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        currentDisplayedYearMonth \u003d YearMonth.now();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        initializeUiDisplay();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        populateCalendar();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Initializes the UI elements of the calendar window to be displayed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private void initializeUiDisplay() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        for (int i \u003d 0; i \u003c MAXIMUM_NUMBER_OF_WEEKS_PER_MONTH; i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            for (int j \u003d 0; j \u003c NUMBER_OF_DAYS_IN_A_WEEK; j++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                CalendarDateCell calendarDateCell \u003d new CalendarDateCell();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                calendarDateCells.add(calendarDateCell);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                StackPane calendarDateStackPane \u003d calendarDateCell.getCalendarDateStackPane();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                dateDisplayGrid.add(calendarDateStackPane, j, i);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Populates the calendar based on the currently displayed year and month."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private void populateCalendar() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        updateCalendarTitle();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        LocalDate calendarDate \u003d getDateOfFirstSundayToBeDisplayed();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        for (CalendarDateCell calendarDateCell : calendarDateCells) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            setDate(calendarDateCell, calendarDate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            addAllEngagementsForDate(calendarDateCell, calendarDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            updateEngagementCountDisplay(calendarDateCell);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            calendarDate \u003d calendarDate.plusDays(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Updates the calendar\u0027s title to reflect the current displayed month and year."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private void updateCalendarTitle() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        String calendarTitleText \u003d String.format(\"%s %04d\", currentDisplayedYearMonth.getMonth().toString(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                currentDisplayedYearMonth.getYear());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        calendarTitle.setText(calendarTitleText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns a {@code LocalDate} instance representing the first Sunday to be displayed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * This Sunday is defined as the Sunday before or on the first day of the month."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @return A {@code LocalDate} instance representing the first Sunday to be displayed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private LocalDate getDateOfFirstSundayToBeDisplayed() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        LocalDate dateOfFirstSundayToBeDisplayed \u003d LocalDate.of(currentDisplayedYearMonth.getYear(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                currentDisplayedYearMonth.getMonth(), FIRST_DATE_OF_MONTH);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        while (!dateOfFirstSundayToBeDisplayed.getDayOfWeek().toString().equals(\"SUNDAY\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            dateOfFirstSundayToBeDisplayed \u003d dateOfFirstSundayToBeDisplayed.minusDays(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return dateOfFirstSundayToBeDisplayed;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Sets the openSingleDayEngagementsDisplayWindow date of the specified {@code CalendarDateCell} to the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * date represented by the specified {@code LocalDate}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @param calendarDateCell The specified {@code CalendarDateCell}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @param calendarDate The specified {@code LocalDate}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private void setDate(CalendarDateCell calendarDateCell, LocalDate calendarDate) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        StackPane calendarDateStackPane \u003d calendarDateCell.getCalendarDateStackPane();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        calendarDateStackPane.getChildren().clear();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Text dateText \u003d new Text(String.format(\"%02d\", calendarDate.getDayOfMonth()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        StackPane.setAlignment(dateText, Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        calendarDateStackPane.getChildren().add(dateText);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        calendarDateCell.setDate(calendarDate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Adds all engagements which occur on the date represented by the specified {@code LocalDate}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * to the specified {@code CalendarDateCell}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @param calendarDateCell The specified {@CalendarDate}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @param calendarDate The specified {@CalendarDateCell}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private void addAllEngagementsForDate(CalendarDateCell calendarDateCell, LocalDate calendarDate) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        calendarDateCell.clearEngagements();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        for (Engagement engagement : engagements) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            if (isWithinTimeSlot(calendarDate, engagement.getTimeSlot())) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                calendarDateCell.addEngagement(engagement);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns true if the specified calendar date is within the specified time slot."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @param calendarDate The specified calendar date."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @param timeSlot The specified time slot."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @return True if the specified calendar date is within the specified time slot."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private boolean isWithinTimeSlot(LocalDate calendarDate, TimeSlot timeSlot) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        LocalDateTime startDateTime \u003d timeSlot.getStartTime();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        LocalDateTime endDateTime \u003d timeSlot.getEndTime();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        LocalDate startDate \u003d LocalDate.of(startDateTime.getYear(), startDateTime.getMonthValue(),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                startDateTime.getDayOfMonth());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        LocalDate endDate \u003d LocalDate.of(endDateTime.getYear(), endDateTime.getMonthValue(),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                endDateTime.getDayOfMonth());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return calendarDate.compareTo(startDate) \u003e\u003d 0 \u0026\u0026 calendarDate.compareTo(endDate) \u003c\u003d 0;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Updates the specified {@code CalendarDatePane} to openSingleDayEngagementsDisplayWindow the number of engagements"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * in the specified {@code CalendarDateCell}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @param calendarDateCell The specified {@code CalendarDateCell}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private void updateEngagementCountDisplay(CalendarDateCell calendarDateCell) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        if (calendarDateCell.getNumberOfEngagements() \u003e 0) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            Text engagementCountDisplay;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            if (calendarDateCell.getNumberOfEngagements() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                engagementCountDisplay \u003d new Text(\"1 engagement\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                engagementCountDisplay \u003d new Text(calendarDateCell.getNumberOfEngagements() + \" engagements\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            StackPane.setAlignment(engagementCountDisplay, Pos.CENTER);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            calendarDateCell.getCalendarDateStackPane().getChildren().add(engagementCountDisplay);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Populates the calendar with information about the next month."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void populateCalendarWithNextMonth() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        closeAllDisplayedEngagementWindows();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        currentDisplayedYearMonth \u003d currentDisplayedYearMonth.plusMonths(1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        populateCalendar();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Populates the calendar with information about the previous month."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void populateCalendarWithPreviousMonth() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        closeAllDisplayedEngagementWindows();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        currentDisplayedYearMonth \u003d currentDisplayedYearMonth.minusMonths(1);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        populateCalendar();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Opens a window which displays the engagements on the specified date."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @param date The specified date."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void openSingleDayEngagementsDisplayWindow(LocalDate date) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        if (!(date.getYear() \u003d\u003d currentDisplayedYearMonth.getYear()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                \u0026\u0026 date.getMonthValue() \u003d\u003d currentDisplayedYearMonth.getMonthValue())) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            closeAllDisplayedEngagementWindows();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        currentDisplayedYearMonth \u003d YearMonth.of(date.getYear(), date.getMonthValue());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        populateCalendar();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        for (CalendarDateCell calendarDateCell : calendarDateCells) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            if (calendarDateCell.getDate().equals(date)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                calendarDateCell.displayEngagements();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Closes the single day engagements window for the specified date."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @param date The specified date."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @throws CalendarCloseDisplayException If there is no open window for the specified date."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void closeSingleDayEngagementsDisplayWindow(LocalDate date) throws CalendarCloseDisplayException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        for (CalendarDateCell calendarDateCell : calendarDateCells) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            if (calendarDateCell.getDate().equals(date)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    \u0026\u0026 calendarDateCell.hasOpenEngagementsDisplay()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                calendarDateCell.closeDisplayedEngagements();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        String formattedDateString \u003d DateUtil.getFormattedDateString(date);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        throw new CalendarCloseDisplayException(\"There is no open engagements display window for \""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                + formattedDateString);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Handles the exit process for this calendar window."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void handleExit() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        closeAllDisplayedEngagementWindows();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Closes all displayed engagement windows."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private void closeAllDisplayedEngagementWindows() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        for (CalendarDateCell calendarDateCell : calendarDateCells) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            calendarDateCell.closeDisplayedEngagements();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 257
    }
  },
  {
    "path": "src/main/java/com/typee/ui/calendar/SingleDayEngagementsDisplayWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.ui.EngagementCard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Controller for a single day engagements display window."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class SingleDayEngagementsDisplayWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(com.typee.ui.HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final String FXML \u003d \"SingleDayEngagementsDisplayWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private Stage root;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private ListView\u003cEngagement\u003e engagementListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Creates a new {@code SingleDayEngagementsDisplayWindow}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @param root Stage to use as the root of the {@code SingleDayEngagementsDisplayWindow}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public SingleDayEngagementsDisplayWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.root \u003d root;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Creates a new {@code SingleDayEngagementsDisplayWindow}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public SingleDayEngagementsDisplayWindow(ObservableList\u003cEngagement\u003e engagements) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementListView.setItems(engagements);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementListView.setCellFactory(listView -\u003e new EngagementListViewCell());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Shows the single day engagements display window."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        logger.fine(\"Showing single day engagements display window.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns true if the single day engagements display window is currently being shown."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Hides the help single day engagements display window."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Focuses on the single day engagements display window."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        root.setTitle(getDateString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private String getDateString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        String dateString \u003d String.format(\"Engagements for %02d/%02d/%04d\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                date.getDayOfMonth(), date.getMonthValue(), date.getYear());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return dateString;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of an {@code Engagement} using an {@code EngagementCard}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    class EngagementListViewCell extends ListCell\u003cEngagement\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        protected void updateItem(Engagement engagement, boolean empty) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            super.updateItem(engagement, empty);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            if (empty || engagement \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                setGraphic(new EngagementCard(engagement, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 123
    }
  },
  {
    "path": "src/main/java/com/typee/ui/calendar/exceptions/CalendarCloseDisplayException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.ui.calendar.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * Represents an error which occurs when attempting to close a calendar display window."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class CalendarCloseDisplayException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Constructs a new {@code CalendarCloseDisplayException} with the specified message."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @param message The specified message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public CalendarCloseDisplayException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 17
    }
  },
  {
    "path": "src/main/java/com/typee/ui/game/GameBody.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package com.typee.ui.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.game.Player;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.ui.UiPart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.animation.AnimationTimer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Controller class which handles the part of the game window that has moving words which player can type."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class GameBody extends UiPart\u003cPane\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final String FXML \u003d \"GameBody.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private AnimationTimer animationTimer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private Player player;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private double fallingRate \u003d 2.0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public GameBody(Player player) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.player \u003d player;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        loopWords();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Creates a loop of falling words."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void loopWords() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        animationTimer \u003d new AnimationTimer() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            private long lastUpdate \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            public void handle(long now) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                if (now - lastUpdate \u003e\u003d Integer.MAX_VALUE) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                    new MovingWord(fallingRate, getRoot(), player);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                    fallingRate +\u003d 0.1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                    lastUpdate \u003d now;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        };"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        animationTimer.start();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 42
    }
  },
  {
    "path": "src/main/java/com/typee/ui/game/GameWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package com.typee.ui.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.game.Player;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.ui.UiPart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Controller class which handles game window."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class GameWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final String FXML \u003d \"GameWindow.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static GameWindow gameInstance;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static Player player;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private AnchorPane gamePlay;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private TextField playerInput;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private Label gameOver;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Creates a new game window."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param root Stage that is the root of the window."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param player User that plays the game."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private GameWindow(Stage root, Player player) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        initialize(player);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        addStylesheet(root, \"/view/GameWindow.css\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Creates a game instance in new Window with a new player if there is no existing game instance or if the current"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * game is over."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static GameWindow getInstance() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (gameInstance \u003d\u003d null || player.getGameOverProperty().get()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            player \u003d new Player();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            gameInstance \u003d new GameWindow(new Stage(), player);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return gameInstance;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Creates a new game instance with a new player upon exit."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void handleExit() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        getRoot().close();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        player \u003d new Player();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        gameInstance \u003d new GameWindow(new Stage(), player);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void handleClear(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (keyEvent.getCode().equals(KeyCode.SPACE) || keyEvent.getCode().equals(KeyCode.ENTER)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            playerInput.clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Initialize game play with PlayerInformation and GameBody, and bind player input text property and game over"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * property according to {@code player}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param player The player that is currently on the game window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void initialize(Player player) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        player.setInputAs(playerInput.textProperty());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        gameOver.visibleProperty().bind(player.getGameOverProperty());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        ObservableList\u003cNode\u003e nodes \u003d gamePlay.getChildren();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        nodes.add(new PlayerInformation(player).getRoot());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        nodes.add(new GameBody(player).getRoot());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Adds the stylesheet given by the resource {@code name} to the {@code stage}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param stage The stage that the stylesheet is being applied to."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param name The name of the resource."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void addStylesheet(Stage stage, String name) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        String resource \u003d this.getClass().getResource(name).toExternalForm();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        stage.getScene().getStylesheets().add(resource);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Shows the window."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Returns true if the window is currently being shown."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Focuses on the window."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 120,
      "lyskevin": 1
    }
  },
  {
    "path": "src/main/java/com/typee/ui/game/MovingWord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package com.typee.ui.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.game.Player;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.game.Words;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.animation.AnimationTimer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Controller class which handles the game\u0027s moving words which player can type."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class MovingWord extends UiPart\u003cPane\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MovingWord.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final String FXML \u003d \"MovingWord.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final Random random \u003d new Random();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final double LOWER_BOUND \u003d 520;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final int DECREMENT_VALUE \u003d 20;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final int SCORE_MULTIPLIER \u003d 100;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final int WINDOW_BOUNDARY \u003d 500;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private Pane parent;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private Player player;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private double fallingRate \u003d 2.0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private String word;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private AnimationTimer animationTimer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public MovingWord(double fallingRate, Pane parent, Player player) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.parent \u003d parent;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.player \u003d player;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.fallingRate \u003d fallingRate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        word \u003d Words.get(random.nextInt(Words.SIZE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        setXCoordinate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        parent.getChildren().add(getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        continuouslyUpdate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void stopAnimation() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        animationTimer.stop();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void setXCoordinate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        getRoot().setLayoutX(random.nextInt(WINDOW_BOUNDARY));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Removes the moving word from the game window."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void disappear() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        parent.getChildren().remove(getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        word \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Updates the player\u0027s score and health according to player\u0027s input."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void update() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (player.getGameOverProperty().get()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            disappear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        incrementYCoordinateBy(fallingRate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        highlightWords();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (getRoot().getLayoutY() \u003e LOWER_BOUND) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            stopAnimation();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            player.decrementHealth(DECREMENT_VALUE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            disappear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        } else if (player.getInputText().equals(word)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            stopAnimation();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            player.incrementScore(word.length() * SCORE_MULTIPLIER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            player.setInputTextAs(\"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            disappear();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Converts moving word into text flow with or without CSS highlighting depending on what the player types, before"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * adding the words to the main pane."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void highlightWords() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        ObservableList\u003cNode\u003e words \u003d getRoot().getChildren();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        words.clear();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        Node highlightedNode \u003d TextHighlighter.convertToTextFlowUsing(player.getInputText(), word);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        Node nodeWithoutHighlight \u003d TextHighlighter.convertToTextFlowUsing(word);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        words.add(highlightedNode);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        words.add(nodeWithoutHighlight);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void incrementYCoordinateBy(double fallingRate) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        double currentYCoordinate \u003d getRoot().getLayoutY();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        getRoot().setLayoutY(currentYCoordinate + fallingRate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Ensures the player\u0027s score and health is updated according to player\u0027s input by continuously updating."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void continuouslyUpdate() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        animationTimer \u003d new AnimationTimer() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            public void handle(long now) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                update();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        };"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        animationTimer.start();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 113
    }
  },
  {
    "path": "src/main/java/com/typee/ui/game/PlayerInformation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package com.typee.ui.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.game.Player;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.ui.UiPart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Controller class which handles the part of the game window that has the player\u0027s score and health."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class PlayerInformation extends UiPart\u003cStackPane\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final String FXML \u003d \"PlayerInformation.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private Label score;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private ProgressBar health;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private Player player;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public PlayerInformation(Player player) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        initialize(player);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void initialize(Player player) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        health.progressProperty().bind(player.getHealthProperty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        score.textProperty().bind(Bindings.convert(player.getScoreProperty()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 36
    }
  },
  {
    "path": "src/main/java/com/typee/ui/game/StartWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package com.typee.ui.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.ui.UiPart;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Controller class which handles Start window."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class StartWindow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String FXML \u003d \"StartWindow.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private AnchorPane startWindow;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public StartWindow() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private void handleStart() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        GameWindow gameWindow \u003d GameWindow.getInstance();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        gameWindow.show();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 28
    }
  },
  {
    "path": "src/main/java/com/typee/ui/game/TextHighlighter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package com.typee.ui.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * Adds highlight to words."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class TextHighlighter {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Returns the TextFlow of {@code word} with highlighting on text that player has typed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param word The word that is to be converted into TextFlow."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param playerInput The text typed by the player that will be highlighted."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static TextFlow convertToTextFlowUsing(String playerInput, String word) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (word.indexOf(playerInput) \u003d\u003d 0 \u0026\u0026 playerInput.length() \u003c\u003d word.length()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            Text highlightedText \u003d new Text(word.substring(0, playerInput.length()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            highlightedText.getStyleClass().add(\"withShadow\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            Text remainingText \u003d new Text(word.substring(playerInput.length()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            return new TextFlow(highlightedText, remainingText);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        Text text \u003d new Text(word);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return new TextFlow(text);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Returns the TextFlow of {@code word} without highlighting."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * @param word The word that is to be converted into TextFlow."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static TextFlow convertToTextFlowUsing(String word) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        Text text \u003d new Text(word);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        text.getStyleClass().add(\"whiteText\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return new TextFlow(text);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 37
    }
  },
  {
    "path": "src/main/resources/view/CalendarDateCell.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003cStackPane fx:id\u003d\"calendarDateStackPane\" prefWidth\u003d\"200\" prefHeight\u003d\"60\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "           styleClass\u003d\"calendar-date-pane\" onMouseClicked\u003d\"#displayEngagements\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 1,
      "lyskevin": 6
    }
  },
  {
    "path": "src/main/resources/view/CalendarWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003cVBox spacing\u003d\"20\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    \u003cHBox alignment\u003d\"BASELINE_CENTER\" spacing\u003d\"30\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        \u003cButton id\u003d\"btn-next-l\" styleClass\u003d\"function_btn\" onMouseClicked\u003d\"#populateCalendarWithPreviousMonth\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003cText fx:id\u003d\"calendarTitle\" fill\u003d\"white\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        \u003cButton id\u003d\"btn-next-r\" styleClass\u003d\"function_btn\" onMouseClicked\u003d\"#populateCalendarWithNextMonth\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    \u003cGridPane alignment\u003d\"BASELINE_CENTER\" prefWidth\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefHeight\u003d\"10\" prefWidth\u003d\"200\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            \u003cText fill\u003d\"white\" text\u003d\"Sunday\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefHeight\u003d\"10\" prefWidth\u003d\"200\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            \u003cText fill\u003d\"white\" text\u003d\"Monday\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefHeight\u003d\"10\" prefWidth\u003d\"200\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            \u003cText fill\u003d\"white\" text\u003d\"Tuesday\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefHeight\u003d\"10\" prefWidth\u003d\"200\" GridPane.columnIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            \u003cText fill\u003d\"white\" text\u003d\"Wednesday\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefHeight\u003d\"10\" prefWidth\u003d\"200\" GridPane.columnIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            \u003cText fill\u003d\"white\" text\u003d\"Thursday\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefHeight\u003d\"10\" prefWidth\u003d\"200\" GridPane.columnIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            \u003cText fill\u003d\"white\" text\u003d\"Friday\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003cStackPane alignment\u003d\"BASELINE_CENTER\" prefHeight\u003d\"10\" prefWidth\u003d\"200\" GridPane.columnIndex\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            \u003cText fill\u003d\"white\" text\u003d\"Saturday\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    \u003cGridPane fx:id\u003d\"dateDisplayGrid\" prefHeight\u003d\"400\" prefWidth\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "lyskevin": 34,
      "-": 4
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "#main_window .list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "#main_window .list-view:focused {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: -1.4, 0, 1, 2;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "#main_window .anchor-pane:focused {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: -1.4, 0, 1, 2;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "#main_window .list-cell {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 0 0 5;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "#main_window .list-cell:filled:even {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /*-fx-background-color: #3c3e3f;*/"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #DCDCDC;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #1B2631;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "#main_window .list-cell:filled:odd {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /*-fx-background-color: #515658;*/"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #F0F0F0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "#main_window .list-cell:filled:selected .text{"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "#main_window .list-cell:filled:selected {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #2471A3;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "#main_window .list-cell:filled:focused {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #2471A3;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-focus-color: -fx-background-color;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "#main_window .list-cell:filled:focused .text{"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "#main_window .list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "#main_window .list-cell .text {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /*-fx-fill: #ffffff;*/"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .text-area .scroll-pane .content {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #283747;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label{"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nordic96"
        },
        "content": "#btn-next-l {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    -fx-background-image: url(\u0027../images/btn_next_l.png\u0027);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    -fx-min-width: 25px;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    -fx-min-height: 25px;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nordic96"
        },
        "content": " }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nordic96"
        },
        "content": "#btn-next-r {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    -fx-background-image: url(\u0027../images/btn_next_r.png\u0027);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    -fx-min-width: 25px;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    -fx-min-height: 25px;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "#window_title {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 2pt;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "#mainMenu .menu-bar .menu .menu-item{"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".function_btn {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-image: url(\u0027../images/btn_remove.png\u0027);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-spacing: 5pt;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 6em;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: none;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-width: 20px;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 20px;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-size: cover;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ".tree-view {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "#lbl {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ".tree-cell {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: black;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0.3pt;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ".tree-cell:even {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #f0f0f5;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ".tree-cell:selected {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "#btn-refresh {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-image: url(\u0027../images/btn_refresh.png\u0027);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background{"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #4D5656;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #239B56;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab:selected {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #108041;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane:focused \u003e .tab-header-area \u003e .headers-region \u003e .tab:selected .focus-indicator {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab .text{"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill:white;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 13,
      "-": 457
    }
  },
  {
    "path": "src/main/resources/view/EngagementCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" prefHeight\u003d\"105.0\" prefWidth\u003d\"420.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" prefHeight\u003d\"105.0\" prefWidth\u003d\"161.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "         \u003cHBox prefHeight\u003d\"15.0\" prefWidth\u003d\"129.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "           \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$id\" textOverrun\u003d\"CLIP\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "             \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "             \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "           \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "               \u003cLabel fx:id\u003d\"type\" maxWidth\u003d\"1.7976931348623157E308\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$type\" textOverrun\u003d\"CLIP\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "               \u003cLabel styleClass\u003d\"cell_big_label\" text\u003d\" at \" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "               \u003cLabel fx:id\u003d\"locationOfEngagement\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$locationOfEngagement\" textOverrun\u003d\"CLIP\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "         \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "           \u003cLabel fx:id\u003d\"startTime\" prefHeight\u003d\"17.0\" prefWidth\u003d\"120.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$start\" textOverrun\u003d\"CLIP\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "               \u003cLabel prefHeight\u003d\"17.0\" prefWidth\u003d\"20.0\" styleClass\u003d\"cell_small_label\" text\u003d\"to \" textOverrun\u003d\"CLIP\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "               \u003cLabel fx:id\u003d\"endTime\" prefHeight\u003d\"17.0\" prefWidth\u003d\"120.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$end\" textOverrun\u003d\"CLIP\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox prefHeight\u003d\"18.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "               \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Attendees: \" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"attendees\" prefHeight\u003d\"17.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$attendees\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" textOverrun\u003d\"CLIP\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "         \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "               \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Priority: \" textOverrun\u003d\"CLIP\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "               \u003cLabel fx:id\u003d\"priority\" prefHeight\u003d\"17.0\" prefWidth\u003d\"100.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\" textOverrun\u003d\"CLIP\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 8,
      "uggi121": 22,
      "-": 30
    }
  },
  {
    "path": "src/main/resources/view/EngagementListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003cVBox id\u003d\"main_window\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    \u003cListView fx:id\u003d\"engagementListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nordic96": 7
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ".change-calendar-month-button {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    -fx-cursor: hand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ".calendar-date-pane {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    -fx-border-color: black;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    -fx-border-width: 0.5 0.5 0.5 0.5;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    -fx-cursor: hand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 11,
      "-": 20
    }
  },
  {
    "path": "src/main/resources/view/GameBody.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" prefHeight\u003d\"600.0\" prefWidth\u003d\"750.0\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 7
    }
  },
  {
    "path": "src/main/resources/view/GameWindow.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ".whiteText {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /*-fx-font-family: \u0027Calibri\u0027;*/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    -fx-font-size: 20;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ".withShadow {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    -fx-effect: dropshadow(gaussian, whitesmoke, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "#gamePlay {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    -fx-background-size: 600 750;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "#gameOver {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    -fx-font-size: 36;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 22
    }
  },
  {
    "path": "src/main/resources/view/GameWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003cfx:root onCloseRequest\u003d\"#handleExit\" resizable\u003d\"false\" title\u003d\"TypingGame\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            \u003cAnchorPane fx:id\u003d\"gamePlay\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"750.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                    \u003cTextField fx:id\u003d\"playerInput\" onKeyPressed\u003d\"#handleClear\" opacity\u003d\"0.0\" prefHeight\u003d\"600.0\" prefWidth\u003d\"750.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                    \u003cLabel layoutX\u003d\"310.0\" layoutY\u003d\"540.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"400.0\" styleClass\u003d\"whiteText\" text\u003d\"${playerInput.text}\" textAlignment\u003d\"CENTER\" textOverrun\u003d\"CLIP\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                    \u003cLabel layoutX\u003d\"251.0\" layoutY\u003d\"560.0\" styleClass\u003d\"whiteText\" text\u003d\"Press SPACEBAR to clear\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                    \u003cLabel fx:id\u003d\"gameOver\" alignment\u003d\"CENTER\" layoutX\u003d\"275.0\" layoutY\u003d\"0.0\" text\u003d\"GAME OVER\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 17,
      "uggi121": 1,
      "-": 3
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel text\u003d\"If you wish to refer to our use guide and other documentations,\\nplease click the copy button to navigate to our github web page.\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "uggi121": 1,
      "-": 41
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root minHeight\u003d\"716.0\" minWidth\u003d\"550.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Typee\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/typee_icon.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cAnchorPane styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar id\u003d\"mainMenu\" fx:id\u003d\"menuBar\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu id\u003d\"mainMenu\" mnemonicParsing\u003d\"false\" styleClass\u003d\"menu\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem id\u003d\"mainMenu\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" styleClass\u003d\"menu-item\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu id\u003d\"mainMenu\" mnemonicParsing\u003d\"false\" styleClass\u003d\"menu\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem id\u003d\"mainMenu\" fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" styleClass\u003d\"menu-item\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cTabPane fx:id\u003d\"menuTabPane\" prefHeight\u003d\"25.0\" prefWidth\u003d\"340.0\" styleClass\u003d\"tab-pane\" tabMaxHeight\u003d\"25.0\" tabMinHeight\u003d\"25.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"28.5\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel id\u003d\"window_title\" fx:id\u003d\"lblWindowTitle\" text\u003d\"\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"53.5\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "       \u003cVBox fx:id\u003d\"mainWindow\" maxWidth\u003d\"500.0\" minHeight\u003d\"450.0\" styleClass\u003d\"pane-with-border\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"79.5\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        \u003cVBox minHeight\u003d\"150.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"506.0\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane id\u003d\"output_screen\" fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"70.0\" prefHeight\u003d\"70.0\" prefWidth\u003d\"340.0\" styleClass\u003d\"result-display\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets bottom\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane id\u003d\"input_screen\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets bottom\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 2,
      "uggi121": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/resources/view/MovingWord.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003cStackPane fx:id\u003d\"movingWord\" styleClass\u003d\"whiteText\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" prefHeight\u003d\"30\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 9
    }
  },
  {
    "path": "src/main/resources/view/PlayerInformation.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003cStackPane layoutX\u003d\"0\" layoutY\u003d\"0\" prefHeight\u003d\"75.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"playerInformation\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        \u003cLabel styleClass\u003d\"whiteText\" text\u003d\"Score\" translateY\u003d\"-10.0\" StackPane.alignment\u003d\"CENTER_LEFT\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        \u003cLabel styleClass\u003d\"whiteText\" text\u003d\"Health\" translateY\u003d\"7.0\" StackPane.alignment\u003d\"BOTTOM_LEFT\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        \u003cLabel fx:id\u003d\"score\" styleClass\u003d\"whiteText\" text\u003d\"\" translateX\u003d\"40.0\" translateY\u003d\"-10.0\" wrapText\u003d\"true\" StackPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        \u003cProgressBar fx:id\u003d\"health\" translateX\u003d\"30.0\" StackPane.alignment\u003d\"BOTTOM_CENTER\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 17
    }
  },
  {
    "path": "src/main/resources/view/ReportWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TreeView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel id\u003d\"lbl\" text\u003d\"Documents Explorer\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cAnchorPane prefHeight\u003d\"27.0\" prefWidth\u003d\"186.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox alignment\u003d\"BOTTOM_RIGHT\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cButton id\u003d\"btn-refresh\" fx:id\u003d\"btnRefresh\" onMouseClicked\u003d\"#refreshTreeView\" styleClass\u003d\"function_btn\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cButton fx:id\u003d\"btnDelete\" alignment\u003d\"BOTTOM_RIGHT\" maxHeight\u003d\"10.0\" maxWidth\u003d\"10.0\" styleClass\u003d\"function_btn\" onMouseClicked\u003d\"#deleteDocument\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "             \u003cLabel id\u003d\"lbl\" fx:id\u003d\"lblStatus\" textAlignment\u003d\"RIGHT\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cTreeView fx:id\u003d\"treeViewReports\" prefHeight\u003d\"250\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/SingleDayEngagementsDisplayWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            \u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" prefHeight\u003d\"600\" prefWidth\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                \u003cListView fx:id\u003d\"engagementListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "uggi121": 2,
      "lyskevin": 13
    }
  },
  {
    "path": "src/main/resources/view/StartWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003cVBox id\u003d\"startWindow\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    \u003cButton mnemonicParsing\u003d\"false\" onAction\u003d\"#handleStart\" styleClass\u003d\"button\" text\u003d\"Start\" translateX\u003d\"150.0\" translateY\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 7
    }
  },
  {
    "path": "src/test/java/com/typee/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/com/typee/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/com/typee/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/com/typee/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/com/typee/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/typee_icon.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/com/typee/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/com/typee/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/com/typee/commons/util/DateUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class DateUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getFormattedDateString_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateUtil.getFormattedDateString(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getFormattedDateString_validDate_returnsFormattedDateString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2019, 1, 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        String formattedDateString \u003d DateUtil.getFormattedDateString(date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(formattedDateString, \"01/01/2019\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 24
    }
  },
  {
    "path": "src/test/java/com/typee/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/com/typee/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.testutil.SerializableListTestClass;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.testutil.TestUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path LIST_SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \"serializeList.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readJsonFileIntoList() throws DataConversionException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableListTestClass testClass \u003d new SerializableListTestClass();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cList\u003cString\u003e\u003e serializableTestList \u003d JsonUtil.readJsonFileIntoList(LIST_SERIALIZATION_FILE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                String.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestList.get(), testClass.getSerializableTestList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 3,
      "-": 57
    }
  },
  {
    "path": "src/test/java/com/typee/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nordic96"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 4,
      "-": 140
    }
  },
  {
    "path": "src/test/java/com/typee/game/PlayerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package com.typee.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.TYPICAL_APPOINTMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import static com.typee.testutil.TypicalPlayers.END_GAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import static com.typee.testutil.TypicalPlayers.MID_GAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import static com.typee.testutil.TypicalPlayers.START_OF_GAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.testutil.PlayerBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "class PlayerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private final Player player \u003d new Player();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertEquals(player, player);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertEquals(START_OF_GAME, player);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertNotEquals(MID_GAME, player);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertNotEquals(END_GAME, player);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertNotEquals(player, TYPICAL_APPOINTMENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void setInputAs_nullInput_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e player.setInputAs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void setInputAs_validInput_setInput() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        StringProperty stringProperty \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        player.setInputAs(stringProperty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertEquals(player.getInputTextProperty(), stringProperty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    void setInputTextAs_validInputText_setInputText() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        StringProperty stringProperty \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        player.setInputAs(stringProperty);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        player.setInputTextAs(\"John Maynard Keynes\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertEquals(\"John Maynard Keynes\", player.getInputText());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void incrementScore_invalidInput_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e player.incrementScore(-1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e player.incrementScore(Integer.MIN_VALUE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    void incrementScore_validScore_incrementScore() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertEquals(player.incrementScore(1).getScore(), new PlayerBuilder().withScore(1).build().getScore());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertEquals(player.incrementScore(757).getScore(), player.getScore());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertEquals(END_GAME.incrementScore(1).getScoreProperty(), END_GAME.getScoreProperty());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void decrementHealth_healthLessThanZero_setGameOVer() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertEquals(MID_GAME.decrementHealth(50).getGameOverProperty().get(), END_GAME.getGameOverProperty().get());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    void decrementHealth_validHealth_decrementHealth() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertEquals(player.decrementHealth(1).getHealth(), new PlayerBuilder().withHealth(99).build().getHealth());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertEquals(player.decrementHealth(757).getHealth(), player.getHealth());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertEquals(END_GAME.decrementHealth(1).getHealthProperty(), END_GAME.getHealthProperty());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    void isSamePlayer_inputSamePlayer_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertTrue(MID_GAME.isSamePlayer(MID_GAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertTrue(player.isSamePlayer(START_OF_GAME));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertEquals(player.hashCode(), new Player().hashCode());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        // different score value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertNotEquals(player.hashCode(), new PlayerBuilder().withScore(1000).build().hashCode());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        // different health value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertNotEquals(player.hashCode(), new PlayerBuilder().withHealth(50).hashCode());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 95
    }
  },
  {
    "path": "src/test/java/com/typee/game/WordsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package com.typee.game;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "class WordsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    void get() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertNotNull(Words.SIZE);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Words.get(-1));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Words.get(Integer.MIN_VALUE));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertDoesNotThrow(() -\u003e Words.get(0));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertDoesNotThrow(() -\u003e Words.get(Words.SIZE - 1));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 19
    }
  },
  {
    "path": "src/test/java/com/typee/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.storage.JsonEngagementListStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.storage.JsonTypeeStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.storage.StorageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    //private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        JsonEngagementListStorage engagementListStorage \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                new JsonEngagementListStorage(temporaryFolder.resolve(\"engagementList.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonTypeeStorage typeeStorage \u003d new JsonTypeeStorage(temporaryFolder.resolve(\"tabMenus.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        StorageManager storage \u003d new StorageManager(engagementListStorage, userPrefsStorage, typeeStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertParseException(invalidCommand, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        String deleteCommand \u003d \"delete i/9\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandException(deleteCommand, Messages.MESSAGE_INVALID_ENGAGEMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // Setup LogicManager with JsonEngagementListIoExceptionThrowingStub"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        JsonEngagementListStorage engagementListStorage \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                new JsonEngagementListIoExceptionThrowingStub(temporaryFolder"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                        .resolve(\"ioExceptionEngagementList.json\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonTypeeStorage typeeStorage \u003d new JsonTypeeStorage(temporaryFolder.resolve(\"tabMenus.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        StorageManager storage \u003d new StorageManager(engagementListStorage, userPrefsStorage, typeeStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.addEngagement(expectedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandBehavior(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredEngagementList().remove(0));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * @see #assertCommandBehavior(String, Class, String, Model)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandBehavior(inputCommand, null, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * @see #assertCommandBehavior(String, Class, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * @see #assertCommandBehavior(String, Class, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * @see #assertCommandBehavior(String, Class, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandBehavior(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nordic96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private void assertCommandBehavior(String inputCommand, Class\u003c?\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                                       String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static class JsonEngagementListIoExceptionThrowingStub extends JsonEngagementListStorage {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        private JsonEngagementListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public void saveEngagementList(ReadOnlyEngagementList engagementList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 1,
      "uggi121": 8,
      "nordic96": 8,
      "brebeek": 16,
      "lyskevin": 40,
      "-": 98
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.getTypicalEngagementList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.testutil.EngagementBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        model \u003d new ModelManager(getTypicalEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_newAppointment_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement validAppointment \u003d new EngagementBuilder().buildAsAppointment();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel.addEngagement(validAppointment);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertCommandSuccess(new AddCommand(validAppointment), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validAppointment), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_newInterview_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement validInterview \u003d new EngagementBuilder().buildAsInterview();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel.addEngagement(validInterview);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertCommandSuccess(new AddCommand(validInterview), model,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validInterview), expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_newMeeting_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement validMeeting \u003d new EngagementBuilder().buildAsMeeting();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel.addEngagement(validMeeting);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertCommandSuccess(new AddCommand(validMeeting), model,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validMeeting), expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_duplicateAppointment_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement appointmentInList \u003d model.getEngagementList().getEngagementList().get(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertCommandFailure(new AddCommand(appointmentInList), model, AddCommand.MESSAGE_DUPLICATE_ENGAGEMENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_duplicateInterview_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement interviewInList \u003d model.getEngagementList().getEngagementList().get(1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertCommandFailure(new AddCommand(interviewInList), model, AddCommand.MESSAGE_DUPLICATE_ENGAGEMENT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_duplicateMeeting_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement meetingInList \u003d model.getEngagementList().getEngagementList().get(2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertCommandFailure(new AddCommand(meetingInList), model, AddCommand.MESSAGE_DUPLICATE_ENGAGEMENT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "lyskevin": 60,
      "-": 20
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.logic.commands.exceptions.DeleteDocumentException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.exceptions.NullRedoableActionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.exceptions.NullUndoableActionException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.EngagementList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.model.report.Report;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.testutil.EngagementBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void constructor_nullEngagement_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_appointmentAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ModelStubAcceptingEngagementAdded modelStub \u003d new ModelStubAcceptingEngagementAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement validAppointment \u003d new EngagementBuilder().buildAsAppointment();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validAppointment).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validAppointment),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(Arrays.asList(validAppointment), modelStub.engagementsAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_interviewAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ModelStubAcceptingEngagementAdded modelStub \u003d new ModelStubAcceptingEngagementAdded();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement validInterview \u003d new EngagementBuilder().buildAsInterview();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validInterview).execute(modelStub);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validInterview),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(Arrays.asList(validInterview), modelStub.engagementsAdded);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_meetingAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ModelStubAcceptingEngagementAdded modelStub \u003d new ModelStubAcceptingEngagementAdded();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement validMeeting \u003d new EngagementBuilder().buildAsMeeting();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validMeeting).execute(modelStub);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validMeeting),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(Arrays.asList(validMeeting), modelStub.engagementsAdded);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_duplicateAppointment_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement validAppointment \u003d new EngagementBuilder().buildAsAppointment();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validAppointment);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEngagement(validAppointment);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e addCommand.execute(modelStub),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_ENGAGEMENT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_duplicateInterview_throwsCommandException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement validInterview \u003d new EngagementBuilder().buildAsInterview();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validInterview);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEngagement(validInterview);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e addCommand.execute(modelStub),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_ENGAGEMENT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_duplicateMeeting_throwsCommandException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement validMeeting \u003d new EngagementBuilder().buildAsMeeting();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validMeeting);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEngagement(validMeeting);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e addCommand.execute(modelStub),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_ENGAGEMENT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void appointmentEquals() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement appointment \u003d new EngagementBuilder().buildAsAppointment();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement differentAppointment \u003d new EngagementBuilder()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .withDescription(\"date\").buildAsAppointment();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addAppointmentCommand \u003d new AddCommand(appointment);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addDifferentAppointmentCommand \u003d new AddCommand(differentAppointment);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(addAppointmentCommand.equals(addAppointmentCommand));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addAppointmentCommandCopy \u003d new AddCommand(appointment);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(addAppointmentCommand.equals(addAppointmentCommandCopy));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addAppointmentCommand.equals(1));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addAppointmentCommand.equals(null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different appointment -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addAppointmentCommand.equals(addDifferentAppointmentCommand));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void interviewEquals() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement interview \u003d new EngagementBuilder().buildAsInterview();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement differentInterview \u003d new EngagementBuilder()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .withDescription(\"date\").buildAsInterview();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addInterviewCommand \u003d new AddCommand(interview);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addDifferentInterviewCommand \u003d new AddCommand(differentInterview);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(addInterviewCommand.equals(addInterviewCommand));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addInterviewCommandCopy \u003d new AddCommand(interview);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(addInterviewCommand.equals(addInterviewCommandCopy));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addInterviewCommand.equals(1));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addInterviewCommand.equals(null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different appointment -\u003e returns false"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addInterviewCommand.equals(addDifferentInterviewCommand));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void meetingEquals() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement meeting \u003d new EngagementBuilder().buildAsMeeting();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement differentMeeting \u003d new EngagementBuilder()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .withDescription(\"date\").buildAsMeeting();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addMeetingCommand \u003d new AddCommand(meeting);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addDifferentMeetingCommand \u003d new AddCommand(differentMeeting);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(addMeetingCommand.equals(addMeetingCommand));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addMeetingCommandCopy \u003d new AddCommand(meeting);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(addMeetingCommand.equals(addMeetingCommandCopy));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addMeetingCommand.equals(1));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addMeetingCommand.equals(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different appointment -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addMeetingCommand.equals(addDifferentMeetingCommand));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void differentEngagementTypesEquals() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement appointment \u003d new EngagementBuilder().buildAsAppointment();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement interview \u003d new EngagementBuilder().buildAsInterview();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement meeting \u003d new EngagementBuilder().buildAsMeeting();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addAppointmentCommand \u003d new AddCommand(appointment);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addInterviewCommand \u003d new AddCommand(interview);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        AddCommand addMeetingCommand \u003d new AddCommand(meeting);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different engagement types -\u003e returns false"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addAppointmentCommand.equals(addInterviewCommand));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addAppointmentCommand.equals(addMeetingCommand));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(addInterviewCommand.equals(addMeetingCommand));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public Path getEngagementListFilePath() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public void setEngagementListFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public void addEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public void setHistoryManager(ReadOnlyEngagementList newData) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public ReadOnlyEngagementList getEngagementList() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public boolean hasEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public void deleteEngagement(Engagement target) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public void setEngagement(Engagement target, Engagement editedEngagement) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public ObservableList\u003cEngagement\u003e getFilteredEngagementList() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public void updateFilteredEngagementList(Predicate\u003cEngagement\u003e predicate) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public boolean hasNoUndoableCommand() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        public void undoEngagementList() throws NullUndoableActionException {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public boolean hasNoRedoableCommand() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        public void redoEngagementList() throws NullRedoableActionException {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        public void saveEngagementList() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            // Used in the execution of AddCommand"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public void updateSortedEngagementList() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            // Used in the execution of AddCommand"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public ObservableList\u003cEngagement\u003e getSortedEngagementList() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public void setComparator(Comparator\u003cEngagement\u003e comparator) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path saveReport(Path fileDir, Report report) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean deleteReport(Path fileDir, Report report) throws DeleteDocumentException {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * A Model stub that contains a single engagement."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private class ModelStubWithEngagement extends ModelStub {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        private final Engagement engagement;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ModelStubWithEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            requireNonNull(engagement);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            this.engagement \u003d engagement;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public boolean hasEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            requireNonNull(engagement);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return this.engagement.isSameEngagement(engagement);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * A Model stub that always accepts the engagement being added."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private class ModelStubAcceptingEngagementAdded extends ModelStub {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        final ArrayList\u003cEngagement\u003e engagementsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public boolean hasEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            requireNonNull(engagement);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return engagementsAdded.stream().anyMatch(engagement::isSameEngagement);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public void addEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            requireNonNull(engagement);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            engagementsAdded.add(engagement);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public ReadOnlyEngagementList getEngagementList() {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return new EngagementList();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 3,
      "nordic96": 1,
      "brebeek": 38,
      "lyskevin": 210,
      "-": 114
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/CalendarCloseDisplayCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.commons.util.DateUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class CalendarCloseDisplayCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private static final LocalDate TYPICAL_DATE \u003d LocalDate.of(2019, 10, 22);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void execute_validCommand_assertCommandSuccess() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandSuccess(new CalendarCloseDisplayCommand(TYPICAL_DATE), model,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                CalendarCloseDisplayCommand.MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                        + DateUtil.getFormattedDateString(TYPICAL_DATE), expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        CalendarCloseDisplayCommand typicalInstance \u003d new CalendarCloseDisplayCommand(TYPICAL_DATE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(typicalInstance.equals(typicalInstance));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertFalse(typicalInstance.equals(new CalendarNextMonthCommand()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 37
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/CalendarDateDisplayEngagementsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "class CalendarDateDisplayEngagementsCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void constructor_nullEngagement_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CalendarOpenDisplayCommand(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void execute_validDate_displaySuccessful() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        LocalDate validDate \u003d LocalDate.of(2019, 10, 22);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        String formattedValidDateString \u003d \"22/10/2019\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        CommandResult commandResult \u003d new CalendarOpenDisplayCommand(validDate).execute(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(CalendarOpenDisplayCommand.MESSAGE_SUCCESS + formattedValidDateString,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    /* Invalid dates are not tested since they should have already been accounted"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "       for by the CalendarCommandParser and are handled by its unit tests. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2019, 10, 22);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        CalendarOpenDisplayCommand calendarDateDisplayEngagementsCommand \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                new CalendarOpenDisplayCommand(date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        CalendarOpenDisplayCommand identicalCalendarDateDisplayEngagementsCommand \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                new CalendarOpenDisplayCommand(date);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(calendarDateDisplayEngagementsCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                .equals(identicalCalendarDateDisplayEngagementsCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        LocalDate otherDate \u003d LocalDate.of(2019, 10, 23);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        CalendarOpenDisplayCommand differentCalendarDateDisplayEngagementsCommand \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                new CalendarOpenDisplayCommand(otherDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertFalse(calendarDateDisplayEngagementsCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                .equals(differentCalendarDateDisplayEngagementsCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        CalendarOpenDisplayCommand typicalCommand \u003d new CalendarOpenDisplayCommand(date);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(typicalCommand.equals(typicalCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertFalse(typicalCommand.equals(new CalendarNextMonthCommand()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 59
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/CalendarNextMonthCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class CalendarNextMonthCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void execute_calendarNextMonth_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(CalendarNextMonthCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                true, CalendarNextMonthCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandSuccess(new CalendarNextMonthCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void equals_identicalInstance_returnTrue() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        final CalendarNextMonthCommand typicalInstance \u003d new CalendarNextMonthCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(typicalInstance.equals(typicalInstance));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 28
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/CalendarPreviousMonthCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class CalendarPreviousMonthCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_calendarPreviousMonth_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(CalendarPreviousMonthCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                true, CalendarPreviousMonthCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertCommandSuccess(new CalendarPreviousMonthCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 22
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.getTypicalEngagementList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.EngagementList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private ClearCommand clearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        clearCommand \u003d new ClearCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_emptyEngagementList_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertCommandSuccess(clearCommand, model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void execute_nonEmptyEngagementList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel.setHistoryManager(new EngagementList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertCommandSuccess(clearCommand, model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ClearCommand otherClearCommand \u003d new ClearCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(clearCommand, clearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(clearCommand, otherClearCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 2,
      "nordic96": 1,
      "lyskevin": 32,
      "-": 15
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.nio.file.FileSystem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.nio.file.LinkOption;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.nio.file.WatchEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.nio.file.WatchKey;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.nio.file.WatchService;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.ui.Tab;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private static LocalDate localDate \u003d LocalDate.of(2019, 1, 12);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private static Tab tab \u003d new Tab(\"main\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private static String calendarCommandType \u003d \"closedisplay\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private static Path pathStub \u003d new Path() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public FileSystem getFileSystem() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public boolean isAbsolute() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public Path getRoot() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public Path getFileName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public Path getParent() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public int getNameCount() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public Path getName(int index) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public Path subpath(int beginIndex, int endIndex) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public boolean startsWith(Path other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public boolean endsWith(Path other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public Path normalize() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public Path resolve(Path other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public Path relativize(Path other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public URI toUri() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public Path toAbsolutePath() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public Path toRealPath(LinkOption... options) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public WatchKey register(WatchService watcher, WatchEvent.Kind\u003c?\u003e[] events, WatchEvent.Modifier... modifiers)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                throws IOException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        public int compareTo(Path other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    };"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private static final CommandResult TYPICAL_CALENDAR_COMMAND_RESULT \u003d new CommandResult(\"Calendar command\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            true, localDate, calendarCommandType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private static final CommandResult TYPICAL_UNDO_COMMAND_RESULT \u003d new CommandResult(\"Successfully undone!\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            false, false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private static final CommandResult TYPICAL_TAB_COMMAND_RESULT \u003d new CommandResult(\"Tab command\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            true, tab);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private static final CommandResult TYPICAL_HELP_COMMAND_RESULT \u003d new CommandResult(\"Help\", true, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private static final CommandResult TYPICAL_EXIT_COMMAND_RESULT \u003d new CommandResult(\"Exits\", false, true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private static final CommandResult TYPICAL_PDF_COMMAND_RESULT \u003d new CommandResult(\"pdf\", true, pathStub);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void isShowHelp() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertFalse(TYPICAL_CALENDAR_COMMAND_RESULT.isShowHelp());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertFalse(TYPICAL_TAB_COMMAND_RESULT.isShowHelp());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertFalse(TYPICAL_UNDO_COMMAND_RESULT.isShowHelp());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(TYPICAL_HELP_COMMAND_RESULT.isShowHelp());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void isExit() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertFalse(TYPICAL_UNDO_COMMAND_RESULT.isExit());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertFalse(TYPICAL_TAB_COMMAND_RESULT.isExit());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertFalse(TYPICAL_CALENDAR_COMMAND_RESULT.isExit());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(TYPICAL_EXIT_COMMAND_RESULT.isExit());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void isTabCommand() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(TYPICAL_TAB_COMMAND_RESULT.isTabCommand());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertFalse(TYPICAL_CALENDAR_COMMAND_RESULT.isTabCommand());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void getTab() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(TYPICAL_TAB_COMMAND_RESULT.getTab(), this.tab);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void isCalendarCommand() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(TYPICAL_CALENDAR_COMMAND_RESULT.isCalendarCommand());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertFalse(TYPICAL_TAB_COMMAND_RESULT.isCalendarCommand());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void isPdfCommand() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(TYPICAL_PDF_COMMAND_RESULT.isPdfCommand());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertFalse(TYPICAL_TAB_COMMAND_RESULT.isPdfCommand());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void getCalendarDate() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e TYPICAL_EXIT_COMMAND_RESULT.getCalendarDate());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(TYPICAL_CALENDAR_COMMAND_RESULT.getCalendarDate(), localDate));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void getCalendarCommandTyoe() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e TYPICAL_EXIT_COMMAND_RESULT.getCalendarCommandType());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(TYPICAL_CALENDAR_COMMAND_RESULT.getCalendarCommandType(),"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                calendarCommandType));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void getDocPath() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(TYPICAL_PDF_COMMAND_RESULT.getDocPath(), pathStub);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "brebeek": 177,
      "-": 53
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.EngagementList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.model.engagement.EngagementPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String VALID_DESCRIPTION_LUNCH_APPOINTMENT \u003d \"Lunch\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String VALID_DESCRIPTION_GOOGLE_INTERVIEW \u003d \"Googs\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final String VALID_DESCRIPTION_TEAM_MEETING \u003d \"Team Project Meeting\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String VALID_REMARK_AMY \u003d \"Like skiing.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final String VALID_REMARK_BOB \u003d \"Favourite pastime: Eating\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final EditCommand.EditEngagementDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static final EditCommand.EditEngagementDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Convenience wrapper to"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementList expectedEngagementList \u003d new EngagementList(actualModel.getEngagementList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        List\u003cEngagement\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredEngagementList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(expectedEngagementList, actualModel.getEngagementList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredEngagementList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the engagement at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * {@code model}\u0027s engagement list based on the engagement description of the first engagement."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static void showEngagementAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredEngagementList().size());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement engagement \u003d model.getFilteredEngagementList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        final String[] splitDescription \u003d engagement.getDescription().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        EngagementPredicate predicate \u003d new EngagementPredicate();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        predicate.setDescription(splitDescription[0]);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        model.updateFilteredEngagementList(predicate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertEquals(1, model.getFilteredEngagementList().size());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 10,
      "uggi121": 7,
      "nordic96": 2,
      "lyskevin": 26,
      "-": 70
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.getTypicalEngagementList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalIndexes.INDEX_FIRST_ENGAGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalIndexes.INDEX_SECOND_ENGAGEMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement engagementToDelete \u003d model.getFilteredEngagementList().get(INDEX_FIRST_ENGAGEMENT.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ENGAGEMENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ENGAGEMENT_SUCCESS, engagementToDelete);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel.deleteEngagement(engagementToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEngagementList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        CommandTestUtil.assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ENGAGEMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        CommandTestUtil.showEngagementAtIndex(model, INDEX_FIRST_ENGAGEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement engagementToDelete \u003d model.getFilteredEngagementList().get(INDEX_FIRST_ENGAGEMENT.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ENGAGEMENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ENGAGEMENT_SUCCESS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                engagementToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel.deleteEngagement(engagementToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        showNoEngagement(expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        CommandTestUtil.showEngagementAtIndex(model, INDEX_FIRST_ENGAGEMENT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ENGAGEMENT;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of engagement list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEngagementList().getEngagementList().size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        CommandTestUtil.assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ENGAGEMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_ENGAGEMENT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_ENGAGEMENT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_ENGAGEMENT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no engagements."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private void showNoEngagement(Model model) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.updateFilteredEngagementList(p -\u003e false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertTrue(model.getFilteredEngagementList().isEmpty());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 6,
      "nordic96": 1,
      "brebeek": 6,
      "lyskevin": 34,
      "-": 60
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "//import static com.typee.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EditCommand.EditEngagementDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new EngagementList(model.getHistoryManager()), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.setEngagement(model.getFilteredEngagementList().get(0), editedPerson);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredEngagementList().size());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Person lastPerson \u003d model.getFilteredEngagementList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Person editedPerson \u003d personInList.withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EditCommand.EditEngagementDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .withName(CommandTestUtil.VALID_NAME_BOB)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new EngagementList(model.getHistoryManager()), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.setEngagement(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditCommand.EditEngagementDescriptor());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Person editedPerson \u003d model.getFilteredEngagementList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new EngagementList(model.getHistoryManager()), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandTestUtil.showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredEngagementList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new EngagementList(model.getHistoryManager()), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.setEngagement(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Person firstPerson \u003d model.getFilteredEngagementList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EditEngagementDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandTestUtil.showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Person personInList \u003d model.getHistoryManager().getEngagementList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEngagementList().size() + 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EditCommand.EditEngagementDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .withName(CommandTestUtil.VALID_NAME_BOB)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandTestUtil.showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getHistoryManager().getEngagementList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        CommandTestUtil.assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EditCommand.EditEngagementDescriptor copyDescriptor \u003d new EditCommand"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .EditEngagementDescriptor(CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, CommandTestUtil.DESC_AMY)));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, CommandTestUtil.DESC_BOB)));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 34,
      "nordic96": 17,
      "lyskevin": 4,
      "-": 108
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EditEngagementDescriptor descriptorWithSameValues \u003d new EditCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                .EditEngagementDescriptor(CommandTestUtil.DESC_AMY);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertTrue(CommandTestUtil.DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertTrue(CommandTestUtil.DESC_AMY.equals(CommandTestUtil.DESC_AMY));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(CommandTestUtil.DESC_BOB));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EditCommand.EditEngagementDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(CommandTestUtil.DESC_AMY)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                .withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertFalse(CommandTestUtil.DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 6,
      "nordic96": 27
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 1,
      "nordic96": 1,
      "lyskevin": 4,
      "-": 15
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.updateFilteredEngagementList(predicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredEngagementList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.updateFilteredEngagementList(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredEngagementList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 13,
      "nordic96": 7,
      "-": 57
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private HelpCommand helpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        helpCommand \u003d new HelpCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertCommandSuccess(helpCommand, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        HelpCommand otherHelpCommand \u003d new HelpCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(helpCommand, helpCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(helpCommand, otherHelpCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 1,
      "nordic96": 1,
      "lyskevin": 29,
      "-": 8
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.getTypicalEngagementList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalIndexes.INDEX_FIRST_ENGAGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private ListCommand listCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        model \u003d new ModelManager(getTypicalEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        CommandTestUtil.showEngagementAtIndex(model, INDEX_FIRST_ENGAGEMENT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ListCommand otherListCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(listCommand, listCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(listCommand, otherListCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 1,
      "nordic96": 1,
      "lyskevin": 25,
      "-": 22
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/RedoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.getTypicalEngagementList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.getTypicalEngagements;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.exceptions.NullRedoableActionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.exceptions.NullUndoableActionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void setUp() throws NullUndoableActionException, NullRedoableActionException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        model.deleteEngagement(getTypicalEngagements().get(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.saveEngagementList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.undoEngagementList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel.deleteEngagement(getTypicalEngagements().get(0));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.undoEngagementList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.redoEngagementList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void execute_single_redoableState() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            setUp();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        } catch (NullUndoableActionException | NullRedoableActionException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new AssertionError(\"Error in initialising\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertFalse(new RedoCommand().equals(new UndoCommand()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(new RedoCommand().equals(new RedoCommand()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 7,
      "brebeek": 29,
      "lyskevin": 16
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/SortCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.getTypicalEngagementList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.util.EngagementComparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        model \u003d new ModelManager(getTypicalEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void execute_listIsSortedAlphabetical_showsSortedList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        expectedModel.setComparator(EngagementComparator.getComparator(\"ALPHABETICAL\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        expectedModel.updateSortedEngagementList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandSuccess(new SortCommand(EngagementComparator.getComparator(\"ALPHABETICAL\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                model, SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void execute_listIsSortedAlphabeticalDescend_showsSortedList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        expectedModel.setComparator(EngagementComparator.getComparator(\"ALPHABETICAL_REVERSE\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        expectedModel.updateSortedEngagementList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandSuccess(new SortCommand(EngagementComparator.getComparator(\"ALPHABETICAL_REVERSE\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                model, SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void execute_listIsSortedStartTime_showsSortedList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        expectedModel.setComparator(EngagementComparator.getComparator(\"START_TIME\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        expectedModel.updateSortedEngagementList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandSuccess(new SortCommand(EngagementComparator.getComparator(\"START_TIME\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                model, SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void execute_listIsSortedStartTimeDescend_showsSortedList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        expectedModel.setComparator(EngagementComparator.getComparator(\"START_TIME_REVERSE\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        expectedModel.updateSortedEngagementList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandSuccess(new SortCommand(EngagementComparator.getComparator(\"START_TIME_REVERSE\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                model, SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void execute_listIsSortedEndTime_showsSortedList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        expectedModel.setComparator(EngagementComparator.getComparator(\"END_TIME\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        expectedModel.updateSortedEngagementList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandSuccess(new SortCommand(EngagementComparator.getComparator(\"END_TIME\")),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                model, SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void execute_listIsSortedEndTimeDescend_showsSortedList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        expectedModel.setComparator(EngagementComparator.getComparator(\"END_TIME_REVERSE\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        expectedModel.updateSortedEngagementList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandSuccess(new SortCommand(EngagementComparator.getComparator(\"END_TIME_REVERSE\")),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                model, SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void execute_listIsSortedPriority_showsSortedList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        expectedModel.setComparator(EngagementComparator.getComparator(\"PRIORITY\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        expectedModel.updateSortedEngagementList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandSuccess(new SortCommand(EngagementComparator.getComparator(\"PRIORITY\")),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                model, SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void execute_listIsSortedPriorityDescend_showsSortedList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        expectedModel.setComparator(EngagementComparator.getComparator(\"PRIORITY_REVERSE\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        expectedModel.updateSortedEngagementList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandSuccess(new SortCommand(EngagementComparator.getComparator(\"PRIORITY_REVERSE\")),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                model, SortCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        SortCommand typicalSortCommand \u003d new SortCommand(EngagementComparator.END_TIME);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        SortCommand otherSortCommand \u003d new SortCommand(EngagementComparator.END_TIME);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(typicalSortCommand.equals(typicalSortCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertFalse(typicalSortCommand.equals(new UndoCommand()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(typicalSortCommand.equals(otherSortCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 99
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/TabCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.getTypicalEngagementList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.ui.Tab;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": " * Unit Test for {@code TabCommand}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nordic96"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": "public class TabCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public void execute_valid_tabCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        TabCommand tabCommand \u003d new TabCommand(new Tab(\"Generate Report\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertCommandSuccess(tabCommand, model, TabCommand.MESSAGE_SUCCESS + \"Generate Report\", model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        TabCommand tabCommandGame \u003d new TabCommand(new Tab(\"Typing Game\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertCommandSuccess(tabCommandGame, model,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                TabCommand.MESSAGE_SUCCESS + \"Typing Game\", model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        TabCommand tabCommandAppointment \u003d new TabCommand(new Tab(\"Calendar View\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertCommandSuccess(tabCommandAppointment, model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                TabCommand.MESSAGE_SUCCESS + \"Calendar View\", model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nordic96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        TabCommand tabCommandCalendar \u003d new TabCommand(new Tab(\"Add Engagement\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        assertCommandSuccess(tabCommandCalendar, model,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nordic96"
        },
        "content": "                TabCommand.MESSAGE_SUCCESS + \"Add Engagement\", model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nordic96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 26,
      "lyskevin": 9,
      "-": 8
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/UndoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.getTypicalEngagementList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.getTypicalEngagements;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.exceptions.NullUndoableActionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalEngagementList(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        model.deleteEngagement(getTypicalEngagements().get(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        model.saveEngagementList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        expectedModel.deleteEngagement(getTypicalEngagements().get(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        expectedModel.saveEngagementList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void execute_single_undoableState() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        setUp();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            expectedModel.undoEngagementList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        } catch (NullUndoableActionException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new AssertionError(\"Wrong null undoable command\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertFalse(new UndoCommand().equals(new RedoCommand()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(new UndoCommand().equals(new UndoCommand()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 4,
      "brebeek": 31,
      "lyskevin": 15
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/exceptions/CommandExceptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class CommandExceptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private static final String DUPLICATE_MESSAGE \u003d \"This engagement clashes with an already existing one\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private static final Throwable TYPICAL_EXCEPTION \u003d new Exception();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void fieldDuplicateMessage_throwDuplicateMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(new CommandException(DUPLICATE_MESSAGE).getMessage(),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                DUPLICATE_MESSAGE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void duplicateMessageAndTypicalCause_throwDuplicateMessageAndTypicalCause() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(new CommandException(DUPLICATE_MESSAGE, TYPICAL_EXCEPTION).getMessage(),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                DUPLICATE_MESSAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(new CommandException(DUPLICATE_MESSAGE, TYPICAL_EXCEPTION).getCause(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                TYPICAL_EXCEPTION);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 24
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/exceptions/DeleteDocumentExceptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class DeleteDocumentExceptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private static final String EXPECTED_MESSAGE \u003d \"Document file to delete does not appear in the directory.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void messageTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(new DeleteDocumentException().getMessage(), EXPECTED_MESSAGE);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 14
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/exceptions/GenerateExistingReportExceptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class GenerateExistingReportExceptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private static final String EXPECTED_MESSAGE \u003d \"Report already exists in the system!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void messageTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(new GenerateExistingReportException().getMessage(), EXPECTED_MESSAGE);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 14
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/exceptions/NullRedoableActionExceptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class NullRedoableActionExceptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private static final String EXPECTED_MESSAGE \u003d \"No command to redo!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void messageTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(new NullRedoableActionException().getMessage(), EXPECTED_MESSAGE);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 14
    }
  },
  {
    "path": "src/test/java/com/typee/logic/commands/exceptions/NullUndoableActionExceptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class NullUndoableActionExceptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private static final String EXPECTED_MESSAGE \u003d \"No command to undo!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void messageTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(new NullUndoableActionException().getMessage(), EXPECTED_MESSAGE);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 14
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a test class for the {@code ArgumentTokenizer}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * This is the unabridged test class used in AB3, migrated to Typee."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 5,
      "-": 149
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/InteractiveParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.InteractiveParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalIndexes.INDEX_FIRST_ENGAGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class InteractiveParserUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e InteractiveParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                MESSAGE_INVALID_INDEX, () -\u003e InteractiveParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(INDEX_FIRST_ENGAGEMENT, InteractiveParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(INDEX_FIRST_ENGAGEMENT, InteractiveParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e InteractiveParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e InteractiveParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(expectedName, InteractiveParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(expectedName, InteractiveParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 1,
      "uggi121": 12,
      "nordic96": 3,
      "lyskevin": 1,
      "-": 54
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/addmachine/AddCommandEndStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.addmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ATTENDEES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ENGAGEMENT_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.EndState;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.testutil.ArgumentMultimapBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.testutil.EngagementBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "class AddCommandEndStateTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void buildCommand_validCommand_returnsCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME, PREFIX_END_TIME, PREFIX_LOCATION,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                PREFIX_DESCRIPTION, PREFIX_ATTENDEES, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e args \u003d List.of(\"meeting\", \"01/01/2020/0100\", \"01/01/2020/0200\", \"University Town\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \"Tea party\", \"Alice Pauline\", \"low\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EndState endState \u003d new AddCommandEndState(ArgumentMultimapBuilder.build(prefixes, args));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EngagementBuilder engagementBuilder \u003d new EngagementBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        Engagement engagement \u003d engagementBuilder.buildAsMeeting();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(endState.buildCommand(), new AddCommand(engagement));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new AddCommandEndState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e state.transition(new ArgumentMultimap()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void getStateConstraints_valid_returnsConstraints() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new AddCommandEndState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(state.getStateConstraints(), \"Engagement successfully added!\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void isEndState_valid_returnsTrue() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new AddCommandEndState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertTrue(state.isEndState());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void getPrefix_valid_returnsPrefix() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new AddCommandEndState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(state.getPrefix(), new Prefix(\"\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 74
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/addmachine/AttendeesStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.addmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ATTENDEES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ENGAGEMENT_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.testutil.ArgumentMultimapBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "class AttendeesStateTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_validArgumentMultimapOneInput_returnsPostTransitionState() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // EP : Valid inputs - One attendee, more than one attendees."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // Test with two valid inputs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    PREFIX_END_TIME, PREFIX_LOCATION, PREFIX_DESCRIPTION, PREFIX_ATTENDEES);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // EP : One attendee"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e firstArgs \u003d List.of(\"interview\", \"16/01/2019/0000\", \"16/01/2019/0100\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    \"COM1-B-03\", \"CS2103T Discussion\", \"John\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // EP : More than one attendees"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e secondArgs \u003d List.of(\"interview\", \"19/02/2019/0300\", \"01/03/2020/0100\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    \"My house\", \"Team meeting\", \"Adam | Will Ma Man Smith | John Blair\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State firstState \u003d new AttendeesState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 5), firstArgs.subList(0, 5)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State secondState \u003d new AttendeesState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 5), secondArgs.subList(0, 5)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            ArgumentMultimap firstNewArgs \u003d ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(5, 6), firstArgs.subList(5, 6));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            ArgumentMultimap secondNewArgs \u003d ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(5, 6), secondArgs.subList(5, 6));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(firstState.transition(firstNewArgs),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    new PriorityState(ArgumentMultimapBuilder.build(prefixes, firstArgs)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(secondState.transition(secondNewArgs),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    new PriorityState(ArgumentMultimapBuilder.build(prefixes, secondArgs)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_validArgumentMultimapMultipleInputs_returnsPostTransitionState() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // EP : Valid inputs - One attendee, more than one attendee."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    PREFIX_END_TIME, PREFIX_LOCATION, PREFIX_DESCRIPTION, PREFIX_ATTENDEES, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // EP : One attendee."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e firstArgs \u003d List.of(\"meeting\", \"15/11/2019/1400\", \"15/11/2019/1500\", \"COM-1\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    \"Desc\", \"Smith\", \"Low\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // EP : More than one attendee."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e secondArgs \u003d List.of(\"meeting\", \"29/02/2016/1400\", \"29/02/2016/1600\", \"What is this\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    \"Desc\", \"Jon| Snow |Thrones\", \"none\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // EP : More than one attendee."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e thirdArgs \u003d List.of(\"meeting\", \"29/02/2016/1400\", \"29/02/2016/1600\", \"What is this\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    \"Desc\", \"Jon Snow Den\", \"none\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State firstInitialState \u003d new AttendeesState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 5), firstArgs.subList(0, 5)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State secondInitialState \u003d new AttendeesState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 5), secondArgs.subList(0, 5)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State thirdInitialState \u003d new AttendeesState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 5), thirdArgs.subList(0, 5)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State firstPostTransitionState \u003d firstInitialState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(5, 7), firstArgs.subList(5, 7)));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State secondPostTransitionState \u003d secondInitialState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(5, 7), secondArgs.subList(5, 7)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State thirdPostTransitionState \u003d thirdInitialState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(5, 7), thirdArgs.subList(5, 7)));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(firstPostTransitionState, new PriorityState(ArgumentMultimapBuilder.build"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    (prefixes.subList(0, 6), firstArgs.subList(0, 6))));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(secondPostTransitionState, new PriorityState(ArgumentMultimapBuilder.build"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    (prefixes.subList(0, 6), secondArgs.subList(0, 6))));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(thirdPostTransitionState, new PriorityState(ArgumentMultimapBuilder.build"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    (prefixes.subList(0, 6), thirdArgs.subList(0, 6))));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_validArgumentMultiMapInvalidInput_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Equivalence Partitions : Blank input, invalid name, invalid format, null."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Apply at most one invalid input heuristic for the tests."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME, PREFIX_END_TIME,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                PREFIX_LOCATION, PREFIX_DESCRIPTION, PREFIX_ATTENDEES);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Blank input"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e firstArgs \u003d List.of(\"appointment\", \"28/02/2015/1500\", \"28/02/2015/1600\", \"Com-2\", \"Desc\", \"  \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Blank input"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e secondArgs \u003d List.of(\"meeting\", \"28/02/2015/1500\", \"28/02/2015/1600\", \"FASS\", \"Desc\", \"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Invalid name"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e thirdArgs \u003d List.of(\"meeting\", \"28/02/2015/1500\", \"28/02/2015/1600\", \"FASS\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \"Desc\", \"Haddaway, 1993\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Invalid name"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e fourthArgs \u003d List.of(\"meeting\", \"28/02/2015/1500\", \"28/02/2015/1600\", \"FASS\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \"Desc\", \"What is Love |\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Invalid name"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e fifthArgs \u003d List.of(\"meeting\", \"28/02/2015/1500\", \"28/02/2015/1600\", \"FASS\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \"Desc\", \"Baby don\u0027t | Hurt Me | No More\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Invalid format"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e sixthArgs \u003d List.of(\"meeting\", \"28/02/2015/1500\", \"28/02/2015/1600\", \"FASS\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \"Desc\", \"This, Is, The, Rhythm\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Invalid format"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e seventhArgs \u003d List.of(\"meeting\", \"28/02/2015/1500\", \"28/02/2015/1600\", \"FASS\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \"Desc\", \"Of || The Night\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Invalid format"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e eighthArgs \u003d List.of(\"meeting\", \"28/02/2015/1500\", \"28/02/2015/1600\", \"FASS\","
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \"Desc\", \"Baby don\u0027t | Hurt Me | No More |\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // null can\u0027t be tested as an input since ArgumentMultimap doesn\u0027t support null arguments."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State firstState \u003d new AttendeesState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 5), firstArgs.subList(0, 5)));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State secondState \u003d new AttendeesState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 5), secondArgs.subList(0, 5)));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State thirdState \u003d new AttendeesState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 5), thirdArgs.subList(0, 5)));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State fourthState \u003d new AttendeesState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 5), fourthArgs.subList(0, 5)));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State fifthState \u003d new AttendeesState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 5), fifthArgs.subList(0, 5)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State sixthState \u003d new AttendeesState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 5), sixthArgs.subList(0, 5)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State seventhState \u003d new AttendeesState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 5), seventhArgs.subList(0, 5)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State eighthState \u003d new AttendeesState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 5), eighthArgs.subList(0, 5)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e firstState.transition("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(5, 6), firstArgs.subList(5, 6))));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e secondState.transition("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(5, 6), secondArgs.subList(5, 6))));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e thirdState.transition("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(5, 6), thirdArgs.subList(5, 6))));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e fourthState.transition("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(5, 6), fourthArgs.subList(5, 6))));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e fifthState.transition("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(5, 6), fifthArgs.subList(5, 6))));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e sixthState.transition("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(5, 6), sixthArgs.subList(5, 6))));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e seventhState.transition("
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(5, 6), seventhArgs.subList(5, 6))));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e eighthState.transition("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(5, 6), eighthArgs.subList(5, 6))));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_invalidArgumentMultimap_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Equivalence Partition : ArgumentMultimap without an attendees prefix, duplicate prefixes"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : No attendees prefix"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e firstPrefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME, PREFIX_END_TIME,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                PREFIX_LOCATION, PREFIX_DESCRIPTION, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Duplicate prefixes"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e secondPrefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME, PREFIX_END_TIME,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                PREFIX_LOCATION, PREFIX_DESCRIPTION, PREFIX_ATTENDEES, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e firstArgs \u003d List.of(\"interview\", \"15/11/2019/1500\", \"15/11/2019/1600\", \"COM-2\", \"desc\", \"low\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e secondArgs \u003d List.of(\"interview\", \"15/11/2019/1500\", \"15/11/2019/1600\", \"COM-2\", \"desc\","
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \"John | Kelly\", \"new desc\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State firstState \u003d new AttendeesState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                firstPrefixes.subList(0, 5), firstArgs.subList(0, 5)));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State secondState \u003d new AttendeesState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                secondPrefixes.subList(0, 5), secondArgs.subList(0, 5)));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e firstState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                firstPrefixes.subList(5, 6), firstArgs.subList(5, 6))));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e secondState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                secondPrefixes.subList(5, 7), secondArgs.subList(5, 7))));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void getStateConstraints_valid_returnsConstraints() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new AttendeesState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(state.getStateConstraints(), \"Please enter the list of attendees separated by\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                + \" vertical lines and prefixed by \\\"a/\\\". Only English names are supported.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void isEndState_valid_returnsFalse() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new AttendeesState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertFalse(state.isEndState());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void getPrefix_valid_returnsPrefix() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new AttendeesState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(state.getPrefix(), PREFIX_ATTENDEES);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 239
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/addmachine/DescriptionStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.addmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ATTENDEES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ENGAGEMENT_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.testutil.ArgumentMultimapBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "class DescriptionStateTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_validArgumentMultimapOneInput_returnsPostTransitionState() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // EP : Valid inputs - valid descriptions."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // Test with two valid inputs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    PREFIX_END_TIME, PREFIX_LOCATION, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e firstArgs \u003d List.of(\"interview\", \"16/01/2019/0000\", \"16/01/2019/0100\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    \"COM1-B-03\", \"CS2103T Discussion\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e secondArgs \u003d List.of(\"interview\", \"19/02/2019/0300\", \"01/03/2020/0100\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    \"My house\", \"Team meeting\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State firstState \u003d new DescriptionState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 4), firstArgs.subList(0, 4)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State secondState \u003d new DescriptionState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 4), secondArgs.subList(0, 4)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            ArgumentMultimap firstNewArgs \u003d ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(4, 5), firstArgs.subList(4, 5));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            ArgumentMultimap secondNewArgs \u003d ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(4, 5), secondArgs.subList(4, 5));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(firstState.transition(firstNewArgs),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    new AttendeesState(ArgumentMultimapBuilder.build(prefixes, firstArgs)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(secondState.transition(secondNewArgs),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    new AttendeesState(ArgumentMultimapBuilder.build(prefixes, secondArgs)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_validArgumentMultimapMultipleInputs_returnsPostTransitionState() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // EP : Non blank descriptions"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    PREFIX_END_TIME, PREFIX_LOCATION, PREFIX_DESCRIPTION, PREFIX_ATTENDEES, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e firstArgs \u003d List.of(\"meeting\", \"15/11/2019/1400\", \"15/11/2019/1500\", \"COM-1\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    \"Desc\", \"Smith\", \"Low\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e secondArgs \u003d List.of(\"meeting\", \"29/02/2016/1400\", \"29/02/2016/1600\", \"What is this\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    \"Desc\", \"Jon\", \"none\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State firstInitialState \u003d new DescriptionState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 4), firstArgs.subList(0, 4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State secondInitialState \u003d new DescriptionState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 4), secondArgs.subList(0, 4)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State firstPostTransitionState \u003d firstInitialState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(4, 7), firstArgs.subList(4, 7)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State secondPostTransitionState \u003d secondInitialState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(4, 7), secondArgs.subList(4, 7)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(firstPostTransitionState, new AttendeesState(ArgumentMultimapBuilder.build"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    (prefixes.subList(0, 5), firstArgs.subList(0, 5))));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(secondPostTransitionState, new AttendeesState(ArgumentMultimapBuilder.build"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    (prefixes.subList(0, 5), secondArgs.subList(0, 5))));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_validArgumentMultiMapInvalidInput_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Equivalence Partitions : Blank descriptions, null."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Apply at most one invalid input heuristic for the tests."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME, PREFIX_END_TIME,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                PREFIX_LOCATION, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Blank description."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e firstArgs \u003d List.of(\"appointment\", \"28/02/2015/1500\", \"28/02/2015/1600\", \"Com-2\", \"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Blank description."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e secondArgs \u003d List.of(\"meeting\", \"28/02/2015/1500\", \"28/02/2015/1600\", \"FASS\", \"  \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // null can\u0027t be tested as an input since ArgumentMultimap doesn\u0027t support null arguments."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State firstState \u003d new DescriptionState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 4), firstArgs.subList(0, 4)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State secondState \u003d new DescriptionState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 4), secondArgs.subList(0, 4)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e firstState.transition("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(4, 5), firstArgs.subList(4, 5))));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e secondState.transition("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(4, 5), secondArgs.subList(4, 5))));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_invalidArgumentMultimap_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Equivalence Partitions : ArgumentMultimap without a description prefix, duplicate prefixes."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : No description prefix"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e firstPrefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME, PREFIX_END_TIME,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                PREFIX_LOCATION, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Duplicate prefixes."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e secondPrefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME, PREFIX_END_TIME,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                PREFIX_LOCATION, PREFIX_DESCRIPTION, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e firstArgs \u003d List.of(\"interview\", \"15/11/2019/1500\", \"15/11/2019/1600\", \"COM-2\", \"low\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e secondArgs \u003d List.of(\"interview\", \"15/11/2019/1500\", \"15/11/2019/1600\", \"COM-2\", \"Desc\", \"PGP\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State firstState \u003d new DescriptionState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                firstPrefixes.subList(0, 4), firstArgs.subList(0, 4)));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State secondState \u003d new DescriptionState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                secondPrefixes.subList(0, 4), secondArgs.subList(0, 4)));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e firstState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                firstPrefixes.subList(4, 5), firstArgs.subList(4, 5))));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e secondState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                secondPrefixes.subList(4, 6), secondArgs.subList(4, 6))));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void getStateConstraints_valid_returnsConstraints() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new DescriptionState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(state.getStateConstraints(), \"Please enter a non-blank description prefixed by \\\"d/\\\".\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void isEndState_valid_returnsFalse() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new DescriptionState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertFalse(state.isEndState());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void getPrefix_valid_returnsPrefix() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new DescriptionState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(PREFIX_DESCRIPTION, state.getPrefix());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 172
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/addmachine/EndDateStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.addmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ENGAGEMENT_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.testutil.ArgumentMultimapBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "class EndDateStateTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_validArgumentMultimapOneInput_returnsPostTransitionState() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // EP : Valid inputs - valid dates."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // Test with two valid inputs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME, PREFIX_END_TIME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e firstArgs \u003d List.of(\"interview\", \"16/01/2019/0000\", \"16/01/2019/0100\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e secondArgs \u003d List.of(\"interview\", \"19/02/2019/0300\", \"01/03/2020/0100\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State firstState \u003d new EndDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 2), firstArgs.subList(0, 2)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State secondState \u003d new EndDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 2), secondArgs.subList(0, 2)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            ArgumentMultimap firstNewArgs \u003d ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(2, 3), firstArgs.subList(2, 3));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            ArgumentMultimap secondNewArgs \u003d ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(2, 3), secondArgs.subList(2, 3));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(firstState.transition(firstNewArgs),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    new LocationState(ArgumentMultimapBuilder.build(prefixes, firstArgs)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(secondState.transition(secondNewArgs),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    new LocationState(ArgumentMultimapBuilder.build(prefixes, secondArgs)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_validArgumentMultimapMultipleInputs_returnsPostTransitionState() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // Equivalence Partitions : Regular dates, leap years (leap day)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    PREFIX_END_TIME, PREFIX_LOCATION, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // EP : Regular day"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e firstArgs \u003d List.of(\"meeting\", \"15/11/2019/1400\", \"15/11/2019/1500\", \"COM-1\", \"Desc\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // EP : Leap day"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e secondArgs \u003d List.of(\"meeting\", \"29/02/2016/1400\", \"29/02/2016/1600\", \"COM-1\", \"Desc\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State firstInitialState \u003d new EndDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 2), firstArgs.subList(0, 2)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State secondInitialState \u003d new EndDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 2), secondArgs.subList(0, 2)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State firstPostTransitionState \u003d firstInitialState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(2, 5), firstArgs.subList(2, 5)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State secondPostTransitionState \u003d secondInitialState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(2, 5), secondArgs.subList(2, 5)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(firstPostTransitionState, new LocationState(ArgumentMultimapBuilder.build"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    (prefixes.subList(0, 3), firstArgs.subList(0, 3))));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(secondPostTransitionState, new LocationState(ArgumentMultimapBuilder.build"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    (prefixes.subList(0, 3), secondArgs.subList(0, 3))));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_validArgumentMultiMapInvalidInput_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Equivalence Partitions : Invalid day for the month, invalid month, invalid year, invalid time,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // string that is not a date, end date before start date, end date equals start date, blank string, null."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Apply at most one invalid input heuristic for the tests."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME, PREFIX_END_TIME);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Invalid day of the month."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e firstArgs \u003d List.of(\"appointment\", \"28/02/2015/1500\", \"31/02/2015/1600\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Invalid month."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e secondArgs \u003d List.of(\"appointment\", \"13/12/2018/1600\", \"13/13/2018/1600\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Invalid year."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e thirdArgs \u003d List.of(\"appointment\", \"13/12/2004/1454\", \"13/12/20004/1600\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Invalid time."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e fourthArgs \u003d List.of(\"appointment\", \"13/11/2018/2300\", \"13/11/2018/2400\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : String that is not a date."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e fifthArgs \u003d List.of(\"appointment\", \"13/11/2018/2359\", \"hello\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : End date-time before start date-time."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e sixthArgs \u003d List.of(\"appointment\", \"13/11/2018/2359\", \"13/11/2018/2350\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : End date-time equals start date-time"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e seventhArgs \u003d List.of(\"appointment\", \"13/11/2018/2359\", \"13/11/2018/2359\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Blank string."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e eighthArgs \u003d List.of(\"appointment\", \"13/11/2018/2359\", \"  \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // null can\u0027t be tested as an input since ArgumentMultimap doesn\u0027t support null arguments."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State firstState \u003d new EndDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 2), firstArgs.subList(0, 2)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State secondState \u003d new EndDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 2), secondArgs.subList(0, 2)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State thirdState \u003d new EndDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 2), thirdArgs.subList(0, 2)));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State fourthState \u003d new EndDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 2), fourthArgs.subList(0, 2)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State fifthState \u003d new EndDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 2), fifthArgs.subList(0, 2)));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State sixthState \u003d new EndDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 2), sixthArgs.subList(0, 2)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State seventhState \u003d new EndDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 2), seventhArgs.subList(0, 2)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State eighthState \u003d new EndDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 2), eighthArgs.subList(0, 2)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e firstState.transition("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(2, 3), firstArgs.subList(2, 3))));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e secondState.transition("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(2, 3), secondArgs.subList(2, 3))));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e thirdState.transition("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(2, 3), thirdArgs.subList(2, 3))));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e fourthState.transition("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(2, 3), fourthArgs.subList(2, 3))));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e fifthState.transition("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(2, 3), fifthArgs.subList(2, 3))));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e sixthState.transition("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(2, 3), sixthArgs.subList(2, 3))));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e seventhState.transition("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(2, 3), seventhArgs.subList(2, 3))));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e eighthState.transition("
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(2, 3), eighthArgs.subList(2, 3))));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_invalidArgumentMultimap_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Equivalence Partitions : ArgumentMultimap without an end date prefix,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // ArgumentMultimap with duplicate prefixes."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP :  No end date prefix."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e firstPrefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Duplicate prefix."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e secondPrefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME, PREFIX_END_TIME,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                PREFIX_ENGAGEMENT_TYPE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e firstArgs \u003d List.of(\"interview\", \"15/11/2019/1500\", \"COM1-B1-03\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e secondArgs \u003d List.of(\"interview\", \"15/11/2019/1500\", \"15/11/2019/1600\", \"meeting\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State firstState \u003d new EndDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                firstPrefixes.subList(0, 2), firstArgs.subList(0, 2)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State secondState \u003d new EndDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                secondPrefixes.subList(0, 2), secondArgs.subList(0, 2)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e firstState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                firstPrefixes.subList(2, 3), firstArgs.subList(2, 3))));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e secondState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                secondPrefixes.subList(2, 4), secondArgs.subList(2, 4))));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void getStateConstraints_valid_returnsConstraints() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new EndDateState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(state.getStateConstraints(), \"Please enter an end date and time prefixed by \\\"e/\\\".\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                + \" The start time must conform to the dd/mm/yyyy/hhmm format.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void isEndState_valid_returnsFalse() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new EndDateState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertFalse(state.isEndState());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void getPrefix_valid_returnsPrefix() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new EndDateState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(state.getPrefix(), PREFIX_END_TIME);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 209
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/addmachine/LocationStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.addmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ATTENDEES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ENGAGEMENT_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.testutil.ArgumentMultimapBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "class LocationStateTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_validArgumentMultimapOneInput_returnsPostTransitionState() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // EP : Valid inputs - valid locations."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // Test with two valid inputs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    PREFIX_END_TIME, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e firstArgs \u003d List.of(\"interview\", \"16/01/2019/0000\", \"16/01/2019/0100\", \"COM1-B-03\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e secondArgs \u003d List.of(\"interview\", \"19/02/2019/0300\", \"01/03/2020/0100\", \"My house\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State firstState \u003d new LocationState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 3), firstArgs.subList(0, 3)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State secondState \u003d new LocationState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 3), secondArgs.subList(0, 3)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            ArgumentMultimap firstNewArgs \u003d ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(3, 4), firstArgs.subList(3, 4));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            ArgumentMultimap secondNewArgs \u003d ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(3, 4), secondArgs.subList(3, 4));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(firstState.transition(firstNewArgs),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    new DescriptionState(ArgumentMultimapBuilder.build(prefixes, firstArgs)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(secondState.transition(secondNewArgs),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    new DescriptionState(ArgumentMultimapBuilder.build(prefixes, secondArgs)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_validArgumentMultimapMultipleInputs_returnsPostTransitionState() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // EP : Non blank locations"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    PREFIX_END_TIME, PREFIX_LOCATION, PREFIX_DESCRIPTION, PREFIX_ATTENDEES);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e firstArgs \u003d List.of(\"meeting\", \"15/11/2019/1400\", \"15/11/2019/1500\", \"COM-1\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    \"Desc\", \"Smith\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e secondArgs \u003d List.of(\"meeting\", \"29/02/2016/1400\", \"29/02/2016/1600\", \"What is this\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    \"Desc\", \"Jon\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State firstInitialState \u003d new LocationState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 3), firstArgs.subList(0, 3)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State secondInitialState \u003d new LocationState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 3), secondArgs.subList(0, 3)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State firstPostTransitionState \u003d firstInitialState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(3, 6), firstArgs.subList(3, 6)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State secondPostTransitionState \u003d secondInitialState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(3, 6), secondArgs.subList(3, 6)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(firstPostTransitionState, new DescriptionState(ArgumentMultimapBuilder.build"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    (prefixes.subList(0, 4), firstArgs.subList(0, 4))));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(secondPostTransitionState, new DescriptionState(ArgumentMultimapBuilder.build"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    (prefixes.subList(0, 4), secondArgs.subList(0, 4))));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_validArgumentMultiMapInvalidInput_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Equivalence Partitions : Blank locations, null."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Apply at most one invalid input heuristic for the tests."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME, PREFIX_END_TIME, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Blank location."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e firstArgs \u003d List.of(\"appointment\", \"28/02/2015/1500\", \"28/02/2015/1600\", \"  \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Blank location."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e secondArgs \u003d List.of(\"meeting\", \"28/02/2015/1500\", \"28/02/2015/1600\", \"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // null can\u0027t be tested as an input since ArgumentMultimap doesn\u0027t support null arguments."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State firstState \u003d new LocationState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 3), firstArgs.subList(0, 3)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State secondState \u003d new LocationState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 3), secondArgs.subList(0, 3)));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e firstState.transition("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(3, 4), firstArgs.subList(3, 4))));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e secondState.transition("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(3, 4), secondArgs.subList(3, 4))));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_invalidArgumentMultimap_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Equivalence Partitions : ArgumentMultimap without a location prefix, duplicate prefixes."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : No location prefix."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e firstPrefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                PREFIX_END_TIME, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Duplicate prefixes."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e secondPrefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                PREFIX_END_TIME, PREFIX_LOCATION, PREFIX_START_TIME);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e firstArgs \u003d List.of(\"interview\", \"15/11/2019/1500\", \"15/11/2019/1600\", \"Description\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e secondArgs \u003d List.of(\"interview\", \"15/11/2019/1500\", \"15/11/2019/1600\", \"Location\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \"16/11/2019/1500\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State firstState \u003d new LocationState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                firstPrefixes.subList(0, 3), firstArgs.subList(0, 3)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State secondState \u003d new LocationState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                secondPrefixes.subList(0, 3), secondArgs.subList(0, 3)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e firstState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                firstPrefixes.subList(3, 4), firstArgs.subList(3, 4))));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e secondState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                secondPrefixes.subList(3, 5), secondArgs.subList(3, 5))));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void getStateConstraints_valid_returnsConstraints() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new LocationState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(state.getStateConstraints(), \"Please enter the location of the meeting,\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                + \" prefixed by \\\"l/\\\".\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void isEndState_valid_returnsFalse() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new LocationState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertFalse(state.isEndState());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void getPrefix_valid_returnsPrefix() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new LocationState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(state.getPrefix(), PREFIX_LOCATION);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 170
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/addmachine/PriorityStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.addmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ATTENDEES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ENGAGEMENT_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ORDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.testutil.ArgumentMultimapBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "class PriorityStateTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_validArgumentMultimapOneInput_returnsPostTransitionState() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // EP : Valid inputs - valid priorities."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // Test with two valid inputs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    PREFIX_END_TIME, PREFIX_LOCATION, PREFIX_ATTENDEES, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e firstArgs \u003d List.of(\"interview\", \"16/01/2019/0000\", \"16/01/2019/0100\", \"COM1-B-03\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    \"Jon | Snow\", \"high\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e secondArgs \u003d List.of(\"interview\", \"19/02/2019/0300\", \"01/03/2020/0100\", \"My house\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    \"Will Smith\", \"NonE\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State firstState \u003d new PriorityState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 5), firstArgs.subList(0, 5)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State secondState \u003d new PriorityState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 5), secondArgs.subList(0, 5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            ArgumentMultimap firstNewArgs \u003d ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(5, 6), firstArgs.subList(5, 6));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            ArgumentMultimap secondNewArgs \u003d ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(5, 6), secondArgs.subList(5, 6));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(firstState.transition(firstNewArgs),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    new AddCommandEndState(ArgumentMultimapBuilder.build(prefixes, firstArgs)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(secondState.transition(secondNewArgs),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    new AddCommandEndState(ArgumentMultimapBuilder.build(prefixes, secondArgs)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_validArgumentMultiMapInvalidInput_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Equivalence Partitions : Invalid priorities, blank inputs, null"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Apply at most one invalid input heuristic for the tests."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME, PREFIX_END_TIME,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                PREFIX_LOCATION, PREFIX_ATTENDEES, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Invalid priority"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e firstArgs \u003d List.of(\"appointment\", \"28/02/2015/1500\", \"28/02/2015/1600\", \"COM-1\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \"My Name\", \"loww\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Invalid priority"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e secondArgs \u003d List.of(\"appointment\", \"28/02/2015/1500\", \"28/02/2015/1600\", \"COM-1\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \"My Name\", \"hi   || \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Blank input"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e thirdArgs \u003d List.of(\"appointment\", \"28/02/2015/1500\", \"28/02/2015/1600\", \"COM-1\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \"My Name\", \"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Blank input"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e fourthArgs \u003d List.of(\"appointment\", \"28/02/2015/1500\", \"28/02/2015/1600\", \"COM-1\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \"My Name\", \"  \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // null can\u0027t be tested as an input since ArgumentMultimap doesn\u0027t support null arguments."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State firstState \u003d new PriorityState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 5), firstArgs.subList(0, 5)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State secondState \u003d new PriorityState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 5), secondArgs.subList(0, 5)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State thirdState \u003d new PriorityState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 5), firstArgs.subList(0, 5)));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State fourthState \u003d new PriorityState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 5), firstArgs.subList(0, 5)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e firstState.transition("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(5, 6), firstArgs.subList(5, 6))));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e secondState.transition("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(5, 6), secondArgs.subList(5, 6))));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e thirdState.transition("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(5, 6), thirdArgs.subList(5, 6))));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e fourthState.transition("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(5, 6), fourthArgs.subList(5, 6))));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_invalidArgumentMultimap_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Equivalence Partitions : ArgumentMultimap without a priority level prefix,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // ArgumentMultimap with excessive args."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : No priority level prefix."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e firstPrefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME, PREFIX_END_TIME,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                PREFIX_DESCRIPTION, PREFIX_LOCATION, PREFIX_ATTENDEES);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Excessive arguments."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e secondPrefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME, PREFIX_END_TIME,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                PREFIX_DESCRIPTION, PREFIX_LOCATION, PREFIX_ATTENDEES, PREFIX_PRIORITY, PREFIX_ORDER);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e firstArgs \u003d List.of(\"interview\", \"15/11/2019/1500\", \"15/11/2019/1600\", \"Description\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \"Location\", \"Damn It\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e secondArgs \u003d List.of(\"interview\", \"15/11/2019/1500\", \"15/11/2019/1600\", \"Description\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \"Location\", \"Damn It\", \"low\", \"start\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State firstState \u003d new PriorityState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                firstPrefixes, firstArgs));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State secondState \u003d new PriorityState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                secondPrefixes.subList(0, 6), secondArgs.subList(0, 6)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e firstState.transition(new ArgumentMultimap()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e secondState.transition("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(secondPrefixes.subList(6, 8), secondArgs.subList(6, 8))));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void getStateConstraints_valid_returnsConstraints() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new PriorityState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(state.getStateConstraints(), \"The priority of an engagement can be\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                + \" LOW, MEDIUM, HIGH or NONE. Please enter the priority prefixed by \\\"p/\\\".\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void isEndState_valid_returnsFalse() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new PriorityState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertFalse(state.isEndState());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void getPrefix_valid_returnsPrefix() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new PriorityState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(state.getPrefix(), PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 160
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/addmachine/StartDateStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.addmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ENGAGEMENT_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.testutil.ArgumentMultimapBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "class StartDateStateTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_validArgumentMultimapOneInput_returnsPostTransitionState() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // Equivalence Partitions : valid dates."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e firstArgs \u003d List.of(\"interview\", \"14/07/2019/1631\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e secondArgs \u003d List.of(\"meeting\", \"22/12/2019/2358\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State firstState \u003d new StartDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 1), firstArgs.subList(0, 1)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State secondState \u003d new StartDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 1), secondArgs.subList(0, 1)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State firstPostTransitionState \u003d firstState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(1, 2), firstArgs.subList(1, 2)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State secondPostTransitionState \u003d secondState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(1, 2), secondArgs.subList(1, 2)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(firstPostTransitionState, new EndDateState("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    ArgumentMultimapBuilder.build(prefixes, firstArgs)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(secondPostTransitionState, new EndDateState("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    ArgumentMultimapBuilder.build(prefixes, secondArgs)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_validArgumentMultimapMultipleInputs_returnsPostTransitionState() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // Equivalence Partitions : Regular dates, leap years (leap day)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    PREFIX_END_TIME, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // EP : Regular day"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e firstArgs \u003d List.of(\"meeting\", \"30/11/2019/1400\", \"30/11/2019/1500\", \"COM-1\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // EP : Leap day"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e secondArgs \u003d List.of(\"meeting\", \"29/02/2016/1400\", \"15/11/2019/1500\", \"COM-1\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State firstInitialState \u003d new StartDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 1), firstArgs.subList(0, 1)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State secondInitialState \u003d new StartDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(0, 1), secondArgs.subList(0, 1)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State firstPostTransitionState \u003d firstInitialState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(1, 4), firstArgs.subList(1, 4)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State secondPostTransitionState \u003d secondInitialState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    prefixes.subList(1, 4), secondArgs.subList(1, 4)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(firstPostTransitionState, new EndDateState(ArgumentMultimapBuilder.build"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    (prefixes.subList(0, 2), firstArgs.subList(0, 2))));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(secondPostTransitionState, new EndDateState(ArgumentMultimapBuilder.build"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    (prefixes.subList(0, 2), secondArgs.subList(0, 2))));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_validArgumentMultiMapInvalidInput_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Equivalence Partitions : Invalid day for the month, invalid month, invalid year, invalid time,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // string that is not a date, blank string, null."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Apply at most one invalid input heuristic for the tests."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Invalid day of the month."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e firstArgs \u003d List.of(\"appointment\", \"31/02/2015/1600\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Invalid month."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e secondArgs \u003d List.of(\"appointment\", \"13/13/2018/1600\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Invalid year."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e thirdArgs \u003d List.of(\"appointment\", \"13/12/0000/1600\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Invalid time."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e fourthArgs \u003d List.of(\"appointment\", \"13/11/2018/2500\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : String that is not a date."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e fifthArgs \u003d List.of(\"appointment\", \"hello\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Blank string"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e sixthArgs \u003d List.of(\"meeting\", \"   \");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : null"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // null can\u0027t be tested as an input since ArgumentMultimap doesn\u0027t support null arguments."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State firstState \u003d new StartDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 1), firstArgs.subList(0, 1)));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State secondState \u003d new StartDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 1), secondArgs.subList(0, 1)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State thirdState \u003d new StartDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 1), thirdArgs.subList(0, 1)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State fourthState \u003d new StartDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 1), fourthArgs.subList(0, 1)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State fifthState \u003d new StartDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 1), fifthArgs.subList(0, 1)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State sixthState \u003d new StartDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                prefixes.subList(0, 1), sixthArgs.subList(0, 1)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e firstState.transition("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(1, 2), firstArgs.subList(1, 2))));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e secondState.transition("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(1, 2), secondArgs.subList(1, 2))));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e thirdState.transition("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(1, 2), thirdArgs.subList(1, 2))));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e fourthState.transition("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(1, 2), fourthArgs.subList(1, 2))));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e fifthState.transition("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(1, 2), fifthArgs.subList(1, 2))));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e sixthState.transition("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes.subList(1, 2), sixthArgs.subList(1, 2))));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_invalidArgumentMultimap_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Equivalence Partitions : ArgumentMultimap without a start date prefix,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // ArgumentMultimap with duplicate prefixes."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : No start-date prefix"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e firstPrefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_END_TIME, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Duplicate prefixes."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e secondPrefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                PREFIX_END_TIME, PREFIX_LOCATION, PREFIX_ENGAGEMENT_TYPE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e firstArgs \u003d List.of(\"interview\", \"15/11/2019/1500\", \"COM1-B1-03\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e secondArgs \u003d List.of(\"interview\", \"15/11/2019/1500\", \"15/11/2019/1600\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                \"COM1-B1-03\", \"meeting\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State firstState \u003d new StartDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                firstPrefixes.subList(0, 1), firstArgs.subList(0, 1)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State secondState \u003d new StartDateState(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                secondPrefixes.subList(0, 1), secondArgs.subList(0, 1)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e firstState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                firstPrefixes.subList(1, 3), firstArgs.subList(1, 3))));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e secondState.transition(ArgumentMultimapBuilder.build("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                secondPrefixes.subList(1, 5), secondArgs.subList(1, 5))));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void getStateConstraints_valid_returnsConstraints() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new StartDateState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(state.getStateConstraints(), \"Please enter a start date and time prefixed by \\\"s/\\\".\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                + \" The start time must conform to the dd/mm/yyyy/hhmm format.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void isEndState_valid_returnsFalse() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new StartDateState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertFalse(state.isEndState());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void getPrefix_valid_returnsPrefix() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new StartDateState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(PREFIX_START_TIME, state.getPrefix());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 194
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/addmachine/TypeStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.addmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_ENGAGEMENT_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.testutil.ArgumentMultimapBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "class TypeStateTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_validArgumentMultimapOneArgument_returnsPostTransitionState() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // EP : Argument multimap contains valid input and nothing else."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e firstArgs \u003d List.of(\"interview\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e secondArgs \u003d List.of(\"Appointment\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e thirdArgs \u003d List.of(\"meEtIng\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State firstState \u003d new TypeState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State secondState \u003d new TypeState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State thirdState \u003d new TypeState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(firstState.transition(ArgumentMultimapBuilder.build(prefixes, firstArgs)),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    new StartDateState(ArgumentMultimapBuilder.build(prefixes, firstArgs)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(secondState.transition(ArgumentMultimapBuilder.build(prefixes, secondArgs)),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    new StartDateState(ArgumentMultimapBuilder.build(prefixes, secondArgs)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(thirdState.transition(ArgumentMultimapBuilder.build(prefixes, thirdArgs)),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    new StartDateState(ArgumentMultimapBuilder.build(prefixes, thirdArgs)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_validArgumentMultimapMultipleArguments_returnsPostTransitionState() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // EP : ArgumentMultimap contains valid input along with other subsequent inputs."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE, PREFIX_START_TIME, PREFIX_END_TIME);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e arguments \u003d List.of(\"interview\", \"11/11/2019/1500\", \"11/11/2019/1600\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            ArgumentMultimap argumentMultimap \u003d ArgumentMultimapBuilder.build(prefixes, arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State initialState \u003d new TypeState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State postTransitionState \u003d initialState.transition(argumentMultimap);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            ArgumentMultimap newArgs \u003d ArgumentMultimapBuilder.build(prefixes, arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            newArgs.clearValues(PREFIX_START_TIME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            newArgs.clearValues(PREFIX_END_TIME);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(postTransitionState, new StartDateState(newArgs));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_validArgumentMultimapInvalidInput_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Equivalence Partitions : Non-blank invalid input, blank input"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_ENGAGEMENT_TYPE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Non-blank invalid input"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e firstArgs \u003d List.of(\"hahahaha\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Blank invalid input"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e secondArgs \u003d List.of(\"   \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State firstState \u003d new TypeState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State secondState \u003d new TypeState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e firstState.transition("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes, firstArgs)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e secondState.transition("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes, secondArgs)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : null"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // null can\u0027t be tested as an input value since ArgumentMultimap doesn\u0027t handle nulls."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_invalidArgumentMultimap_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : ArgumentMultimap doesn\u0027t contain the required prefix."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        argumentMultimap.put(PREFIX_START_TIME, \"15/11/2015/1500\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State initialState \u003d new TypeState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e initialState.transition(argumentMultimap));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void getStateConstraints_valid_returnsConstraints() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State typeState \u003d new TypeState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(\"Add Command initiated. Please enter a valid engagement type\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                + \" after the prefix \\\"t/\\\".\", typeState.getStateConstraints());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void isEndState_valid_returnsFalse() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State typeState \u003d new TypeState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertFalse(typeState.isEndState());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void getPrefix_valid_returnsPrefix() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State typeState \u003d new TypeState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(PREFIX_ENGAGEMENT_TYPE, typeState.getPrefix());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 130
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/calendarmachine/CalendarStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.calendarmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.CliSyntax;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class CalendarStateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private CalendarState calendarState;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        calendarState \u003d new CalendarState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition_validArgumentMultimap_returnsPostTransitionState() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            ArgumentMultimap validArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            validArgumentMultimap.put(CliSyntax.PREFIX_CALENDAR, \"opendisplay\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            validArgumentMultimap.put(CliSyntax.PREFIX_DATE, \"11/11/2019\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            ArgumentMultimap transitionArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            transitionArgumentMultimap.put(CliSyntax.PREFIX_CALENDAR, \"opendisplay\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            State postTransitionState \u003d calendarState.transition(transitionArgumentMultimap);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            transitionArgumentMultimap.put(CliSyntax.PREFIX_DATE, \"11/11/2019\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            postTransitionState \u003d postTransitionState.transition(transitionArgumentMultimap);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            assertEquals(postTransitionState, new CalendarState(validArgumentMultimap));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // StateTransitionException should not be thrown here."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition_tooManyArguments_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            ArgumentMultimap transitionArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            transitionArgumentMultimap.put(CliSyntax.PREFIX_CALENDAR, \"opendisplay\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            State postTransitionState \u003d calendarState.transition(transitionArgumentMultimap);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            transitionArgumentMultimap.put(CliSyntax.PREFIX_DATE, \"11/11/2019\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            postTransitionState \u003d postTransitionState.transition(transitionArgumentMultimap);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            transitionArgumentMultimap.put(CliSyntax.PREFIX_DATE, \"12/11/2019\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            State finalPostTransitionState \u003d postTransitionState;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                -\u003e finalPostTransitionState.transition(transitionArgumentMultimap));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // StateTransitionException should not be thrown here."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition_invalidDate_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            ArgumentMultimap transitionArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            transitionArgumentMultimap.put(CliSyntax.PREFIX_CALENDAR, \"opendisplay\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            State postTransitionState \u003d calendarState.transition(transitionArgumentMultimap);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            transitionArgumentMultimap.put(CliSyntax.PREFIX_DATE, \"29/02/2019\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            State finalPostTransitionState \u003d postTransitionState;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                -\u003e finalPostTransitionState.transition(transitionArgumentMultimap));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // StateTransitionException should not be thrown here."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition_invalidPrefix_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ArgumentMultimap invalidArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        invalidArgumentMultimap.put(new Prefix(\"hi\"), \"opendisplay\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            -\u003e calendarState.transition(invalidArgumentMultimap));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition_invalidTransitionArgumentMultimap_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ArgumentMultimap invalidArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        invalidArgumentMultimap.put(CliSyntax.PREFIX_CALENDAR, \"hi\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            -\u003e calendarState.transition(invalidArgumentMultimap));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getStateConstraints() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(calendarState.getStateConstraints(), \"What would you like to do with the calendar? Please enter\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                + \" the command prefixed by \\\"c/\\\". Allowed actions are\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                + \" \\\"nextmonth\\\", \\\"previousmonth\\\", \\\"opendisplay\\\", and \\\"closedisplay\\\".\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void isEndState() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(calendarState.isEndState());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getPrefix() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(calendarState.getPrefix(), CliSyntax.PREFIX_CALENDAR);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 109
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/calendarmachine/CloseDisplayEndStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.calendarmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.CalendarCloseDisplayCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.CliSyntax;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class CloseDisplayEndStateTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private CloseDisplayEndState closeDisplayEndState;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            argumentMultimap.put(CliSyntax.PREFIX_CALENDAR, \"closedisplay\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            State calendarState \u003d new CalendarState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            calendarState \u003d calendarState.transition(argumentMultimap);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            argumentMultimap.put(CliSyntax.PREFIX_DATE, \"11/11/2019\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            closeDisplayEndState \u003d (CloseDisplayEndState) calendarState.transition(argumentMultimap);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // StateTransitionException should not be thrown here."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void buildCommand_validDate_returnsCalendarCloseDisplayCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            LocalDate validDate \u003d LocalDate.of(2019, 11, 11);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            assertEquals(closeDisplayEndState.buildCommand(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    new CalendarCloseDisplayCommand(validDate));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // CommandException should not be thrown here."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            -\u003e closeDisplayEndState.transition(argumentMultimap));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getStateConstraints() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(closeDisplayEndState.getStateConstraints(), \"Closed engagement list window on the entered date.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void isEndState() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(closeDisplayEndState.isEndState());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getPrefix() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(closeDisplayEndState.getPrefix(), new Prefix(\"\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 73
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/calendarmachine/CloseDisplayStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.calendarmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.CliSyntax;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class CloseDisplayStateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private CloseDisplayState closeDisplayState;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            argumentMultimap.put(CliSyntax.PREFIX_CALENDAR, \"closedisplay\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            State calendarState \u003d new CalendarState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            closeDisplayState \u003d (CloseDisplayState) calendarState.transition(argumentMultimap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // StateTransitionException should not be thrown here."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition_validArgumentMultimap_returnsPostTransitionState() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            ArgumentMultimap validArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            validArgumentMultimap.put(CliSyntax.PREFIX_CALENDAR, \"closedisplay\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            validArgumentMultimap.put(CliSyntax.PREFIX_DATE, \"11/11/2019\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            ArgumentMultimap transitionArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            State postTransitionState \u003d closeDisplayState.transition(transitionArgumentMultimap);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            assertEquals(postTransitionState, new CalendarState(validArgumentMultimap));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // StateTransitionException should not be thrown here."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition_tooManyArguments_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            ArgumentMultimap transitionArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            transitionArgumentMultimap.put(CliSyntax.PREFIX_DATE, \"11/11/2019\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            State postTransitionState \u003d closeDisplayState.transition(transitionArgumentMultimap);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            transitionArgumentMultimap.put(CliSyntax.PREFIX_DATE, \"12/11/2019\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            State finalPostTransitionState \u003d postTransitionState;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                -\u003e finalPostTransitionState.transition(transitionArgumentMultimap));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // StateTransitionException should not be thrown here."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition_invalidDate_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ArgumentMultimap transitionArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        transitionArgumentMultimap.put(CliSyntax.PREFIX_DATE, \"29/02/2019\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        State finalPostTransitionState \u003d closeDisplayState;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            -\u003e finalPostTransitionState.transition(transitionArgumentMultimap));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition_invalidArgumentMultimap_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ArgumentMultimap invalidArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        invalidArgumentMultimap.put(new Prefix(\"hi\"), \"11/11/2019\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            -\u003e closeDisplayState.transition(invalidArgumentMultimap));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getStateConstraints() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(closeDisplayState.getStateConstraints(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                \"Please enter a date after \\\"d/\\\"/ The date must be in the dd/mm/yyyy format.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void isEndState() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(closeDisplayState.isEndState());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getPrefix() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(closeDisplayState.getPrefix(), CliSyntax.PREFIX_DATE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 96
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/calendarmachine/NextMonthStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.calendarmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.CalendarNextMonthCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.CliSyntax;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class NextMonthStateTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private NextMonthState nextMonthState;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            argumentMultimap.put(CliSyntax.PREFIX_CALENDAR, \"nextmonth\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            State calendarState \u003d new CalendarState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            nextMonthState \u003d (NextMonthState) calendarState.transition(argumentMultimap);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // StateTransitionException should not be thrown here."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void buildCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            assertEquals(nextMonthState.buildCommand(), new CalendarNextMonthCommand());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // CommandException should not be thrown here."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            -\u003e nextMonthState.transition(argumentMultimap));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getStateConstraints() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(nextMonthState.getStateConstraints(), \"Next month displayed.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void isEndState() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(nextMonthState.isEndState());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getPrefix() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(nextMonthState.getPrefix(), new Prefix(\"\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 65
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/calendarmachine/OpenDisplayEndStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.calendarmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.CalendarOpenDisplayCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.CliSyntax;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class OpenDisplayEndStateTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private OpenDisplayEndState openDisplayEndState;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            argumentMultimap.put(CliSyntax.PREFIX_CALENDAR, \"opendisplay\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            State calendarState \u003d new CalendarState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            calendarState \u003d calendarState.transition(argumentMultimap);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            argumentMultimap.put(CliSyntax.PREFIX_DATE, \"11/11/2019\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            openDisplayEndState \u003d (OpenDisplayEndState) calendarState.transition(argumentMultimap);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // StateTransitionException should not be thrown here."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void buildCommand_validDate_returnsCalendarOpenDisplayCommand() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            LocalDate validDate \u003d LocalDate.of(2019, 11, 11);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            assertEquals(openDisplayEndState.buildCommand(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    new CalendarOpenDisplayCommand(validDate));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // CommandException should not be thrown here."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            -\u003e openDisplayEndState.transition(argumentMultimap));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getStateConstraints() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(openDisplayEndState.getStateConstraints(), \"Displayed engagements on the entered date.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void isEndState() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(openDisplayEndState.isEndState());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getPrefix() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(openDisplayEndState.getPrefix(), new Prefix(\"\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 71
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/calendarmachine/OpenDisplayStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.calendarmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.CliSyntax;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class OpenDisplayStateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private OpenDisplayState openDisplayState;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            argumentMultimap.put(CliSyntax.PREFIX_CALENDAR, \"opendisplay\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            State calendarState \u003d new CalendarState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            openDisplayState \u003d (OpenDisplayState) calendarState.transition(argumentMultimap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // StateTransitionException should not be thrown here."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition_validArgumentMultimap_returnsPostTransitionState() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            ArgumentMultimap validArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            validArgumentMultimap.put(CliSyntax.PREFIX_CALENDAR, \"opendisplay\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            validArgumentMultimap.put(CliSyntax.PREFIX_DATE, \"11/11/2019\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            ArgumentMultimap transitionArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            State postTransitionState \u003d openDisplayState.transition(transitionArgumentMultimap);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            assertEquals(postTransitionState, new CalendarState(validArgumentMultimap));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // StateTransitionException should not be thrown here."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition_tooManyArguments_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            ArgumentMultimap transitionArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            transitionArgumentMultimap.put(CliSyntax.PREFIX_DATE, \"11/11/2019\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            State postTransitionState \u003d openDisplayState.transition(transitionArgumentMultimap);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            transitionArgumentMultimap.put(CliSyntax.PREFIX_DATE, \"12/11/2019\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            State finalPostTransitionState \u003d postTransitionState;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                -\u003e finalPostTransitionState.transition(transitionArgumentMultimap));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // StateTransitionException should not be thrown here."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition_invalidDate_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ArgumentMultimap transitionArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        transitionArgumentMultimap.put(CliSyntax.PREFIX_DATE, \"29/02/2019\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        State finalPostTransitionState \u003d openDisplayState;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            -\u003e finalPostTransitionState.transition(transitionArgumentMultimap));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition_invalidArgumentMultimap_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ArgumentMultimap invalidArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        invalidArgumentMultimap.put(new Prefix(\"hi\"), \"11/11/2019\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            -\u003e openDisplayState.transition(invalidArgumentMultimap));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getStateConstraints() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(openDisplayState.getStateConstraints(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                \"Please enter a valid date in the dd/mm/yyyy format, prefixed by \\\"d/\\\".\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void isEndState() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(openDisplayState.isEndState());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getPrefix() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(openDisplayState.getPrefix(), CliSyntax.PREFIX_DATE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 96
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/calendarmachine/PreviousMonthStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.calendarmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.CalendarPreviousMonthCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.CliSyntax;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class PreviousMonthStateTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private PreviousMonthState previousMonthState;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            argumentMultimap.put(CliSyntax.PREFIX_CALENDAR, \"previousmonth\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            State calendarState \u003d new CalendarState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            previousMonthState \u003d (PreviousMonthState) calendarState.transition(argumentMultimap);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // StateTransitionException should not be thrown here."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void buildCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            assertEquals(previousMonthState.buildCommand(), new CalendarPreviousMonthCommand());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // CommandException should not be thrown here."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            -\u003e previousMonthState.transition(argumentMultimap));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getStateConstraints() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(previousMonthState.getStateConstraints(), \"Previous month displayed.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void isEndState() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(previousMonthState.isEndState());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getPrefix() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(previousMonthState.getPrefix(), new Prefix(\"\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 65
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/clearmachine/ClearStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.clearmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "class ClearStateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private ClearState clearState;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        clearState \u003d new ClearState(argumentMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void buildCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(clearState.buildCommand(), new ClearCommand());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            -\u003e clearState.transition(argumentMultimap));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getStateConstraints() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(clearState.getStateConstraints(), \"Clear command initiated. Emptying engagement list.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void isEndState() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(clearState.isEndState());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getPrefix() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(clearState.getPrefix(), new Prefix(\"\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 52
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/currentmachine/CurrentStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.interactive.parser.state.currentmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.CurrentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class CurrentStateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private static final String CURRENT_MESSAGE \u003d \"Current message\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private CurrentState typicalCurrentState \u003d new CurrentState(CURRENT_MESSAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void transition() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e typicalCurrentState.transition(new ArgumentMultimap()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void buildCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(typicalCurrentState.buildCommand(), new CurrentCommand(CURRENT_MESSAGE)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void getStateConstraints() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(typicalCurrentState.getStateConstraints(), \"The parser is currently inactive.\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                + \" Please enter a command to get started.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void isEndState() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(typicalCurrentState.isEndState());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void getPrefix() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(typicalCurrentState.getPrefix(), new Prefix(\"\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 45
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/deletemachine/DeleteEndStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.deletemachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.CliSyntax;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "class DeleteEndStateTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private DeleteEndState deleteEndState;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        argumentMultimap.put(CliSyntax.PREFIX_LIST_INDEX, \"1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        deleteEndState \u003d new DeleteEndState(argumentMultimap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void buildCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            assertEquals(deleteEndState.buildCommand(), new DeleteCommand(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // CommandException should not be thrown here."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void buildCommand_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ArgumentMultimap argumentMultimapWithInvalidIndex \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        argumentMultimapWithInvalidIndex.put(CliSyntax.PREFIX_LIST_INDEX, \"-1\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        DeleteEndState invalidDeleteEndState \u003d new DeleteEndState(argumentMultimapWithInvalidIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e invalidDeleteEndState.buildCommand());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            -\u003e deleteEndState.transition(argumentMultimap));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getStateConstraints() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(deleteEndState.getStateConstraints(), \"Delete command end state\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void isEndState() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(deleteEndState.isEndState());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getPrefix() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(deleteEndState.getPrefix(), new Prefix(\"\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 68
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/deletemachine/IndexStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.deletemachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.CliSyntax;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "class IndexStateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private IndexState indexState;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        indexState \u003d new IndexState(argumentMultimap);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition_validArgumentMultimap_returnsPostTransitionState() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            ArgumentMultimap validArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            validArgumentMultimap.put(CliSyntax.PREFIX_LIST_INDEX, \"1\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            ArgumentMultimap transitionArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            transitionArgumentMultimap.put(CliSyntax.PREFIX_LIST_INDEX, \"1\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            State postTransitionState \u003d indexState.transition(transitionArgumentMultimap);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            assertEquals(postTransitionState, new IndexState(validArgumentMultimap));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // StateTransitionException should not be thrown here."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition_tooManyArguments_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            ArgumentMultimap transitionArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            transitionArgumentMultimap.put(CliSyntax.PREFIX_LIST_INDEX, \"1\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            State postTransitionState \u003d indexState.transition(transitionArgumentMultimap);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            transitionArgumentMultimap.put(CliSyntax.PREFIX_LIST_INDEX, \"1\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            State finalPostTransitionState \u003d postTransitionState;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                -\u003e finalPostTransitionState.transition(transitionArgumentMultimap));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // StateTransitionException should not be thrown here."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition_invalidIndex_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ArgumentMultimap transitionArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        transitionArgumentMultimap.put(CliSyntax.PREFIX_LIST_INDEX, \"0\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        State finalPostTransitionState \u003d indexState;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            -\u003e finalPostTransitionState.transition(transitionArgumentMultimap));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition_invalidArgumentMultimap_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ArgumentMultimap invalidArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        invalidArgumentMultimap.put(new Prefix(\"hi\"), \"1\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            -\u003e indexState.transition(invalidArgumentMultimap));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getStateConstraints() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(indexState.getStateConstraints(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                \"Delete command initiated. Please enter the index of the\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                + \" engagement you would like to delete. The index should be prefixed by \\\"i/\\\".\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void isEndState() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(indexState.isEndState());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getPrefix() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(indexState.getPrefix(), CliSyntax.PREFIX_LIST_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 91
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/exitmachine/ExitStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.interactive.parser.state.exitmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class ExitStateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private ExitState typicalExitState \u003d new ExitState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void transition() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e typicalExitState.transition(new ArgumentMultimap()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void buildCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(typicalExitState.buildCommand(), new ExitCommand()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void getStateConstraints() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(typicalExitState.getStateConstraints(), \"Goodbye!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void isEndState() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(typicalExitState.isEndState());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void getPrefix() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(typicalExitState.getPrefix(), new Prefix(\"\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 42
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/helpmachine/HelpStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.helpmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "class HelpStateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private HelpState helpState;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        helpState \u003d new HelpState(argumentMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void buildCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(helpState.buildCommand(), new HelpCommand());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            -\u003e helpState.transition(argumentMultimap));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getStateConstraints() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(helpState.getStateConstraints(), \"Please refer to the user guide for more information.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void isEndState() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(helpState.isEndState());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getPrefix() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(helpState.getPrefix(), new Prefix(\"\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 52
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/listmachine/ListStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.listmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "class ListStateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private ListState listState;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        listState \u003d new ListState(argumentMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void buildCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(listState.buildCommand(), new ListCommand());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void transition() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            -\u003e listState.transition(argumentMultimap));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getStateConstraints() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(listState.getStateConstraints(), \"Listed all engagements.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void isEndState() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(listState.isEndState());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getPrefix() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(listState.getPrefix(), new Prefix(\"\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 52
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/redomachine/RedoStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.redomachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class RedoStateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private RedoState typicalRedoState \u003d new RedoState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void transition() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e typicalRedoState.transition(new ArgumentMultimap()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void buildCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(typicalRedoState.buildCommand(), new RedoCommand()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void getStateConstraints() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(typicalRedoState.getStateConstraints(), \"The last undone command will be redone.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void isEndState() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(typicalRedoState.isEndState());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void getPrefix() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(typicalRedoState.getPrefix(), new Prefix(\"\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 41,
      "lyskevin": 1
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/sortmachine/OrderStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.sortmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.CliSyntax;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class OrderStateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private State postTransitionState;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            postTransitionState \u003d new PropertyState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            ArgumentMultimap transitionArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            transitionArgumentMultimap.put(CliSyntax.PREFIX_PROPERTY, \"start\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            postTransitionState \u003d postTransitionState.transition(transitionArgumentMultimap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            // StateTransitionException should not be thrown here."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void transition_validArgumentMultimap_returnsPostTransitionState() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        ArgumentMultimap validArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        validArgumentMultimap.put(CliSyntax.PREFIX_PROPERTY, \"start\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        validArgumentMultimap.put(CliSyntax.PREFIX_ORDER, \"ascending\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        ArgumentMultimap transitionArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        transitionArgumentMultimap.put(CliSyntax.PREFIX_ORDER, \"ascending\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            postTransitionState \u003d postTransitionState.transition(transitionArgumentMultimap);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            // StateTransitionException should not be thrown here."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(postTransitionState, new PropertyState(validArgumentMultimap));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void transition_invalidOrder_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            State postTransitionState \u003d new PropertyState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            ArgumentMultimap transitionArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            transitionArgumentMultimap.put(CliSyntax.PREFIX_PROPERTY, \"start\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            transitionArgumentMultimap.put(CliSyntax.PREFIX_ORDER, \"aschendung\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            postTransitionState \u003d postTransitionState.transition(transitionArgumentMultimap);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            State finalPostTransitionState \u003d postTransitionState;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                -\u003e finalPostTransitionState.transition(transitionArgumentMultimap));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            // StateTransitionException should be handled in assertThrows."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void getStateConstraints() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(postTransitionState.getStateConstraints(), \"Please enter the ordering to be followed,\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                + \" prefixed by \\\"o/\\\". Accepted orderings are \\\"ascending\\\" and \\\"descending\\\".\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void isEndState() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertFalse(postTransitionState.isEndState());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void getPrefix() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(postTransitionState.getPrefix(), new Prefix(\"o/\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 79,
      "lyskevin": 2
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/sortmachine/PropertyStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.logic.interactive.parser.state.sortmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.CliSyntax;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class PropertyStateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private static final PropertyState TYPICAL_PROPERTY_STATE \u003d new PropertyState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void transition_validArgumentMultimap_returnsPostTransitionState() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            ArgumentMultimap validArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            validArgumentMultimap.put(CliSyntax.PREFIX_PROPERTY, \"start\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            State postTransitionState \u003d new PropertyState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            ArgumentMultimap transitionArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            transitionArgumentMultimap.put(CliSyntax.PREFIX_PROPERTY, \"start\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            postTransitionState \u003d postTransitionState.transition(transitionArgumentMultimap);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            assertEquals(postTransitionState, new PropertyState(validArgumentMultimap));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            // StateTransitionException should not be thrown here."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void transition_invalidOrder_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            State postTransitionState \u003d new PropertyState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            ArgumentMultimap transitionArgumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            transitionArgumentMultimap.put(CliSyntax.PREFIX_PROPERTY, \"stadt\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            postTransitionState \u003d postTransitionState.transition(transitionArgumentMultimap);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            State finalPostTransitionState \u003d postTransitionState;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                -\u003e finalPostTransitionState.transition(transitionArgumentMultimap));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            // StateTransitionException should be handled in assertThrows."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void getStateConstraints() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(TYPICAL_PROPERTY_STATE.getStateConstraints(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                \"Sort command initiated. Please enter the property you would\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                + \" like to sort by, prefixed by \\\"p/\\\". The sortable properties are start date, end date, description\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                + \" and priority, to be specified as \\\"start\\\", \\\"end\\\", \\\"description\\\" and \\\"priority\\\" respectively.\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void isEndState() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertFalse(TYPICAL_PROPERTY_STATE.isEndState());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void getPrefix() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(TYPICAL_PROPERTY_STATE.getPrefix(), new Prefix(\"p/\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 69
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/sortmachine/SortEndStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.sortmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.CliSyntax;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.EndState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.util.EngagementComparator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class SortEndStateTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private EndState endStateStartAscending;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private EndState endStateStartDescending;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private EndState endStateEndAscending;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private EndState endStateEndDescending;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private EndState endStatePriorityAscending;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private EndState endStatePriorityDescending;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private EndState endStateDescriptionAscending;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private EndState endStateDescriptionDescending;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        endStateStartAscending \u003d produceEndstate(\"start\", \"ascending\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        endStateStartDescending \u003d produceEndstate(\"start\", \"descending\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        endStateEndAscending \u003d produceEndstate(\"end\", \"ascending\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        endStateEndDescending \u003d produceEndstate(\"end\", \"descending\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        endStatePriorityAscending \u003d produceEndstate(\"priority\", \"ascending\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        endStatePriorityDescending \u003d produceEndstate(\"priority\", \"descending\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        endStateDescriptionAscending \u003d produceEndstate(\"description\", \"ascending\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        endStateDescriptionDescending \u003d produceEndstate(\"description\", \"descending\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void buildCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertDoesNotThrow(()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            -\u003e assertEquals(endStateStartAscending.buildCommand(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            new SortCommand(EngagementComparator.START_TIME)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertDoesNotThrow(()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            -\u003e assertEquals(endStateStartDescending.buildCommand(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            new SortCommand(EngagementComparator.START_TIME_REVERSE)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertDoesNotThrow(()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            -\u003e assertEquals(endStateEndAscending.buildCommand(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            new SortCommand(EngagementComparator.END_TIME)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertDoesNotThrow(()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            -\u003e assertEquals(endStateEndDescending.buildCommand(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            new SortCommand(EngagementComparator.END_TIME_REVERSE)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertDoesNotThrow(()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            -\u003e assertEquals(endStateDescriptionAscending.buildCommand(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            new SortCommand(EngagementComparator.ALPHABETICAL)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertDoesNotThrow(()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            -\u003e assertEquals(endStateDescriptionDescending.buildCommand(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            new SortCommand(EngagementComparator.ALPHABETICAL_REVERSE)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertDoesNotThrow(()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            -\u003e assertEquals(endStatePriorityAscending.buildCommand(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            new SortCommand(EngagementComparator.PRIORITY)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertDoesNotThrow(()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            -\u003e assertEquals(endStatePriorityDescending.buildCommand(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            new SortCommand(EngagementComparator.PRIORITY_REVERSE)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void transition() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertThrows(StateTransitionException.class, ()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            -\u003e endStatePriorityDescending.transition(new ArgumentMultimap()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void getStateConstraints() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(endStatePriorityDescending.getStateConstraints(), \"Sorting engagements.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void isEndState() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(endStatePriorityDescending.isEndState());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void getPrefix() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(endStatePriorityDescending.getPrefix(), new Prefix(\"\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * Generates the SortEndState by the order StartAscending."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * @return generated SortEndState"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private EndState produceEndstate(String property, String order) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        EndState postTransitionState;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        ArgumentMultimap sofar \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        State state \u003d new PropertyState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        sofar.put(CliSyntax.PREFIX_PROPERTY, property);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            state \u003d state.transition(sofar);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            // StateTransitionException should not be thrown here."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new AssertionError();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        sofar.put(CliSyntax.PREFIX_ORDER, order);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            state \u003d state.transition(sofar);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            // StateTransitionException should not be thrown here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            throw new AssertionError();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        postTransitionState \u003d (EndState) state;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return postTransitionState;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 115,
      "lyskevin": 3
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/tabmachine/TabEndStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.tabmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_TAB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.TabCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.EndState;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.testutil.ArgumentMultimapBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.ui.Tab;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "class TabEndStateTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void buildCommand_validTabCalendarCommand_returnsCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_TAB);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e args \u003d List.of(\"calendar\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EndState state \u003d new TabEndState(ArgumentMultimapBuilder.build(prefixes, args));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        TabCommand tabCommand \u003d new TabCommand(new Tab(\"Calendar\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(state.buildCommand(), tabCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void buildCommand_validTabEngagementCommand_returnsCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_TAB);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e args \u003d List.of(\"engagement\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EndState state \u003d new TabEndState(ArgumentMultimapBuilder.build(prefixes, args));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        TabCommand tabCommand \u003d new TabCommand(new Tab(\"Engagement\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(state.buildCommand(), tabCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EndState endState \u003d new TabEndState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e endState.transition(new ArgumentMultimap()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void getStateConstraints_valid_returnsConstraints() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EndState endState \u003d new TabEndState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(endState.getStateConstraints(), \"Tab successfully shifted!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void isEndState_valid_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EndState endState \u003d new TabEndState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertTrue(endState.isEndState());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void getPrefix_valid_returnsPrefix() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        EndState endState \u003d new TabEndState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(endState.getPrefix(), new Prefix(\"\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 77
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/tabmachine/TabStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.logic.interactive.parser.state.tabmachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.logic.interactive.parser.CliSyntax.PREFIX_TAB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.State;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.testutil.ArgumentMultimapBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "class TabStateTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_validArgumentMultimapOneValidInput_returnsPostTransitionState() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // Equivalence partition : Valid tab inputs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_TAB);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // Calendar"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e firstArgs \u003d List.of(\"calendar\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            // Engagement"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            List\u003cString\u003e secondArgs \u003d List.of(\"engageMeNt\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State firstState \u003d new TabState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State secondState \u003d new TabState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State firstPostTransitionState \u003d firstState.transition("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    ArgumentMultimapBuilder.build(prefixes, firstArgs));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            State secondPostTransitionState \u003d secondState.transition("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    ArgumentMultimapBuilder.build(prefixes, secondArgs));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(firstPostTransitionState, new TabEndState("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    ArgumentMultimapBuilder.build(prefixes, firstArgs)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            assertEquals(secondPostTransitionState, new TabEndState("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                    ArgumentMultimapBuilder.build(prefixes, secondArgs)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        } catch (StateTransitionException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_validArgumentMultimapInvalidInput_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Equivalence Partitions : Invalid tabs, blank strings."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_TAB);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Invalid tab"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e firstArgs \u003d List.of(\"myTab\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Invalid tab"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e secondArgs \u003d List.of(\"DamithIsGod\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Blank string"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e thirdArgs \u003d List.of(\"  \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP : Blank string"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e fourthArgs \u003d List.of(\"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State firstState \u003d new TabState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State secondState \u003d new TabState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State thirdState \u003d new TabState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State fourthState \u003d new TabState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e firstState.transition("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes, firstArgs)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e secondState.transition("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes, secondArgs)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e thirdState.transition("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes, thirdArgs)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e fourthState.transition("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes, fourthArgs)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void transition_invalidArgumentMultimap_throwsStateTransitionException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // Equivalence Partitions : Missing prefix, excessive arguments."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP - Missing prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State firstState \u003d new TabState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e firstState.transition(new ArgumentMultimap()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        // EP - Excessive arguments."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cPrefix\u003e prefixes \u003d List.of(PREFIX_TAB, PREFIX_DATE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        List\u003cString\u003e args \u003d List.of(\"Engagement\", \"11/01/2000\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State secondState \u003d new TabState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e secondState.transition("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                ArgumentMultimapBuilder.build(prefixes, args)));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void getStateConstraints_valid_returnsConstraints() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new TabState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(state.getStateConstraints(), \"Tab command initiated. Please enter the tab you would like\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                + \" to shift to, prefixed by \\\"b/\\\".\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                + \" The available tabs are \\\"game\\\", \\\"calendar\\\", \\\"engagement\\\" and \\\"report\\\".\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void isEndState_valid_returnsFalse() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new TabState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertFalse(state.isEndState());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void getPrefix_valid_returnsPrefix() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        State state \u003d new TabState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(state.getPrefix(), PREFIX_TAB);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 122
    }
  },
  {
    "path": "src/test/java/com/typee/logic/interactive/parser/state/undomachine/UndoStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.logic.interactive.parser.state.undomachine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.logic.interactive.parser.state.exceptions.StateTransitionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class UndoStateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private UndoState typicalUndoState \u003d new UndoState(new ArgumentMultimap());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void transition() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertThrows(StateTransitionException.class, () -\u003e typicalUndoState.transition(new ArgumentMultimap()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void buildCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(typicalUndoState.buildCommand(), new UndoCommand()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void getStateConstraints() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(typicalUndoState.getStateConstraints(), \"The latest undoable command will be undone.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void isEndState() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(typicalUndoState.isEndState());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void getPrefix() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(typicalUndoState.getPrefix(), new Prefix(\"\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 41,
      "lyskevin": 1
    }
  },
  {
    "path": "src/test/java/com/typee/model/EngagementListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.TYPICAL_APPOINTMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.TYPICAL_INTERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.TYPICAL_MEETING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.getTypicalEngagementList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.testutil.EngagementBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class EngagementListTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private final EngagementList engagementList \u003d new HistoryManager(new EngagementList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(Collections.emptyList(), engagementList.getEngagementList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e engagementList.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void resetData_withValidReadOnlyEngagementList_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementList newData \u003d getTypicalEngagementList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementList.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(newData, engagementList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void resetData_withDuplicateAppointments_noExceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // Two engagements with the same details"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement editedAppointment \u003d new EngagementBuilder(TYPICAL_APPOINTMENT).buildAsAppointment();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        List\u003cEngagement\u003e newEngagements \u003d Arrays.asList(TYPICAL_APPOINTMENT, editedAppointment);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementListStub newData \u003d new EngagementListStub(newEngagements);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        engagementList.resetData(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void hasEngagement_nullEngagement_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e engagementList.hasEngagement(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void hasAppointment_appointmentNotInEngagementList_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(engagementList.hasEngagement(TYPICAL_APPOINTMENT));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void hasInterview_interviewNotInEngagementList_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(engagementList.hasEngagement(TYPICAL_INTERVIEW));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void hasMeeting_meetingNotInEngagementList_returnsFalse() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(engagementList.hasEngagement(TYPICAL_MEETING));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void hasAppointment_appointmentInEngagementList_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementList.addEngagement(TYPICAL_APPOINTMENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(engagementList.hasEngagement(TYPICAL_APPOINTMENT));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void hasInterview_interviewInEngagementList_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementList.addEngagement(TYPICAL_INTERVIEW);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(engagementList.hasEngagement(TYPICAL_INTERVIEW));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void hasMeeting_meetingInEngagementList_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementList.addEngagement(TYPICAL_MEETING);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(engagementList.hasEngagement(TYPICAL_MEETING));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void hasAppointment_appointmentWithSameDetailsInEngagementList_returnsTrue() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementList.addEngagement(TYPICAL_APPOINTMENT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement editedAppointment \u003d new EngagementBuilder(TYPICAL_APPOINTMENT).buildAsAppointment();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(engagementList.hasEngagement(editedAppointment));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void hasInterview_interviewWithSameDetailsInEngagementList_returnsTrue() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementList.addEngagement(TYPICAL_INTERVIEW);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement editedInterview \u003d new EngagementBuilder(TYPICAL_INTERVIEW).buildAsInterview();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(engagementList.hasEngagement(editedInterview));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void hasMeeting_meetingWithSameDetailsInEngagementList_returnsTrue() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementList.addEngagement(TYPICAL_MEETING);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement editedMeeting \u003d new EngagementBuilder(TYPICAL_MEETING).buildAsMeeting();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(engagementList.hasEngagement(editedMeeting));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getEngagementList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e engagementList.getEngagementList().remove(0));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * A stub ReadOnlyEngagementList whose engagement list can violate interface constraints."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static class EngagementListStub implements ReadOnlyEngagementList {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        private final ObservableList\u003cEngagement\u003e engagements \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementListStub(Collection\u003cEngagement\u003e engagements) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            this.engagements.setAll(engagements);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        public ObservableList\u003cEngagement\u003e getEngagementList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            return engagements;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        public boolean isConflictingEngagement(Engagement engagement) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 5,
      "brebeek": 2,
      "lyskevin": 134
    }
  },
  {
    "path": "src/test/java/com/typee/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static com.typee.testutil.TypicalReports.TYPICAL_REPORT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static com.typee.testutil.TypicalReports.TYPICAL_REPORT_DIFF;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.itextpdf.text.DocumentException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.logic.commands.exceptions.DeleteDocumentException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.logic.commands.exceptions.GenerateExistingReportException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import com.typee.testutil.TypicalEngagements;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public File tempDir;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws DocumentException, GenerateExistingReportException, IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.saveReport(tempDir.toPath(), TYPICAL_REPORT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(new EngagementList(), new EngagementList(modelManager.getEngagementList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveReport_repeating() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(GenerateExistingReportException.class, () -\u003e modelManager.saveReport(tempDir.toPath(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                TYPICAL_REPORT));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteReport() throws DeleteDocumentException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, modelManager.deleteReport(tempDir.toPath(), TYPICAL_REPORT));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteReport_invalid() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DeleteDocumentException.class, () -\u003e modelManager.deleteReport(tempDir.toPath(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                TYPICAL_REPORT_DIFF));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        EngagementList engagementList \u003d TypicalEngagements.getTypicalEngagementList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        EngagementList differentAddressBook \u003d new EngagementList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(engagementList, userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(engagementList, userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // different engagementList -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(engagementList, differentUserPrefs)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasEngagement(null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertFalse(modelManager.hasEngagement(ALICE));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        modelManager.addEngagement(ALICE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertTrue(modelManager.hasEngagement(ALICE));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredEngagementList().remove(0));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 6,
      "nordic96": 1,
      "lyskevin": 3,
      "-": 144
    }
  },
  {
    "path": "src/test/java/com/typee/model/SampleDataUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.engagement.AttendeeList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.engagement.Location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.engagement.Meeting;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.engagement.Priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class SampleDataUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void getSampleEngagements() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        Engagement engagementFetched \u003d SampleDataUtil.getSampleEngagements()[0];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        equalsSampleEngagement(engagementFetched);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void getSampleEngagementList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, ()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "            -\u003e SampleDataUtil.getSampleEngagementList().getEngagementList().get(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        equalsSampleEngagement(SampleDataUtil.getSampleEngagementList().getEngagementList().get(0));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * Compares the engagement under test with the expected engagement and throw assertion error if not match."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     * @param engagementFetched engagement under test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private void equalsSampleEngagement(Engagement engagementFetched) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertTrue(engagementFetched instanceof Meeting));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(engagementFetched.getAttendees(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                new AttendeeList(Arrays.asList(new Person[]{new Person(new Name(\"Uggi\"))}))));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(engagementFetched.getLocation(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                new Location(\"SR-10\"), \"Test\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertDoesNotThrow(() -\u003e assertEquals(engagementFetched.getPriority(), Priority.HIGH));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 49
    }
  },
  {
    "path": "src/test/java/com/typee/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/com/typee/model/engagement/AttendeeListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.model.engagement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import com.typee.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class AttendeeListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void isValid_validNames_returnTrue() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        //Single entry"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(AttendeeList.isValid(\" Tom \"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        //Multiple entry"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(AttendeeList.isValid(\" Tom|Jerry|Mary|Sheep \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void isValid_blankString_returnFalse() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertFalse(AttendeeList.isValid(\"  \"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void isValid_invalidNames_returnFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        //Non-english characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertFalse(AttendeeList.isValid(\"Früser Begrußman\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertFalse(AttendeeList.isValid(\"宮崎かおる\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void getListGivenValidInput() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        //Single entry"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(AttendeeList.getListGivenValidInput(\" Tom \").getAttendees().get(0), new Person(new Name(\"Tom\")));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        //Multiple entry"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(AttendeeList.getListGivenValidInput(\" Tom|Jerry|Mary|Sheep \"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                new AttendeeList(Arrays.asList(new Person(new Name(\"Tom\")), new Person(new Name(\"Jerry\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                        new Person(new Name(\"Mary\")), new Person(new Name(\"Sheep\")))));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void getAttendees() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(AttendeeList.getListGivenValidInput(\" Tom|Jerry|Mary|Sheep \").getAttendees(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                Arrays.asList(new Person(new Name(\"Tom\")), new Person(new Name(\"Jerry\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                        new Person(new Name(\"Mary\")), new Person(new Name(\"Sheep\"))));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(AttendeeList.getListGivenValidInput(\" Tom|Jerry|Mary|Sheep \").toString(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                \"[Tom | Jerry | Mary | Sheep]\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        AttendeeList attendeeList \u003d new AttendeeList(Arrays.asList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        //short-circuit equals"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(attendeeList.equals(attendeeList));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        //not instanceof"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertFalse(attendeeList.equals(Arrays.asList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 67
    }
  },
  {
    "path": "src/test/java/com/typee/model/engagement/exceptions/DuplicateEngagementExceptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.model.engagement.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class DuplicateEngagementExceptionTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void messageTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(new DuplicateEngagementException().getMessage(),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "                \"Operation would result in duplicate engagements\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void classTest() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(new DuplicateEngagementException() instanceof RuntimeException);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 19
    }
  },
  {
    "path": "src/test/java/com/typee/model/engagement/exceptions/InvalidTimeExceptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.model.engagement.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class InvalidTimeExceptionTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    private static final String MESSAGE \u003d \"Invalid time\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void messageTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(new InvalidTimeException(MESSAGE).getMessage(), MESSAGE);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void classTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(new DuplicateEngagementException() instanceof Exception);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 20
    }
  },
  {
    "path": "src/test/java/com/typee/model/person/AppointmentTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.VALID_DESCRIPTION_LUNCH_APPOINTMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.LUNCH_APPOINTMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.TYPICAL_APPOINTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.testutil.EngagementBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class AppointmentTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void isSameAppointment() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(TYPICAL_APPOINTMENT.isSameEngagement(TYPICAL_APPOINTMENT));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_APPOINTMENT.isSameEngagement(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement editedAppointment \u003d new EngagementBuilder(TYPICAL_APPOINTMENT)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_LUNCH_APPOINTMENT)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .buildAsAppointment();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_APPOINTMENT.isSameEngagement(editedAppointment));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement appointmentCopy \u003d new EngagementBuilder(TYPICAL_APPOINTMENT).buildAsAppointment();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(TYPICAL_APPOINTMENT.equals(appointmentCopy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(TYPICAL_APPOINTMENT.equals(TYPICAL_APPOINTMENT));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_APPOINTMENT.equals(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_APPOINTMENT.equals(5));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different appointment -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_APPOINTMENT.equals(LUNCH_APPOINTMENT));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement editedAppointment \u003d new EngagementBuilder(TYPICAL_APPOINTMENT)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_LUNCH_APPOINTMENT)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .buildAsAppointment();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_APPOINTMENT.equals(editedAppointment));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 56
    }
  },
  {
    "path": "src/test/java/com/typee/model/person/InterviewTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.VALID_DESCRIPTION_GOOGLE_INTERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.GOOGLE_INTERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.TYPICAL_INTERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.testutil.EngagementBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class InterviewTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void isSameInterview() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(TYPICAL_INTERVIEW.isSameEngagement(TYPICAL_INTERVIEW));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_INTERVIEW.isSameEngagement(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement editedInterview \u003d new EngagementBuilder(TYPICAL_INTERVIEW)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_GOOGLE_INTERVIEW)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .buildAsInterview();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_INTERVIEW.isSameEngagement(editedInterview));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement interviewCopy \u003d new EngagementBuilder(TYPICAL_INTERVIEW).buildAsInterview();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(TYPICAL_INTERVIEW.equals(interviewCopy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(TYPICAL_INTERVIEW.equals(TYPICAL_INTERVIEW));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_INTERVIEW.equals(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_INTERVIEW.equals(5));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different interview -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_INTERVIEW.equals(GOOGLE_INTERVIEW));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement editedInterview \u003d new EngagementBuilder(TYPICAL_INTERVIEW)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_GOOGLE_INTERVIEW)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .buildAsInterview();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_INTERVIEW.equals(editedInterview));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 56
    }
  },
  {
    "path": "src/test/java/com/typee/model/person/MeetingTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TEAM_MEETING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.TEAM_MEETING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.TYPICAL_MEETING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.testutil.EngagementBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class MeetingTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void isSameMeeting() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(TYPICAL_MEETING.isSameEngagement(TYPICAL_MEETING));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_MEETING.isSameEngagement(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement editedMeeting \u003d new EngagementBuilder(TYPICAL_MEETING)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TEAM_MEETING)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .buildAsMeeting();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_MEETING.isSameEngagement(editedMeeting));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement meetingCopy \u003d new EngagementBuilder(TYPICAL_MEETING).buildAsMeeting();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(TYPICAL_MEETING.equals(meetingCopy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertTrue(TYPICAL_MEETING.equals(TYPICAL_MEETING));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_MEETING.equals(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_MEETING.equals(5));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different meeting -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_MEETING.equals(TEAM_MEETING));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement editedMeeting \u003d new EngagementBuilder(TYPICAL_MEETING)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TEAM_MEETING)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                .buildAsMeeting();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertFalse(TYPICAL_MEETING.equals(editedMeeting));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 56
    }
  },
  {
    "path": "src/test/java/com/typee/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "*/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 1,
      "nordic96": 2,
      "lyskevin": 4,
      "-": 71
    }
  },
  {
    "path": "src/test/java/com/typee/model/person/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/com/typee/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "//import static com.typee.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "//import static com.typee.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private final UniqueEngagementList uniquePersonList \u003d new UniqueEngagementList();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setEngagement(null, ALICE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setEngagement(ALICE, null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setEngagement(ALICE, ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        uniquePersonList.setEngagement(ALICE, ALICE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        UniqueEngagementList expectedUniquePersonList \u003d new UniqueEngagementList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        uniquePersonList.setEngagement(ALICE, editedAlice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        UniqueEngagementList expectedUniquePersonList \u003d new UniqueEngagementList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        uniquePersonList.setEngagement(ALICE, BOB);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        UniqueEngagementList expectedUniquePersonList \u003d new UniqueEngagementList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setEngagement(ALICE, BOB));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        UniqueEngagementList expectedUniquePersonList \u003d new UniqueEngagementList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setEngagements((UniqueEngagementList) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        UniqueEngagementList expectedUniquePersonList \u003d new UniqueEngagementList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        uniquePersonList.setEngagements(expectedUniquePersonList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        UniqueEngagementList expectedUniquePersonList \u003d new UniqueEngagementList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e uniquePersonList.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "                .remove(0));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 4,
      "uggi121": 21,
      "nordic96": 1,
      "-": 129
    }
  },
  {
    "path": "src/test/java/com/typee/model/person/exceptions/DuplicatePersonExceptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brebeek"
        },
        "content": "package com.typee.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brebeek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brebeek"
        },
        "content": "public class DuplicatePersonExceptionTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void messageTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertEquals(new DuplicatePersonException().getMessage(), \"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brebeek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public void classTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        assertTrue(new DuplicatePersonException() instanceof RuntimeException);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brebeek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brebeek": 18
    }
  },
  {
    "path": "src/test/java/com/typee/storage/JsonAdaptedEngagementTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static com.typee.testutil.TypicalEngagements.TEAM_MEETING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "class JsonAdaptedEngagementTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String INVALID_ENGAGEMENT_TYPE \u003d \"What is this?\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String INVALID_TIME_SLOT \u003d TEAM_MEETING.getTimeSlot().toString() + \"hehe\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String INVALID_LOCATION \u003d \"    \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"  \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String INVALID_ATTENDEES \u003d \"YO|||\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"priority?!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String VALID_ENGAGEMENT_TYPE \u003d \"meeting\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String VALID_TIME_SLOT \u003d TEAM_MEETING.getTimeSlot().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String VALID_LOCATION \u003d \"I3-AUD\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"CS2103T Lecture\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String VALID_ATTENDEES \u003d \"Damith | And His | Boys\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private static final String VALID_PRIORITY \u003d \"HIGH\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void toModelType_validEngagement_returnsEngagement() throws IllegalValueException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        JsonAdaptedEngagement jsonAdaptedEngagement \u003d new JsonAdaptedEngagement(TEAM_MEETING);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertEquals(TEAM_MEETING, jsonAdaptedEngagement.toModelType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void toModelType_invalidEngagementType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        JsonAdaptedEngagement jsonAdaptedEngagement \u003d new JsonAdaptedEngagement(INVALID_ENGAGEMENT_TYPE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                VALID_TIME_SLOT, VALID_LOCATION, VALID_DESCRIPTION, VALID_ATTENDEES, VALID_PRIORITY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e jsonAdaptedEngagement.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void toModelType_nullEngagementType_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        JsonAdaptedEngagement jsonAdaptedEngagement \u003d new JsonAdaptedEngagement(null,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                VALID_TIME_SLOT, VALID_LOCATION, VALID_DESCRIPTION, VALID_ATTENDEES, VALID_PRIORITY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e jsonAdaptedEngagement.toModelType());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void toModelType_invalidTimeSlot_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        JsonAdaptedEngagement jsonAdaptedEngagement \u003d new JsonAdaptedEngagement(VALID_ENGAGEMENT_TYPE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                INVALID_TIME_SLOT, VALID_LOCATION, VALID_DESCRIPTION, VALID_ATTENDEES, VALID_PRIORITY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e jsonAdaptedEngagement.toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void toModelType_nullTimeSlot_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        JsonAdaptedEngagement jsonAdaptedEngagement \u003d new JsonAdaptedEngagement(VALID_ENGAGEMENT_TYPE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                null, VALID_LOCATION, VALID_DESCRIPTION, VALID_ATTENDEES, VALID_PRIORITY);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e jsonAdaptedEngagement.toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void toModelType_invalidLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        JsonAdaptedEngagement jsonAdaptedEngagement \u003d new JsonAdaptedEngagement(VALID_ENGAGEMENT_TYPE,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                VALID_TIME_SLOT, INVALID_LOCATION, VALID_DESCRIPTION, VALID_ATTENDEES, VALID_PRIORITY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e jsonAdaptedEngagement.toModelType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void toModelType_nullLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        JsonAdaptedEngagement jsonAdaptedEngagement \u003d new JsonAdaptedEngagement(VALID_ENGAGEMENT_TYPE,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                VALID_TIME_SLOT, null, VALID_DESCRIPTION, VALID_ATTENDEES, VALID_PRIORITY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e jsonAdaptedEngagement.toModelType());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        JsonAdaptedEngagement jsonAdaptedEngagement \u003d new JsonAdaptedEngagement(VALID_ENGAGEMENT_TYPE,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                VALID_TIME_SLOT, VALID_LOCATION, INVALID_DESCRIPTION, VALID_ATTENDEES, VALID_PRIORITY);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e jsonAdaptedEngagement.toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        JsonAdaptedEngagement jsonAdaptedEngagement \u003d new JsonAdaptedEngagement(VALID_ENGAGEMENT_TYPE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                VALID_TIME_SLOT, VALID_LOCATION, null, VALID_ATTENDEES, VALID_PRIORITY);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e jsonAdaptedEngagement.toModelType());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void toModelType_invalidAttendees_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        JsonAdaptedEngagement jsonAdaptedEngagement \u003d new JsonAdaptedEngagement(VALID_ENGAGEMENT_TYPE,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                VALID_TIME_SLOT, VALID_LOCATION, VALID_DESCRIPTION, INVALID_ATTENDEES, VALID_PRIORITY);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e jsonAdaptedEngagement.toModelType());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void toModelType_nullAttendees_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        JsonAdaptedEngagement jsonAdaptedEngagement \u003d new JsonAdaptedEngagement(VALID_ENGAGEMENT_TYPE,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                VALID_TIME_SLOT, VALID_LOCATION, VALID_DESCRIPTION, null, VALID_PRIORITY);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e jsonAdaptedEngagement.toModelType());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void toModelType_invalidPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        JsonAdaptedEngagement jsonAdaptedEngagement \u003d new JsonAdaptedEngagement(VALID_ENGAGEMENT_TYPE,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                VALID_TIME_SLOT, VALID_LOCATION, VALID_DESCRIPTION, VALID_ATTENDEES, INVALID_PRIORITY);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e jsonAdaptedEngagement.toModelType());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    void toModelType_nullPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        JsonAdaptedEngagement jsonAdaptedEngagement \u003d new JsonAdaptedEngagement(VALID_ENGAGEMENT_TYPE,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uggi121"
        },
        "content": "                VALID_TIME_SLOT, VALID_LOCATION, VALID_DESCRIPTION, VALID_ATTENDEES, null);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e jsonAdaptedEngagement.toModelType());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "uggi121": 119
    }
  },
  {
    "path": "src/test/java/com/typee/storage/JsonAddressBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private java.util.Optional\u003cReadOnlyEngagementList\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return new JsonEngagementListStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementList original \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        JsonEngagementListStorage jsonAddressBookStorage \u003d new JsonEngagementListStorage(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        ReadOnlyEngagementList readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertEquals(original, new HistoryManager(new EngagementList(readBack)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        original.addEngagement(TypicalPersons.HOON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        original.removeEngagement(TypicalPersons.ALICE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        //assertEquals(original, new HistoryManager(new EngagementList(readBack)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        original.addEngagement(TypicalPersons.IDA);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        //assertEquals(original, new HistoryManager(new EngagementList(readBack)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private void saveAddressBook(ReadOnlyEngagementList addressBook, String filePath) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            new JsonEngagementListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new EngagementList(), null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 2,
      "uggi121": 10,
      "nordic96": 5,
      "lyskevin": 11,
      "-": 72
    }
  },
  {
    "path": "src/test/java/com/typee/storage/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        JsonSerializableEngagementList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                JsonSerializableEngagementList.class).get();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementList addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementList typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        JsonSerializableEngagementList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                JsonSerializableEngagementList.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        JsonSerializableEngagementList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                JsonSerializableEngagementList.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, JsonSerializableEngagementList.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 2,
      "uggi121": 5,
      "nordic96": 1,
      "lyskevin": 9,
      "-": 24
    }
  },
  {
    "path": "src/test/java/com/typee/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nordic96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 9,
      "-": 114
    }
  },
  {
    "path": "src/test/java/com/typee/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "//import com.typee.model.EngagementList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "//import com.typee.model.ReadOnlyEngagementList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brebeek"
        },
        "content": "//import com.typee.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        JsonEngagementListStorage engagementListStorage \u003d new JsonEngagementListStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        storageManager \u003d new StorageManager(engagementListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    ////    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    ////        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    ////         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    ////         * {@link JsonEngagementListStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    ////         * More extensive testing of UserPref saving/reading done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    ////         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    ////        EngagementList original \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    ////        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    ////        ReadOnlyEngagementList retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    ////        assertEquals(original, new EngagementList(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    ////    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public void getEngagementListFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assertNotNull(storageManager.getEngagementListFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 2,
      "nordic96": 2,
      "brebeek": 9,
      "lyskevin": 10,
      "-": 46
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/AddressBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.EngagementList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * {@code EngagementList ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private EngagementList engagementList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementList \u003d new EngagementList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public AddressBookBuilder(EngagementList engagementList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.engagementList \u003d engagementList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Adds a new {@code Person} to the {@code EngagementList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public AddressBookBuilder withPerson(Engagement engagement) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        engagementList.addEngagement(engagement);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return engagementList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 2,
      "nordic96": 1,
      "lyskevin": 10,
      "-": 21
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/ArgumentMultimapBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uggi121"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.logic.interactive.parser.Prefix;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * Represents a class that helps build {@code ArgumentMultimaps}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uggi121"
        },
        "content": "public class ArgumentMultimapBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Builds and returns an {@code ArgumentMultimap} containing the entered prefixes and arguments."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param prefixes Prefixes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @param arguments Arguments."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * @return {@code ArgumentMultimap} with the entered input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static ArgumentMultimap build(List\u003cPrefix\u003e prefixes, List\u003cString\u003e arguments) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        assert prefixes.size() \u003d\u003d arguments.size();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        int numberOfArguments \u003d arguments.size();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        for (int i \u003d 0; i \u003c numberOfArguments; i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            argumentMultimap.put(prefixes.get(i), arguments.get(i));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return argumentMultimap;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uggi121"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 33
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.person.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": " * A utility class to help with building EditEngagementDescriptor objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    private EditCommand.EditEngagementDescriptor descriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        descriptor \u003d new EditCommand.EditEngagementDescriptor();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public EditPersonDescriptorBuilder(EditCommand.EditEngagementDescriptor descriptor) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditEngagementDescriptor(descriptor);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Returns an {@code EditEngagementDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        descriptor \u003d new EditCommand.EditEngagementDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     * Sets the {@code Name} of the {@code EditEngagementDescriptor} that we are building."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public EditCommand.EditEngagementDescriptor build() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 9,
      "nordic96": 4,
      "-": 28
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/EngagementBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.AttendeeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.EngagementType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.TimeSlot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.exceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * A utility class to help with building Engagement objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class EngagementBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int DEFAULT_START_YEAR \u003d 2020;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int DEFAULT_START_MONTH \u003d 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int DEFAULT_START_DAY \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int DEFAULT_START_HOUR \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int DEFAULT_START_MINUTE \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int DEFAULT_END_YEAR \u003d 2020;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int DEFAULT_END_MONTH \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int DEFAULT_END_DAY \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int DEFAULT_END_HOUR \u003d 2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final int DEFAULT_END_MINUTE \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final String DEFAULT_LOCATION_NAME \u003d \"University Town\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final String DEFAULT_DESCRIPTION \u003d \"Tea party\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private static final Priority DEFAULT_PRIORITY \u003d Priority.LOW;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    protected TimeSlot timeSlot;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    protected AttendeeList attendees;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    protected Location location;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    protected Priority priority;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Constructs the EngagementBuilder with default details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementBuilder() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDateTime startTime \u003d LocalDateTime.of(DEFAULT_START_YEAR,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                DEFAULT_START_MONTH, DEFAULT_START_DAY, DEFAULT_START_HOUR, DEFAULT_START_MINUTE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        LocalDateTime endTime \u003d LocalDateTime.of(DEFAULT_END_YEAR,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                DEFAULT_END_MONTH, DEFAULT_END_DAY, DEFAULT_END_HOUR, DEFAULT_END_MINUTE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        timeSlot \u003d new TimeSlot(startTime, endTime);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        List\u003cPerson\u003e defaultAttendees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        PersonBuilder personBuilder \u003d new PersonBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        defaultAttendees.add(personBuilder.build());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        attendees \u003d new AttendeeList(defaultAttendees);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION_NAME);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        description \u003d DEFAULT_DESCRIPTION;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        priority \u003d DEFAULT_PRIORITY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Initializes the EngagementBuilder with the data of {@code engagementToCopy}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementBuilder(Engagement engagementToCopy) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        timeSlot \u003d engagementToCopy.getTimeSlot();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        attendees \u003d engagementToCopy.getAttendees();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        location \u003d engagementToCopy.getLocation();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        description \u003d engagementToCopy.getDescription();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        priority \u003d engagementToCopy.getPriority();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns an appointment, which is a type of engagement, with default the details."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @return An appointment with the default details."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Engagement buildAsAppointment() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement engagement \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            engagement \u003d Engagement.of(EngagementType.APPOINTMENT, timeSlot, attendees, location,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    description, priority);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (InvalidTimeException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // Exception should not be thrown when using the default times."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return engagement;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns an appointment, which is a type of engagement, with default the details."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @return An interview with the default details."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Engagement buildAsInterview() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement engagement \u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            engagement \u003d Engagement.of(EngagementType.INTERVIEW, timeSlot, attendees, location,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    description, priority);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (InvalidTimeException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // Exception should not be thrown when using the default times."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return engagement;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns an appointment, which is a type of engagement, with default details."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * @return A meeting with the default details."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public Engagement buildAsMeeting() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        Engagement engagement \u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            engagement \u003d Engagement.of(EngagementType.MEETING, timeSlot, attendees, location,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    description, priority);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        } catch (InvalidTimeException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            // Exception should not be thrown when using the default times."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return engagement;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Sets the {@code description} of the {@code Engagement} that we are building."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Sets the {@code startTime} and {@code endTime} of the {@code Engagement} that we are building."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementBuilder withStartAndEndTime(LocalDateTime startTime, LocalDateTime endTime) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        requireNonNull(startTime);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        requireNonNull(endTime);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        assert startTime.compareTo(endTime) \u003c 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        this.timeSlot \u003d new TimeSlot(startTime, endTime);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Sets the {@code attendees} of the {@code Engagement} that we are building."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementBuilder withAttendees(AttendeeList attendees) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.attendees \u003d attendees;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Sets the {@code location} of the {@code Engagement} that we are building."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementBuilder withLocation(Location location) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Sets the {@code priority} of the {@code Engagement} that we are building."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public EngagementBuilder withPriority(Priority priority) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 10,
      "lyskevin": 150
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.person.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return new Person(name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 1,
      "nordic96": 3,
      "-": 34
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/PlayerBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.game.Player;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.beans.property.SimpleDoubleProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * A utility class to help with building Player objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class PlayerBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final int DEFAULT_SCORE_VALUE \u003d 3000;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final int DEFAULT_HEALTH_VALUE \u003d 50;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private static final double DEFAULT_HEALTH_PROPERTY_VALUE \u003d 0.5;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private int score;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private int health;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private SimpleIntegerProperty scoreProperty \u003d new SimpleIntegerProperty(this, \"score\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private SimpleDoubleProperty healthProperty \u003d new SimpleDoubleProperty(this, \"health\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private SimpleBooleanProperty isGameOver \u003d new SimpleBooleanProperty();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private StringProperty inputTextProperty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public PlayerBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        score \u003d DEFAULT_SCORE_VALUE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        scoreProperty.setValue(score);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        health \u003d DEFAULT_HEALTH_VALUE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        healthProperty.set(DEFAULT_HEALTH_PROPERTY_VALUE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        isGameOver.set(false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Initializes the PlayerBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public PlayerBuilder(Player playerToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        score \u003d playerToCopy.getScore();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        scoreProperty.setValue(score);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        health \u003d playerToCopy.getHealth();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        healthProperty.set(health);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        isGameOver.set(false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Sets the {@code score} of the {@code Player} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public PlayerBuilder withScore(int score) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     * Sets the {@code health} of the {@code Player} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public PlayerBuilder withHealth(int health) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        this.health \u003d health;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        if (health \u003d\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            isGameOver.set(true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public Player build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "        return new Player(score, health, scoreProperty, healthProperty, isGameOver, inputTextProperty);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 66
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uggi121"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return Index.fromOneBased(model.getFilteredEngagementList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return Index.fromOneBased(model.getFilteredEngagementList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    public static Engagement getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uggi121"
        },
        "content": "        return model.getFilteredEngagementList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uggi121": 5,
      "nordic96": 3,
      "-": 47
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/TypicalEngagements.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.EngagementList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.HistoryManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "import com.typee.model.engagement.Engagement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " * A utility class containing a list of {@code Engagement} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyskevin"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "public class TypicalEngagements {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final Engagement TYPICAL_APPOINTMENT \u003d new EngagementBuilder().withDescription(\"Appointment\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .withStartAndEndTime(LocalDateTime.of(2019, 10, 20, 10, 0),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    LocalDateTime.of(2019, 10, 20, 11, 0))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .buildAsAppointment();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final Engagement TYPICAL_INTERVIEW \u003d new EngagementBuilder().withDescription(\"Interview\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .withStartAndEndTime(LocalDateTime.of(2019, 10, 20, 12, 0),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    LocalDateTime.of(2019, 10, 20, 13, 0))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .buildAsInterview();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final Engagement TYPICAL_MEETING \u003d new EngagementBuilder().withDescription(\"Meeting\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .withStartAndEndTime(LocalDateTime.of(2019, 10, 20, 17, 0),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    LocalDateTime.of(2019, 10, 20, 21, 0))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .buildAsMeeting();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final Engagement LUNCH_APPOINTMENT \u003d new EngagementBuilder().withDescription(\"Lunch\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .withStartAndEndTime(LocalDateTime.of(2019, 11, 20, 10, 0),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    LocalDateTime.of(2019, 11, 20, 11, 0))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .buildAsAppointment();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final Engagement GOOGLE_INTERVIEW \u003d new EngagementBuilder().withDescription(\"Googs\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .withStartAndEndTime(LocalDateTime.of(2019, 11, 20, 12, 0),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    LocalDateTime.of(2019, 11, 20, 13, 0))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .buildAsInterview();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final Engagement TEAM_MEETING \u003d new EngagementBuilder().withDescription(\"Team Project Meeting\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .withStartAndEndTime(LocalDateTime.of(2019, 11, 20, 17, 0),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "                    LocalDateTime.of(2019, 11, 20, 21, 0))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            .buildAsMeeting();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    private TypicalEngagements() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns an {@code EngagementList} with all the typical persons."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static HistoryManager getTypicalEngagementList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementList engagementList \u003d new EngagementList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        for (Engagement engagement : getTypicalEngagements()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "            engagementList.addEngagement(engagement);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        HistoryManager hm \u003d new HistoryManager(engagementList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return hm;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static List\u003cEngagement\u003e getTypicalEngagements() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(TYPICAL_APPOINTMENT, TYPICAL_INTERVIEW, TYPICAL_MEETING));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyskevin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyskevin": 61
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final Index INDEX_FIRST_ENGAGEMENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final Index INDEX_SECOND_ENGAGEMENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "    public static final Index INDEX_THIRD_ENGAGEMENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 2,
      "lyskevin": 3,
      "-": 7
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\").build();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\").build();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").build();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").build();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").build();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(CommandTestUtil.VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(CommandTestUtil.VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    private TypicalPersons() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "     * Returns an {@code EngagementList} with all the typical persons."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uggi121"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brebeek"
        },
        "content": "    public static HistoryManager getTypicalAddressBook() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyskevin"
        },
        "content": "        EngagementList ab \u003d new EngagementList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uggi121"
        },
        "content": "            ab.addEngagement(person);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        HistoryManager hm \u003d new HistoryManager(ab);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brebeek"
        },
        "content": "        return hm;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uggi121"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uggi121"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 9,
      "uggi121": 7,
      "nordic96": 5,
      "brebeek": 3,
      "lyskevin": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/com/typee/testutil/TypicalPlayers.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "package com.typee.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "import com.typee.game.Player;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " * A utility class containing a list of {@code Player} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "public class TypicalPlayers {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final int START_OF_GAME_SCORE \u003d 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final int START_OF_GAME_HEALTH \u003d 100;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final Player START_OF_GAME \u003d new PlayerBuilder().withScore(START_OF_GAME_SCORE)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            .withHealth(START_OF_GAME_HEALTH).build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final int MID_GAME_SCORE \u003d 5000;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final int MID_GAME_HEALTH \u003d 50;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final Player MID_GAME \u003d new PlayerBuilder().withScore(MID_GAME_SCORE).withHealth(MID_GAME_HEALTH)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final int END_GAME_SCORE \u003d 10000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final int END_GAME_HEALTH \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    public static final Player END_GAME \u003d new PlayerBuilder().withScore(END_GAME_SCORE).withHealth(END_GAME_HEALTH)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    private TypicalPlayers() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jun-ha0"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jun-ha0": 26
    }
  },
  {
    "path": "src/test/java/com/typee/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nordic96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/com/typee/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nordic96"
        },
        "content": "package com.typee.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import static com.typee.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nordic96"
        },
        "content": "import com.typee.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nordic96": 3,
      "-": 112
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003c?import com.typee.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import com.typee.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nordic96"
        },
        "content": "\u003cfx:root type\u003d\"com.typee.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "nordic96": 1,
      "-": 6
    }
  }
]
